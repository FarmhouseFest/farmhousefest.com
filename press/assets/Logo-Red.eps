%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Logo Red.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Dave Shea
%%CreationDate: 2017-01-16
%%BoundingBox: 0 0 248 305
%%HiResBoundingBox: 0 0 247.9019 304.9121
%%CropBox: 0 0 247.9019 304.9121
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 104 128 8%%BeginData: 16988 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD33FFCAFD67FFCACAFD66FFCACAFD66FFCAC9FD66FFC3CAFD66FF%C9C3FD66FFC3C9FD66FFC3A0FD66FFC2C3FD66FFC3BCFD66FFBCC3FD66FF%C2BCFD66FFBCC3FD4DFFCACAFD17FFBCBCFD17FFC9FD36FFC3FD17FFBCBC%FD16FFC3FD37FFCF9AFD16FFBC9AFD15FFC3C3FD38FFCAC3FD15FFBCBCFD%14FFCAC3CFFD39FFBCC3FD14FFBCB5FD14FFBCC3FD3AFFCABCCAFD13FFBC%BCFD13FFC3BCFD3CFF9ABCFD0AFFCAFD07FFCABCB5FD07FFCAFD0AFFCAB5%CAFD3DFFB5C3FD0AFFC9FD07FFB6BCCAFD06FFCAFD0AFFB6C3FD3EFFC3B0%CAFD08FFCAC3FD06FFCABCB5CAFD05FFCAC3FD09FFBCBCCAFD3FFFBCB5CF%FD08FFBCCAFD06FFB6BCCAFD05FFC3C3FD08FFC3B6C3FD40FFA1B6BCFD08%FFC39AFD05FFCAB693FD06FFBCA1FD07FFA1B6BCFD42FFC3B6C3FD07FFC3%BCFD05FFCAB5BCCAFD04FFCFB5CFFD06FFCABCB5CFFD43FFB5B6C3FD06FF%CAB5CAFD04FFCAB6B5CAFD04FFC3B6CAFD06FFBCB0C3FD44FFCAB5BCCAFD%05FFCAB6C3FD04FFCAB6BCCAFD04FFBCBCFD06FFC3B5BCCAFD0BFFCAFD2C%FFCAC3C3FD0AFFBCB0BCFD06FFB5BCCAFFFFFFA7BCB5CAFFFFFFCA93C3FD%05FFCA93B6C3FD09FFCAC3C3FD2FFFC3BCCAFD08FFCABCB5CAFD05FFBCB5%CFFFFFFFCFB6BCCAFFFFFFC3B6C3FD05FFBCB6BCFD09FFC3C3C3FD31FFCA%B5BCCAFD07FFC3B6B5CAFD04FFBCB5C2FFFFFFC9BCB5CAFFFFFFBCB0C9FD%04FFBCB6B5FD08FFCABCBCC9FD34FFBCB6C2FD07FFBCB6BCFD04FFC9B5BC%FFFFFFCAB5BCCAFFFFFFB6BCCAFFFFFFC3B6B5C9FD06FFCAC3B0C3FD37FF%A0B6B5C3CAFD04FFCAB5B6A0FFFFFFA1B6B5CAFFFFCAB693CFFFFFA1B6B5%FFFFFFCABC8DBCFD05FFCF9AB6B5C3FD39FFCABCB0BCC3FD04FFC3B5BCCA%FFFFFFBCB6C3FFFFFFB6BCCAFFFFC3B5C3FFFFFFC3B5BCCAFD04FFC9B6B6%BCCFFD3BFFCAC3B0B6BCCAFFFFFFBCB0C3FFFFFFBCB0C3FFFFCABCB5FFFF%FFBCB6C3FFFFCAB5B6C3FFFFFFC9BCB0B6BCFD3FFFCAB6B6B6C3FFFFCABC%B5CAFFFFC3B6BCFFFFFFBCBCFFFFCABCB5CAFFFFBCB6C2FFFFFFC3B6B0BC%C9FD41FFCA9AB6B0BCCAFFC3B59AFFFFCA8DBCFFFFFFBCBCFFFFCFB5BCCA%FFC3B09AFFFFCA94B6B5C3CAFD44FFC9BCB0BCFFFFC3C3FFFFFFCAC3FFFF%FFC9CAFFFFFFC3CAFFFFCABCFFFFFFB5B6BCCAFD48FFC9C3FD1AFFC3C3FD%FCFFFD85FFFD04CAC3CAC3C3C3C9C3C3C2C3C3C3C2FD04C3C9C3C3C3CAC3%CAC3FD04CAFD34FFCAFFCAFFCAFD09FFC3C3FD04BCB5BCB6B6B5B6B5B6B5%B6B5B6B5B6B5B6B5B6B5B6B5B6B5B6B5BCB5BCB5FD04BCC3BCC3CAFD09FF%CAFFCAFFCAFD15FFCFA1C3C3C39AC3BCBC9ABCB5BC93BCB5BC9AC3CAFD05%FFCAC2B0B693BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93%BCB5BC93BCB5BC93BCB5B693B5BCFD07FFC3BC93BCB5BC93BCB6BC9ABCBC%C39AC3C3C9CAFD09FFCFBCB6B5B6B5BCB6BCBCC3B6BCB6BCB6BCB6BCB5BC%C3FD06FFC3B5BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6%BCBCBCB6BCBCBCB6BCBCBCB6BCC3FD06FFCAFD04BCB6BCB6BCB6BCB6BCB6%BCB5BCB5B6B5BCCAFD08FFBCB6B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5%BCB5B6C2FD06FFC3B5BCB5BCB5BCB5BCB5C2C2BCB5BCB5BCB5BCB5BCB5BC%B5BCB5BCB5BCB5BCB5BCB5BCB5B6BCFD06FFC3B5B6BCC3B5BCB5BCB5BCB5%BCB5BCB5BCB5BCB5BCB5BCFD07FFCABCB6BCB6BCBCBCB6BCBCBCB6BCBCBC%B6BCBCBCB6BCB6B6C3FD05FFCABCB5BCBCBCB6BCBCBCB6BCBCBCB6BCBCBC%B6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCB6CFFD05FFCAB5BCB6BCB6BC%B6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB5FD07FFC993BCB5BC93BCB5BC93%BCB5BC93BCB5BC93BCB5BC93BCB5BCCAFD05FFBCB693BCB5BC93BCB5BC93%BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93C3FD06FF9AB6%B5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5B6A1FD06FFFD04BCB6%BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB5CAFD05FFCAB5BCBCBCB6%BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6B6C3%FD05FFCABCB6BCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB5C3FD%05FFCABCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5B6C3FD%05FFCAB6B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BC%B5BCB5BCB5BCB5CAFD05FFC3B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BC%B5BCB5BCBCBCB5CFFD04FFCAB5BCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBC%B6BCBCBCB6BCB5C3FD05FFCAB6BCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBC%B6FD07BCB6BCBCBCB6BCB6BCCAFD05FFC3B6B6BCBCBCB6BCBCBCB6BCBCBC%B6BCBCBCB5BCBCBCB6BCB6B6C3FD04FF9AB6B5BC93BCB5BC93BCB5BC93BC%B5BC93BCB5BC93BCB5BC93B6C2FD05FFA7BCB5BC93BCB5BC93BCB5BC93BC%B5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5CAFD05FFC3B5BC93BC%B5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BCFFFFFFCABCB6BCB6%BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCB5CAFD05FFCAB6BCB6%BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBC%B6C3FD05FFC9B6B6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBC%BCB6FFFFFFC3B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BC%B5BCCAFD05FFC3B6B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BC%B5BCB5BCB5BCB5BCB5BCB5C3FD05FFCFB5BCB5BCB5BCB5BCB5BCB5BCC2BC%B5BCB5BCB5BCB5BCB5BCB5B6C3FFFFBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6%BCBCBCB6BCBCBCB6FD04BCFD06FFC3B5BCBCBCB6BCBCBCB6BCBCBCB6BCBC%BCB5BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCC3FD06FFC3B5BCB6FD05BC%B6BCB5BCBCBCB6BCBCBCB6BCBCBCB6BCB6C2FFCABCB5BC93BCB5BC93BCB5%BC93BCB5BC93BCB5BC93BCB5BC93BCB5C9FD06FFBCB693B6B5B693B6B5B6%93B6B5B693B6B5B693B6B5B693B6B5B693B6B5B693B6B5B693BCCAFD05FF%A1B6B5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5CACAB5%BCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCB6BCFD07FFC3B6%BCBCC3BCC3C2C3C2FD13C3BCC3BCC3BCBCBCFD07FFBCBCB6BCBCBCB6BCBC%BCB6BCBCBCB6FD07BCB6BCBCB6C3BCBCB5BCB5BCB5BCB5BCB5BCB5BCB5BC%B5BCB5BCB5BCB5BCB5B6C3FD09FFCAFD1FFFCAFD08FFCAB5BCB5BCB6BCB5%BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCBCB6BCBCBCB6BCBCBCB5BC%BCBCB6BCBCBCB6BCBCBCB6BCBCB6BCFD34FFC3B5FD05BCB6BCBCBCB6BCBC%BCB6BCB6BCB6BCBCBCB6BCB6BCB693B6B5B693BCB5BC93BCB5BC93BCB5BC%93BCB5BC93BCB5CAFD34FFCABCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5%B693B6B5B693BCFFBCC3BCC3C3C3B6BCB6BCB6BCB6BCBCBCB6BCBCBCB6BC%B6C3FD07FFCAC9FFCAFD21FFCACACAFD07FFC3B6B6BCBCBCB6BCBCBCB6BC%BCBCB6FD04BCC9C3C3BCC3CAFD06FFC3B6B5BCB5BCB5BCB5BCB5BCB5BCB5%BCB5B6CAFD06FFC3B5B6B5BCB6FD04BCC3BCC3C3C3C2FD04C3C9FD06C3C2%C3BCC3BCC3BCBCB5BCBCBCB5BCBCFD06FFCAB5BCB5BCB5BCB5BCB5B6B5BC%B5BCB5BCB5C3FD0CFFC3B5BCBCBCB6BCB6C2FD04BCB6BCBCB6BCFD06FFCA%B5BCB6BCB5BCB6BCB5BCB5B6B5B6B5BCB5B6B5B6B5B6B5B6B5B6B5B6B5BC%B6B6B5BCB6BCB5BCB6BCB5B6C3FD06FFC3B5BCB6BCBCBCB5BCBCBCB5BCBC%BCB6BCBCFD0CFFBCB693BCB5BC93CAFFCA94BCB5BC93BCB5C9FD06FFBCB6%93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BC%B5BC93BCB5BC93BCB5BC93BCCAFD05FFA1B6B5BC93BCB5BCCAFFCABC93BC%B5BC93BCCAFD0AFFCABCB6BCBCBCB5C9FFFFFFC3B6BCB6BCB6BCCFFD05FF%C3B6B6BCBCBCB6BCBCBCB6BCBCBCB6BCC3BCB6BCBCBCB6BCBCBCB6BCBCBC%B6BCBCBCB6BCBCBCB6BCBCBCB6BCB5CAFD06FFBCBCB6FD04BCFFFFFFC3B6%BCBCB6BCB6CAFD0AFFC9B5BCB5BCB5BCCAFFFFFFB5BCB5BCB5B6BCFD06FF%C2B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCBCBCB5BCB5BCB5BCB5BCB5BCB5%BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCBCFD06FFC3B5BCB5BCB5BCCAFFFFCA%B5BCB5BCB5B6C3FD0AFFC2B6BCBCB6BCBCFFFFFFCABCB5BCBCBCB5CAFD05%FFCAB5BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB5BCBCBCB6BCBCBCB6BCBCBC%B6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB5BCCAFD05FFC9BCB6BCB6BCB6CA%FFFFFFBCB5BCBCBCB5C3FD0AFFBC93BCB5BC93C3FFFFFFC9B5BC93BCB5BC%CAFD05FFC3B693BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC%93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCBCBC8DC3FD06FF93BCB5BC93%B6C3FFFFFFBCB693BCB5B69AFD0AFFFD04BCB6BCC3FFFFFFC3B6B6FD04BC%FD06FFC3B5BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BC%BCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCFD06FFC3B6BCB6BCB6%C3FFFFFFC9B5BCBCBCB6BCCAFD08FFCABCB5BCB5BCB5C9FFFFFFC3B5BCB5%BCB5C3FD06FFB6BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BC%B5BCB5BCB5BCB5BCB6BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCCAFD05FFBCB6%B5BCB5BCBCFFFFFFC3B6B5BCB5BCB5CAFD08FFCAB6BCB6BCB6B6C3FFFFFF%FD04BCB6B6C3FD05FFCABCB6BCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6%BCBCBCB6BCBCBCB6BCBCBCB6BCB6BCB6BCBCBCB6BCBCBCB6BCBCBCB5CAFD%05FFC3B5BCBCBCB5BCFFFFFFCAB6BCB6BCB6B6C3FD08FFA1B6B5BC93BCB5%CAFFFFFFBC93BCB5BC8DC3FD05FFCA93BCB5BC93BCB5BC93BCB5BC93BCB5%BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93%BCB5B6A1FD05FFC3B693BCB5BC93FFFFFFA7BCB5BC93BCB5C3FD08FFCAB5%BCB6BCBCB6C3FFFFCAB6BCBCBCB6BCC9FD05FFC3B6BCBCB6BCBCBCB6FD07%BCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCC3CAB6BCBCBCB6BCBCBCB6%BCBCBCB5C9FD05FFCAB5BCBCBCB6BCCAFFFFCAB6BCB6BCBCB6C3FD08FFC2%B6B6BCB5BCB5BCBCC3B6BCB5BCB5BCB5CAFD05FFC3B5BCB5BCB5BCB5BCB5%BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCBCBCB5BCB5%BCB5BCB5BCB5BCBCB6C2FD05FFCABCB5BCB5BCB5BCC3C3B5BCB5BCB5BCB5%C3FD08FFC3B5BCBCBCB6BCB6B6B5BCBCBCB6BCB6BCCAFD05FFC3B6B6BCBC%BCB6BCBCBCB6BCB6BCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB5%BCB6BCB6BCBCBCB6BCBCBCB6BCB5C3FD05FFCAB6BCB6BCBCBCB5B6B5BCB6%BCBCBCB6BCC3FD08FFC2B693BCB5BC93BCB5BC93BCB5BC93BCB5CAFD05FF%C3B5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5%BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93B6BCFD05FFA7BCB5BC93BCB5%BC93BCB5BC93BCB5BC93C3FD08FFC3B5BCBCBCB6BCBCBCB6BCBCBCB6BCB6%BCCAFD05FFC3B6B6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBC%BCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCB6C3FD05FFCFB6%BCB6BCBCBCB6BCBCBCB6BCBCBCB6BCC2FD08FFC3B6B5BCB5BCB5BCB5BCB5%BCB5BCB5BCB5CAFD05FFC3B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5%BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5B6BC%FD05FFCABCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5C3FD08FFC3B5BCB6BCBC%BCB6BCBCBCB6BCBCBCB5BCC9FD05FFC3B6BCBCB6BCBCBCB6BCBCBCB6BCBC%BCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6%BCBCBCB5C3FD05FFCAB5BCBCBCB6BCBCBCB6BCBCBCB6BCBCB6C3FD08FFA1%B6B5BC93BCB5BC93BCB5BC93BCB5BC93C9FD05FFC993BCB5BC93BCB5BC93%BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5%BC93BCB5BC93BCB5B6A1FD05FFC3B693BCB5BC93BCB5BC93BCB5BC93BCB5%C3FD08FFCAB5BCB6BCBCBCB6BCBCBCB6BCBCBCB6B6C3FD05FFCABCB6BCB6%BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBC%BCB6BCBCBCB6BCBCBCB6BCBCBCB5CAFD05FFC9B5BCBCBCB6BCBCBCB6BCBC%BCB6BCBCB6C3FD08FFC3BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5C3FD06FF%B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BC%B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCCAFD05FFBCB6B5BCB5BCB5B6%B5BCB5BCB5BCB5BCB5C9FD08FFCAB5BCBCBCB6FD04BCC3B6BCB6FD04BCFD%06FFC2B5BCBCBCB6BCBCBCB6BCBCBCB6BCBCC3FD04BCB6BCBCBCB6BCBCBC%B6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCFD06FFBCB6BCB6BCB6BCBC%C3B6BCB6BCBCBCB5BCCAFD08FFCABC93BCB5BC93B6BCFFFFC3B5BC93BCB5%B6CAFD05FFC3B693BCB5BC93BCB5BC93BCB5BC93BCB6BC93BCB5BC93BCB5%BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93C3FD05FFCA93BCB5%BC93B6C2FFFFC3B5BC93BCB5BC93CFFD09FFFD04BCB6BCB6CAFFFFCABCB6%BCBCBCB5CAFD05FFCAB5BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6%BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCCAFD05FFC3%BCBCBCB6BCB6CFFFFFCABCB6BCBCBCB6BCFD0AFFC3B5BCB6BCB5B6C3FFFF%FFBCB6B5BCB5B6BCFD06FFBCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BC%B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5B6BCFD06FF%C3B5BCB5BCB5BCFFFFFFCAB5BCB5BCB5B6BCFD0AFFC3B6B6BCB6BCB5C3FF%FFFFC3B5BCB6BCB6BCCAFD05FFC9C3FD04BCB6BCBCBCB6BCBCBCB6BCBCBC%B6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCB5C9FD06%FFBCBCB6BCBCB6C2FFFFFFC3B6BCBCB6BCB5C3FD0AFFCAB5BC93BCB5B69A%FFFFFFC9B6B5BC93BCB5C3FD06FFBCB693BCB5BC93BCB5BC93BCB5BC93BC%B5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCCAFD%05FFA1B6B5BC93BCB5CAFFFFFFBC93BCB5BC93B6C3FD0BFFBCB6BCBCBCB6%BCCAFFFFFFBCBCB6FD04BCFD06FFCAB5BCBCBCB6BCBCBCB6BCBCBCB6BCBC%BCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6B6C3FD06%FFC3B6BCB6BCB6BCFD04FFB6BCBCBCB6BCBCFD0CFFBCB6B5BCB5BCB5C3FF%FFFFC9B5BCB5BCB5B6C3FD06FFC2B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BC%B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5B6BCFD06FFCAB5%BCB5BCBCBCC3FFFFFFC3B6B5BCB5BCB5C3FD0CFFCAB5BCB6FD04BCFFFFFF%CABCB6BCB6BCB6BCFD06FFCABCB5BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6%BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCB6CAFD06FFBCB6B6BC%B6C3BCFD04FFBCB6BCB6BCBCB6C3FD0CFFCABCB5BC93BCB5B6A1FFFFFF9A%BCB5BC93BCB5C9FD06FFC3B693BCB5BC93BCB5BC93BCB5BC93BCB5BC93BC%B5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93C9FD06FFA1B6B5BC93BCB5%BCFFFFFFCA93BCB5BC93BCB5CAFD0DFFC2B6B6BCBCBCB5BCCAFFC3BCB6BC%B6FD04BCFD07FFC3B6B6BCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBC%BCB6BCBCBCB6BCBCBCB6BCBCBCB5C3FD07FFBCB6BCB6BCBCBCB6CAFFFFFD%04BCB6BCB6C3FD0EFFCAB5BCB5BCB5BCB5BCBCB6B5BCB5BCB5BCB5B6BCFD%07FFBCB6B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BC%B5BCB5BCB5BCB5C3FD07FFC3B5BCB5BCB5BCB5BCB5C2BCB6B5BCB5BCB5B6%C3FD0FFFBCB6BCB5BCBCBCB5BCB6BCB6BCBCBCB6BCB6B6C3FD07FFC3B6B6%BCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB5%C3FD07FFCAB5BCB6BCBCBCB6BCBCBCB5BCBCBCB6FD04BCFD10FFA1B6B5BC%93BCB5BC93BCB5BC93BCB5BC93BCB5B6CAFD07FFA1BCB5BC93BCB5BC93BC%B5BC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93B6B5C3FD07FFCA93BCB5BC%93BCB5BC93BCB5BC93BCB5BC93BCB5C3FD11FFFD06BCB6BCBCBCB6BCBCBC%B6BCBCBCB5BCCFFD07FFCABCB5BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BC%BCBCB6BCBCBCB6B6BCCAFD08FFFD04BCB6BCBCBCB6BCBCBCB6BCBCBCB6BC%B6BCCAFD11FFC3B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCCAFD08%FFC3B5B6B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCC3FD09FF%BCB6B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5B6C3FD12FFCABCB6BCB6BC%BCBCB6BCBCBCB6BCB6BCB6BCBCBCB5C3FD0AFFC3BCB5B6B6BCBCBCB6BCBC%BCB6BCBCBCB6BCB6B6B6C3CAFD09FFBCB6BCBCB6BCBCBCB5BCBCBCB6BCBC%BCB6BCBCBCB5FD14FFA1B6B5BC93BCB5BC93BCB5B693B6B5BC93BCB5BC93%BCCAFD09FFCACABCB693BCB5BC93BCB5BC93BCB5BC93BCC3FD0BFFBCB693%BCB5BC93BCB5B693BCB5BC93BCB5BC93BCB5C3FD15FFBCBCB6BCBCBCB6FD%04BCCFCABCB5BCBCBCB6BCB6BCC9FD0BFFC3BCBCBCB6BCBCBCB6BCBCBCB5%C3FD0BFFCABCBCB6BCBCBCB6BCBCCACAC3B6BCB6BCBCBCB6BCB6BCFD16FF%CAB5BCB5BCB5BCB5BCB5CAFFFFCABCB5BCB5BCB5BCB5B6BCFD0BFFBCB6B5%BCB5BCB5BCB5BCB5BCFD0BFFC3B5BCB5BCB5BCB5B6B5CAFFFFCABCB5BCB5%BCB5BCB5B6C3FD17FFC3B5BCB6BCBCBCB5BCCAFFFFFFCABCB5BCBCBCB6BC%B6B6BCCAFD0AFFFD04BCB6BCBCBCB5BCCAFD09FFCABCB5BCB6BCBCBCB6BC%BCCAFFFFFFCAB5BCBCBCB6BCBCB6BCFD18FFCABCB5BC93BCB5BC93BCFD04%FFCABC93BCB5BC93BCB5B693C3CAFD08FFC393BCB5BC93BCB5B6A0FD08FF%CABCB693BCB5BC93BCB5B693CAFD04FFBCB693BCB5BC93BCB5FD1AFFCABC%B6BCBCBCB6BCB5C3FD04FFCAC3B6BCB6BCBCBCB6BCB6BCBCCFFD06FFCFBC%B6BCB6BCBCBCB6FD07FFCAC3B6B6B6BCBCBCB6BCBCB6BCFD05FFC3B6B6BC%BCBCB6BCB6CAFD1BFFC3B6B5BCB5BCB5BCB5C3FD05FFC3B5BCB5BCB5BCB5%BCB5B6B5C3FD06FFC2B6B5BCB5BCB5C3FD06FFC3B6B5BCB5BCB5BCB5BCB5%B6BCFD05FFC3B6B5BCB5BCB5BCB5C3FD1DFFC2B6B6BCBCBCB6BCB5C3FD04%FFCABCB6BCB6BCBCBCB6BCBCBCB5C3FD05FFCAB5BCBCBCB6B6C3FD05FFC3%B6B6BCB6BCBCBCB6BCBCBCB5FD05FFC3B6B5BCBCBCB6BCB5C3FD1FFFBCB6%93BCB5BC93BCB5BCCAFFFFCA93BCB5BC93BCB5BC93BCB5BC93CAFD04FFCA%BC93BCB5BC93CAFD04FFCAB693BCB5BC93BCB5BC93BCB5BCC9FFFFCF9AB6%B5BC93BCB5BC93BCCAFD20FFFD04BCB6BCBCBCB5BCC3CAFD04BCB6BCBCBC%B6BCBCBCB6BCBCFD05FFFD04BCB6BCFD05FFC3B5BCBCBCB6BCBCBCB6BCBC%BCB6BCC9CAFD04BCB6BCBCBCB5BCCAFD21FFCFB6B6B5B6B5BCB5BCB5B6B5%BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCCAFD04FFC2B5BCB5B6BCFD05FFB5BC%B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5B6B5BCB5BCB5BCB5BCCAFD24FFFD04%BCB5BCBCBCB6BCBCBCB5BCBCBCB6BCBCBCB6BCBCBCB5CAFD04FFC3B6B6BC%B6C3FD04FFC3BCB6BCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBCB5%BCCAFD25FFCF9AC3BCBC93BCB5BC93BCB5BC93BCB5BC93BCB5BC93BCB5B6%A1FD04FFC3B5BC93B6BCFD04FFCA93BCB5BC93BCB5BC93BCB5BC93BCB5BC%93BCB5BC93BCB5BCCAFD28FFBCB6B6BCBCBCB6BCBCBCB6BCBCBCB6BCBCBC%B6BCBCBCB5CAFD04FFC3B6B6BCB6C3FD04FFC3BCBCBCB6BCBCBCB6BCBCBC%B6BCBCBCB6BCBCBCB6BCB5C3CFFD2AFFC3B6B5BCB5BCB5BCB5BCB5BCB5BC%B5BCB5BCB5BCB5B6C3FD04FFC3B5BCB5B6BCFD04FFCAB5BCB5BCB5BCB5BC%B5BCB5BCB5BCB5BCB5BCB5B6B5C3FD2DFFC9BCB5BCBCBCB6BCBCBCB6BCBC%BCB6BCBCBCB6BCBCFD05FFC3B6BCBCB5C3FD05FFBCB5BCBCBCB6BCBCBCB6%BCBCBCB6BCBCBCB6BCB6CAFD2FFFCABC93BCB5BC93BCB5BC93BCB5BC93BC%B5BC8DC3FD05FFC393BCB5B69AFD05FFC3B693BCB5BC93BCB5BC93BCB5BC%93BCB5B69ACAFD32FFCABCB6B6BCBCBCB6BCBCBCB6BCBCBCB5BCFD06FFFD%04BCB5C3FD06FFFD04BCB6BCBCBCB6BCBCBCB6BCB6BCC3FD36FFBCB6B5BC%B5BCB5BCB5BCB5BCB5BCCAFD05FFCABCB5BCB5BCB5FD06FFCAB5B6B5BCB5%BCB5BCB5BCB5B6B5C3CAFD38FFCAC3B5B6B5BCB5BCB6B6B5C3CAFD06FFCA%B6BCB6BCB6B6C3FD07FFBCBCB5BCB5BCB6B6B5BCBCCAFD3CFFCAA1C3BCBC%93BCC2CAFD08FF9AB6B5BC93BCB5BCFD08FFA1C3BCBC93BCBCC3CAFD4EFF%C3BCBCBCB6BCBCBCB5C3FD5DFFC3B6B5BCB5BCB5BCB5BCB5C3FD5AFFCABC%B6B6BCB6BCBCBCB6BCBCBCB5BCC9FD54FFCACAA0BCB5B693BCB5BC93BCB5%BC93BCB5BC93B6BCC3A1FD4DFFCAC3C3BCBCB5B6B6BCB6BCBCBCB6BCBCBC%B6BCBCBCB6BCBCBCB5BCBCBCC2CACAFD46FFC3B6B5B6B5BCB5BCB5BCB5BC%B5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5BCB5B6B0B6B5C3FD44FFCABCC3%BCBCB5B6B5B6B5BCB6BCB6BCBCBCB6BCBCBCB6BCB6BCB5BCB5B6B5BCB6BC%BCC3CAFD46FFCAFFCACAA1C3BCC29ABCB6BC93BCB5BC93BCB5BC93BCBCBC%9AC3C3C3A1CACAFD24FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">fhf2016-logo</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2017-01-16T15:10:49-08:00</xmp:CreateDate>
         <xmp:ModifyDate>2017-01-16T15:10:49-08:00</xmp:ModifyDate>
         <xmp:MetadataDate>2017-01-16T15:10:49-08:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>208</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADQAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FUPqMnp6fdSdeEMjfcpORn9JbcAucR5hvT5PUsLaTpziRqfNQcYcgjMKnIeZV8k1ux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLvMr+n5c1WSleFncNTxp&#xA;ExyGX6T7nK0AvPjH9OP3t+XJPU8vaXJv8dpA2/XeJTji+ke5ddGs8x/Tl96YZNxXYq7FXYq7FXYq&#xA;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&#xA;ir//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:338bbfdc-306d-4379-832b-15a82ffd7a92</stEvt:instanceID>
                  <stEvt:when>2017-01-14T04:21:10-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EE7F11740720681192B0C40E9CFC0D50</stEvt:instanceID>
                  <stEvt:when>2017-01-16T15:10:49-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:9f24cc99-5ccb-1749-8434-5d153d2eb252</stRef:instanceID>
            <stRef:documentID>xmp.did:338bbfdc-306d-4379-832b-15a82ffd7a92</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:EE7F11740720681192B0C40E9CFC0D50</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:EE7F11740720681192B0C40E9CFC0D50</xmpMM:InstanceID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>4.000000</stDim:w>
            <stDim:h>5.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -304.912 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 304.912 li
247.902 304.912 li
247.902 0 li
cp
clp
[1 0 0 1 0 0 ]ct
98.709 120.35 mo
98.7813 120.426 98.8535 120.5 98.9238 120.577 cv
98.8311 120.625 98.7422 120.685 98.6445 120.713 cv
98.6143 120.722 98.5166 120.618 98.5225 120.606 cv
98.5752 120.516 98.6445 120.434 98.709 120.35 cv
102.017 124.135 mo
102.224 124.204 102.42 124.302 102.708 124.434 cv
102.526 124.676 102.431 124.805 102.333 124.934 cv
102.176 124.77 102 124.619 101.875 124.433 cv
101.842 124.383 102.001 124.128 102.017 124.135 cv
103.251 105.165 mo
103.315 105.243 103.378 105.321 103.441 105.399 cv
103.354 105.451 103.271 105.508 103.179 105.546 cv
103.165 105.551 103.075 105.445 103.086 105.417 cv
103.126 105.327 103.194 105.248 103.251 105.165 cv
104.32 126.781 mo
104.361 126.888 104.403 126.996 104.445 127.103 cv
104.35 127.156 104.237 127.266 104.16 127.246 cv
104.066 127.222 104.002 127.085 103.926 126.999 cv
104.058 126.926 104.188 126.854 104.32 126.781 cv
104.165 106.913 mo
105.422 107.86 106.638 108.774 108.059 109.846 cv
108.336 109.723 108.586 109.612 108.83 109.505 cv
108.881 109.588 108.934 109.671 108.984 109.753 cv
108.833 109.875 108.695 110.069 108.528 110.097 cv
108.42 110.115 108.299 110.063 108.163 110.001 cv
104.162 109.375 103.499 108.851 104.165 106.913 cv
109.14 133.855 mo
109.12 133.95 109.075 134.04 109.039 134.132 cv
108.951 134.081 108.863 134.029 108.775 133.978 cv
108.851 133.908 108.919 133.829 109.004 133.774 cv
109.026 133.761 109.144 133.836 109.14 133.855 cv
115.034 105.694 mo
115.235 105.913 115.423 106.053 115.504 106.239 cv
115.532 106.303 115.258 106.606 115.186 106.585 cv
114.986 106.528 114.821 106.354 114.644 106.227 cv
114.745 106.088 114.848 105.949 115.034 105.694 cv
116.471 124.717 mo
116.71 124.995 116.95 125.271 117.19 125.55 cv
117.086 125.639 116.983 125.728 116.879 125.816 cv
116.637 125.542 116.393 125.268 116.149 124.993 cv
116.256 124.901 116.363 124.809 116.471 124.717 cv
119.46 129.5 mo
119.706 129.613 119.875 129.895 120.218 130.258 cv
119.813 130.406 119.512 130.61 119.402 130.535 cv
119.173 130.378 119.046 130.075 118.877 129.832 cv
119.076 129.711 119.341 129.446 119.46 129.5 cv
122.514 115.423 mo
122.6 115.478 122.686 115.534 122.771 115.59 cv
122.703 115.667 122.643 115.75 122.564 115.814 cv
122.549 115.827 122.426 115.757 122.43 115.735 cv
122.442 115.628 122.482 115.527 122.514 115.423 cv
122.908 108.324 mo
122.994 108.38 123.079 108.436 123.164 108.492 cv
123.098 108.568 123.036 108.652 122.959 108.716 cv
122.944 108.729 122.82 108.659 122.823 108.636 cv
122.837 108.531 122.877 108.428 122.908 108.324 cv
107.354 115.788 mo
107.212 115.636 107.028 115.502 106.951 115.323 cv
106.925 115.262 107.16 115.005 107.295 114.987 cv
107.407 114.973 107.547 115.18 107.71 115.32 cv
107.567 115.509 107.46 115.647 107.354 115.788 cv
106.321 133.105 mo
106.275 132.937 106.204 132.768 106.2 132.597 cv
106.198 132.549 106.394 132.496 106.559 132.416 cv
106.586 132.61 106.642 132.786 106.62 132.952 cv
106.612 133.015 106.426 133.056 106.321 133.105 cv
127.277 131.953 mo
127.295 131.945 127.488 132.182 127.464 132.222 cv
127.379 132.361 127.234 132.464 127.104 132.588 cv
126.99 132.43 126.921 132.333 126.852 132.236 cv
126.991 132.137 127.125 132.027 127.277 131.953 cv
136.341 118.961 mo
136.826 118.472 137.248 118.708 137.608 119.111 cv
137.597 119.292 137.585 119.475 137.574 119.657 cv
136.27 119.657 li
136.288 119.419 136.213 119.091 136.341 118.961 cv
137.492 132.529 mo
137.349 132.479 137.217 132.389 137.082 132.312 cv
137.141 132.215 137.203 132.034 137.255 132.037 cv
137.4 132.046 137.541 132.131 137.698 132.19 cv
137.603 132.351 137.515 132.537 137.492 132.529 cv
138.013 116.27 mo
138.161 116.268 138.312 116.336 138.472 116.381 cv
138.397 116.553 138.354 116.657 138.309 116.761 cv
138.165 116.696 138.014 116.644 137.888 116.554 cv
137.867 116.54 137.967 116.27 138.013 116.27 cv
140.108 111.829 mo
140.247 111.842 140.369 112.046 140.543 112.208 cv
140.395 112.374 140.28 112.501 140.166 112.628 cv
140.017 112.464 139.866 112.299 139.716 112.134 cv
139.848 112.023 139.988 111.818 140.108 111.829 cv
145.194 122.057 mo
145.37 122.085 145.504 122.363 145.76 122.645 cv
145.421 122.823 145.121 123.063 145.039 123.005 cv
144.836 122.856 144.732 122.573 144.588 122.343 cv
144.792 122.238 145.014 122.027 145.194 122.057 cv
150.681 132.281 mo
150.771 132.351 150.861 132.419 151.212 132.691 cv
151.004 132.762 150.842 132.847 150.678 132.856 cv
150.592 132.862 150.413 132.695 150.424 132.667 cv
150.484 132.528 150.59 132.408 150.681 132.281 cv
154.36 109.762 mo
154.377 109.751 154.508 109.923 154.639 110.068 cv
154.488 110.165 154.357 110.281 154.204 110.33 cv
154.159 110.344 154.054 110.171 153.976 110.083 cv
154.102 109.972 154.221 109.85 154.36 109.762 cv
156.461 111.84 mo
156.48 111.831 156.673 112.069 156.649 112.108 cv
156.563 112.248 156.417 112.351 156.286 112.475 cv
156.173 112.316 156.104 112.22 156.033 112.122 cv
156.174 112.022 156.309 111.913 156.461 111.84 cv
157.402 129.676 mo
157.504 129.848 157.424 130.128 157.424 130.362 cv
157.29 130.404 157.156 130.446 157.022 130.488 cv
156.872 130.146 156.723 129.804 156.571 129.461 cv
156.647 129.392 156.725 129.321 156.8 129.25 cv
157.008 129.388 157.288 129.482 157.402 129.676 cv
158.842 133.003 mo
158.979 132.944 159.231 133.141 159.572 133.281 cv
159.296 133.604 159.167 133.885 158.979 133.933 cv
158.84 133.968 158.489 133.707 158.478 133.559 cv
158.463 133.375 158.662 133.083 158.842 133.003 cv
160.851 109.883 mo
160.912 109.748 161.106 109.674 161.244 109.574 cv
161.312 109.714 161.458 109.876 161.425 109.988 cv
161.387 110.125 161.198 110.218 160.993 110.403 cv
160.921 110.167 160.803 109.986 160.851 109.883 cv
73.5391 101.627 mo
73.5742 102.021 73.8984 103.177 76.7998 105.548 cv
81.4297 109.33 84.3467 115.482 82.3389 128.34 cv
82.0557 130.154 81.6563 131.813 81.167 133.362 cv
80.8525 134.363 81.5332 136.02 84.2891 135.713 cv
90.6572 135 113.851 134.63 123.962 134.63 cv
134.075 134.63 156.459 134.933 163.05 135.647 cv
166.191 135.989 166.982 134.114 166.638 132.97 cv
166.203 131.533 165.847 130.001 165.586 128.34 cv
163.579 115.482 166.496 109.33 171.125 105.548 cv
174.027 103.177 174.352 102.021 174.387 101.627 cv
174.387 101.357 174.268 101.342 173.918 101.249 cv
170.369 100.309 149.369 98.7637 123.962 98.7607 cv
110.862 98.7627 98.9385 99.1665 89.9688 99.6904 cv
89.8662 99.8057 89.7744 99.9087 89.6865 100.006 cv
89.6006 99.9116 89.5146 99.8164 89.4287 99.7227 cv
80.998 100.226 75.2803 100.833 73.8369 101.299 cv
73.6006 101.375 73.5391 101.49 73.5391 101.627 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
.019 .748 .535 0 cmyk
f
244.174 134.855 mo
243.971 134.578 243.768 134.3 243.564 134.021 cv
243.568 134.019 243.572 134.015 243.576 134.012 cv
243.365 133.833 243.155 133.657 242.944 133.479 cv
243.05 133.388 243.153 133.297 243.259 133.206 cv
243.41 133.436 243.563 133.665 243.715 133.895 cv
243.723 133.889 243.729 133.882 243.737 133.875 cv
243.977 134.122 244.216 134.369 244.453 134.615 cv
244.36 134.695 244.268 134.776 244.174 134.855 cv
235.48 142.803 mo
235.459 142.706 235.426 142.611 235.422 142.514 cv
235.421 142.491 235.548 142.431 235.565 142.446 cv
235.645 142.513 235.705 142.601 235.771 142.682 cv
235.675 142.723 235.578 142.763 235.48 142.803 cv
234.791 119.901 mo
234.297 120.295 233.784 120.667 233.037 121.229 cv
233.04 120.092 233.857 118.661 234.453 118.469 cv
234.61 118.418 234.939 118.465 234.977 118.554 cv
235.09 118.828 235.146 119.147 235.129 119.443 cv
235.118 119.604 234.938 119.783 234.791 119.901 cv
233.188 125.792 mo
233.076 125.664 232.871 125.529 232.881 125.411 cv
232.893 125.276 233.095 125.157 233.253 124.991 cv
233.424 125.136 233.554 125.246 233.685 125.356 cv
233.519 125.501 233.353 125.646 233.188 125.792 cv
232.197 109.368 mo
232.17 109.305 232.448 109 232.521 109.021 cv
232.72 109.082 232.884 109.257 233.062 109.387 cv
232.959 109.523 232.855 109.66 232.668 109.91 cv
232.467 109.693 232.278 109.554 232.197 109.368 cv
233.415 117.387 mo
233.469 117.475 233.523 117.562 233.578 117.649 cv
233.485 117.689 233.396 117.737 233.3 117.76 cv
233.283 117.765 233.205 117.647 233.219 117.623 cv
233.27 117.536 233.347 117.465 233.415 117.387 cv
232.19 151.271 mo
232.116 151.341 232.043 151.411 231.968 151.479 cv
231.729 151.25 231.489 151.022 231.25 150.794 cv
231.356 150.707 231.464 150.619 231.57 150.531 cv
231.777 150.778 231.983 151.024 232.19 151.271 cv
232.773 196.875 mo
232.86 196.924 232.933 197.002 233.01 197.068 cv
232.922 197.123 232.835 197.178 232.747 197.231 cv
232.708 197.14 232.66 197.051 232.637 196.955 cv
232.633 196.938 232.75 196.859 232.773 196.875 cv
234.248 160.174 mo
234.299 160.142 234.442 160.258 234.544 160.306 cv
234.469 160.436 234.393 160.565 234.32 160.691 cv
234.151 160.612 234.049 160.564 233.946 160.517 cv
234.045 160.397 234.125 160.252 234.248 160.174 cv
229.653 119.448 mo
230.386 118.869 230.86 118.493 231.337 118.118 cv
231.449 119.271 230.9 119.573 229.653 119.448 cv
230.607 144.216 mo
230.56 144.123 230.501 144.034 230.473 143.936 cv
230.464 143.906 230.567 143.809 230.578 143.814 cv
230.669 143.867 230.75 143.937 230.834 144 cv
230.759 144.073 230.683 144.144 230.607 144.216 cv
229.611 159.2 mo
229.52 159.192 229.438 159.063 229.353 158.986 cv
229.464 158.894 229.575 158.802 229.687 158.709 cv
229.746 158.806 229.804 158.902 229.862 159 cv
229.778 159.072 229.689 159.208 229.611 159.2 cv
229.049 135.333 mo
229.108 135.237 229.17 135.142 229.229 135.047 cv
229.34 135.141 229.45 135.233 229.561 135.328 cv
229.474 135.403 229.39 135.531 229.299 135.536 cv
229.22 135.541 229.133 135.406 229.049 135.333 cv
228.749 143.706 mo
227.671 142.277 227.671 142.277 228.749 141.283 cv
228.749 143.706 li
cp
227.376 135.052 mo
227.581 134.787 227.787 134.522 227.992 134.258 cv
228.185 134.451 228.377 134.644 228.569 134.836 cv
228.337 135.057 228.104 135.278 227.871 135.499 cv
227.706 135.35 227.541 135.201 227.376 135.052 cv
227.432 137.405 mo
227.284 137.32 227.064 137.267 227.011 137.142 cv
226.963 137.031 227.099 136.841 227.154 136.686 cv
227.295 136.793 227.435 136.902 227.559 136.998 cv
227.504 137.173 227.468 137.289 227.432 137.405 cv
226.773 207.945 mo
226.705 207.734 226.618 207.571 226.608 207.404 cv
226.604 207.318 226.772 207.139 226.8 207.149 cv
226.941 207.209 227.062 207.316 227.189 207.407 cv
227.119 207.499 227.05 207.59 226.773 207.945 cv
226.319 172.188 mo
226.316 172.033 226.313 171.879 226.31 171.724 cv
226.421 171.752 226.57 171.747 226.631 171.817 cv
226.686 171.884 226.643 172.03 226.643 172.144 cv
226.541 172.157 226.43 172.173 226.319 172.188 cv
225.564 127.583 mo
225.456 127.422 225.347 127.259 225.237 127.096 cv
225.671 126.739 226.103 126.381 226.535 126.023 cv
226.632 126.998 226.396 127.596 225.564 127.583 cv
226.003 129.52 mo
225.903 129.459 225.714 129.383 225.722 129.341 cv
225.746 129.201 225.842 129.073 225.909 128.94 cv
225.986 129.029 226.063 129.117 226.141 129.205 cv
226.095 129.31 226.049 129.415 226.003 129.52 cv
223.097 145.157 mo
222.953 145.092 222.802 145.039 222.677 144.949 cv
222.656 144.935 222.756 144.665 222.802 144.664 cv
222.95 144.663 223.101 144.731 223.261 144.776 cv
223.187 144.949 223.142 145.053 223.097 145.157 cv
222.733 233.338 mo
222.718 233.351 222.594 233.279 222.597 233.257 cv
222.61 233.15 222.65 233.048 222.682 232.942 cv
222.769 232.999 222.854 233.055 222.94 233.11 cv
222.874 233.188 222.812 233.272 222.733 233.338 cv
221.988 208.319 mo
222.003 208.183 222.207 207.972 222.335 207.966 cv
222.467 207.96 222.696 208.145 222.721 208.275 cv
222.741 208.392 222.54 208.55 222.264 208.919 cv
222.131 208.649 221.973 208.476 221.988 208.319 cv
221.437 130.539 mo
221.426 130.5 221.623 130.335 221.679 130.355 cv
221.821 130.407 221.938 130.53 222.157 130.691 cv
221.931 130.811 221.759 130.969 221.673 130.931 cv
221.555 130.88 221.48 130.686 221.437 130.539 cv
217.461 175.093 mo
217.162 175.152 216.857 175.184 216.556 175.184 cv
214.432 175.184 212.581 173.686 212.129 171.611 cv
212.073 170.874 211.683 165.621 211.216 163.007 cv
210.728 160.276 209.265 154.205 209.212 153.99 cv
208.97 152.793 209.111 151.813 209.632 151.076 cv
210.148 150.344 211.071 149.826 212.304 149.576 cv
212.611 149.514 212.921 149.482 213.225 149.482 cv
215.182 149.482 217.016 150.848 217.887 152.937 cv
217.901 152.975 219.387 156.791 220.099 161.141 cv
220.716 164.907 220.985 169.534 220.988 169.564 cv
221.175 173.842 219.063 174.768 217.461 175.093 cv
220.179 227.888 mo
220.103 227.897 220.008 227.774 219.921 227.712 cv
220.017 227.583 220.104 227.446 220.219 227.337 cv
220.231 227.323 220.383 227.451 220.714 227.69 cv
220.503 227.773 220.346 227.864 220.179 227.888 cv
209.392 201.529 mo
209.408 201.428 209.416 201.322 209.449 201.228 cv
209.457 201.207 209.6 201.197 209.612 201.222 cv
209.66 201.309 209.682 201.412 209.712 201.509 cv
209.604 201.517 209.498 201.522 209.392 201.529 cv
218.797 201.543 mo
218.744 201.511 218.692 201.479 218.642 201.446 cv
218.683 201.885 218.692 202.322 218.646 202.745 cv
218.641 202.785 218.094 206.833 216.604 210.993 cv
215.318 214.588 213.313 218.767 213.3 218.794 cv
212.164 221.071 210.784 222.18 209.084 222.18 cv
208.603 222.18 208.082 222.093 207.535 221.92 cv
206.38 221.554 205.436 220.76 204.877 219.684 cv
204.33 218.629 204.217 217.426 204.558 216.29 cv
204.868 215.618 207.07 210.834 207.93 208.32 cv
208.826 205.69 210.277 200.193 210.323 200.016 cv
210.944 198.055 212.34 196.883 214.057 196.883 cv
214.486 196.883 214.935 196.957 215.39 197.101 cv
216.896 197.576 217.819 198.667 218.293 199.925 cv
218.369 199.88 218.444 199.835 218.507 199.791 cv
218.67 200.115 218.896 200.427 218.973 200.771 cv
219.023 201.004 218.862 201.283 218.797 201.543 cv
216.679 241.627 mo
216.599 241.632 216.51 241.495 216.426 241.421 cv
216.485 241.323 216.547 241.228 216.607 241.131 cv
216.72 241.226 216.831 241.32 216.942 241.415 cv
216.854 241.491 216.771 241.622 216.679 241.627 cv
215.601 239.195 mo
215.53 239.1 215.383 238.971 215.405 238.914 cv
215.466 238.77 215.603 238.657 215.709 238.533 cv
215.778 238.63 215.849 238.727 215.962 238.883 cv
215.845 238.984 215.723 239.09 215.601 239.195 cv
214.477 218.519 mo
214.372 218.428 214.267 218.337 214.162 218.246 cv
214.252 218.167 214.341 218.089 214.431 218.01 cv
214.512 218.083 214.656 218.155 214.655 218.229 cv
214.655 218.325 214.542 218.422 214.477 218.519 cv
213.121 226.334 mo
213.01 226.238 212.898 226.145 212.787 226.051 cv
212.876 225.976 212.96 225.846 213.051 225.841 cv
213.131 225.836 213.218 225.972 213.302 226.046 cv
213.241 226.142 213.181 226.237 213.121 226.334 cv
208.277 255.42 mo
208.26 255.42 208.23 255.101 208.206 254.931 cv
208.563 254.893 208.921 254.854 209.277 254.815 cv
209.296 254.982 209.314 255.149 209.333 255.315 cv
208.981 255.357 208.631 255.407 208.277 255.42 cv
207.296 241.184 mo
207.188 240.985 207.021 240.818 207.052 240.7 cv
207.088 240.564 207.293 240.471 207.425 240.358 cv
207.549 240.527 207.673 240.695 207.797 240.864 cv
207.649 240.958 207.504 241.051 207.296 241.184 cv
205.192 251.214 mo
205.119 251.243 204.809 250.963 204.831 250.894 cv
204.895 250.689 205.07 250.521 205.203 250.338 cv
205.345 250.441 205.485 250.546 205.75 250.738 cv
205.525 250.942 205.383 251.138 205.192 251.214 cv
204.131 207.403 mo
204.126 207.318 204.293 207.141 204.319 207.151 cv
204.46 207.211 204.58 207.317 204.707 207.407 cv
204.638 207.498 204.567 207.588 204.296 207.939 cv
204.226 207.73 204.141 207.569 204.131 207.403 cv
203.938 146.017 mo
203.782 145.983 203.643 145.878 203.497 145.802 cv
203.569 145.714 203.645 145.551 203.715 145.554 cv
203.871 145.559 204.023 145.646 204.206 145.708 cv
204.082 145.856 203.99 146.028 203.938 146.017 cv
203.207 162.398 mo
203.084 162.283 202.848 162.151 202.861 162.057 cv
202.894 161.846 203.051 161.653 203.216 161.342 cv
203.421 161.595 203.638 161.766 203.608 161.847 cv
203.533 162.052 203.348 162.218 203.207 162.398 cv
203.314 210.079 mo
203.223 209.965 203.132 209.85 203.041 209.735 cv
203.139 209.679 203.235 209.622 203.334 209.563 cv
203.405 209.649 203.538 209.741 203.53 209.819 cv
203.521 209.912 203.392 209.992 203.314 210.079 cv
202.964 216.806 mo
202.764 216.812 202.563 216.816 202.364 216.822 cv
202.063 215.934 201.762 215.046 201.449 214.128 cv
201.759 213.404 202.384 213.072 202.997 213.511 cv
203.355 213.767 203.522 214.511 203.503 215.024 cv
203.479 215.625 203.156 216.213 202.964 216.806 cv
202.211 254.566 mo
201.641 255.104 201.102 255.059 200.488 254.292 cv
201.171 253.734 201.688 253.347 202.271 254.047 cv
202.352 254.143 202.312 254.471 202.211 254.566 cv
199.787 150.224 mo
199.848 150.023 200.025 149.86 200.156 149.682 cv
200.294 149.786 200.431 149.89 200.684 150.081 cv
200.463 150.283 200.322 150.473 200.137 150.55 cv
200.069 150.578 199.765 150.297 199.787 150.224 cv
199.687 154.177 mo
199.609 154.089 199.533 154 199.458 153.912 cv
199.593 153.841 199.728 153.769 199.862 153.697 cv
199.901 153.807 199.991 153.931 199.966 154.021 cv
199.945 154.094 199.784 154.127 199.687 154.177 cv
199.738 258.709 mo
199.589 258.635 199.458 258.522 199.32 258.424 cv
199.391 258.326 199.462 258.23 199.737 257.856 cv
199.82 258.087 199.915 258.259 199.932 258.438 cv
199.939 258.525 199.759 258.718 199.738 258.709 cv
198.865 260.128 mo
198.996 260.639 199.125 261.15 199.284 261.783 cv
197.932 261.305 197.932 261.305 198.865 260.128 cv
198.444 264.555 mo
198.346 264.502 198.248 264.448 198.148 264.396 cv
198.283 264.146 198.418 263.898 198.553 263.649 cv
198.649 263.703 198.748 263.756 198.845 263.808 cv
198.712 264.057 198.578 264.306 198.444 264.555 cv
198.562 173.603 mo
198.419 173.469 198.333 173.389 198.247 173.309 cv
198.361 173.186 198.477 173.063 198.591 172.939 cv
198.677 173.02 198.848 173.13 198.833 173.176 cv
198.78 173.326 198.662 173.455 198.562 173.603 cv
198.957 204.309 mo
199.028 204.461 199.126 204.595 199.146 204.74 cv
199.153 204.794 198.979 204.872 198.886 204.938 cv
198.797 204.81 198.694 204.686 198.633 204.545 cv
198.623 204.522 198.804 204.419 198.957 204.309 cv
198.657 136.537 mo
199.438 137.262 199.63 137.899 199.155 138.696 cv
197.806 137.972 197.789 137.909 198.657 136.537 cv
197.626 215.585 mo
197.532 215.56 197.469 215.425 197.392 215.338 cv
197.522 215.265 197.654 215.191 197.785 215.118 cv
197.828 215.227 197.869 215.334 197.91 215.441 cv
197.814 215.495 197.703 215.604 197.626 215.585 cv
196.428 245.991 mo
196.403 246.024 194.015 249.352 190.76 252.322 cv
187.939 254.895 184.209 257.646 184.184 257.666 cv
182.851 258.618 181.626 259.103 180.542 259.103 cv
179.491 259.103 178.539 258.651 177.629 257.726 cv
176.778 256.86 176.315 255.717 176.326 254.505 cv
176.338 253.315 176.802 252.2 177.635 251.357 cv
178.224 250.909 182.412 247.715 184.348 245.896 cv
186.377 243.987 190.238 239.723 190.355 239.591 cv
191.265 238.697 192.346 238.204 193.4 238.204 cv
194.409 238.204 195.377 238.646 196.194 239.479 cv
198.1 241.417 197.677 244.156 196.428 245.991 cv
186.664 264.488 mo
186.573 264.358 186.472 264.234 186.409 264.093 cv
186.4 264.07 186.581 263.967 186.734 263.857 cv
186.807 264.01 186.904 264.145 186.925 264.29 cv
186.932 264.344 186.756 264.422 186.664 264.488 cv
179.983 259.559 mo
180.196 260.36 180.316 260.813 180.454 261.326 cv
179.04 261.125 179.04 261.125 179.983 259.559 cv
179.547 279.03 mo
179.228 278.628 178.994 278.429 178.912 278.18 cv
178.878 278.081 179.204 277.723 179.321 277.743 cv
179.523 277.778 179.781 277.987 179.843 278.18 cv
179.896 278.348 179.713 278.592 179.547 279.03 cv
177.813 266.142 mo
177.678 266.061 177.544 265.979 177.408 265.898 cv
177.468 265.802 177.532 265.62 177.585 265.624 cv
177.729 265.634 177.869 265.721 178.025 265.783 cv
177.929 265.946 177.871 266.044 177.813 266.142 cv
177.35 249.099 mo
177.433 249.317 177.53 249.487 177.55 249.666 cv
177.559 249.753 177.374 249.945 177.354 249.937 cv
177.204 249.86 177.071 249.747 176.935 249.645 cv
177.007 249.55 177.08 249.454 177.35 249.099 cv
179.034 231.458 mo
179.22 231.579 179.558 231.697 179.56 231.82 cv
179.563 232.088 179.395 232.356 179.199 232.891 cv
178.932 232.463 178.719 232.274 178.724 232.093 cv
178.729 231.879 178.923 231.669 179.034 231.458 cv
179.997 236.221 mo
180.856 237.018 180.89 237.482 179.997 238.177 cv
179.997 236.221 li
cp
181.59 243.618 mo
181.68 243.742 181.729 243.896 181.794 244.04 cv
181.687 244.082 181.581 244.124 181.403 244.193 cv
181.362 244.034 181.297 243.886 181.302 243.737 cv
181.304 243.691 181.573 243.597 181.59 243.618 cv
184.525 240.213 mo
184.609 240.209 184.698 240.328 184.785 240.392 cv
184.666 240.5 184.545 240.607 184.413 240.726 cv
184.324 240.571 184.206 240.437 184.232 240.396 cv
184.291 240.305 184.421 240.219 184.525 240.213 cv
185.211 242.067 mo
185.34 242.166 185.468 242.265 185.591 242.358 cv
185.487 242.527 185.425 242.632 185.36 242.735 cv
185.248 242.616 185.101 242.514 185.038 242.374 cv
185.01 242.31 185.147 242.172 185.211 242.067 cv
192.096 218.188 mo
192.104 218.169 192.243 218.159 192.257 218.183 cv
192.304 218.269 192.323 218.37 192.353 218.466 cv
192.248 218.473 192.144 218.479 192.039 218.485 cv
192.056 218.386 192.063 218.282 192.096 218.188 cv
198.558 129.466 mo
199.301 129.772 199.845 129.997 200.39 130.222 cv
200.438 130.417 200.488 130.614 200.538 130.81 cv
200.125 131.091 199.604 131.688 199.318 131.592 cv
198.529 131.325 198.529 130.531 198.558 129.466 cv
200.521 124.549 mo
200.563 124.771 200.605 124.993 200.646 125.215 cv
200.289 125.231 199.93 125.258 199.571 125.25 cv
199.538 125.249 199.468 124.941 199.48 124.936 cv
199.822 124.793 200.173 124.673 200.521 124.549 cv
201.523 251.462 mo
201.268 251.553 201.105 251.64 200.937 251.657 cv
200.85 251.668 200.749 251.557 200.653 251.501 cv
200.749 251.372 200.831 251.229 200.947 251.126 cv
200.974 251.104 201.127 251.227 201.523 251.462 cv
201.183 230.553 mo
201.352 230.584 201.521 230.613 201.691 230.644 cv
201.606 231.034 201.521 231.426 201.39 232.031 cv
200.571 231.334 200.778 230.938 201.183 230.553 cv
201.265 202.563 mo
201.36 202.624 201.456 202.684 201.552 202.745 cv
201.458 202.855 201.363 202.967 201.27 203.078 cv
201.193 202.989 201.064 202.905 201.06 202.813 cv
201.055 202.734 201.19 202.646 201.265 202.563 cv
201.546 137.115 mo
201.711 137.271 201.876 137.427 202.138 137.675 cv
201.857 137.802 201.676 137.954 201.586 137.911 cv
201.441 137.843 201.294 137.653 201.275 137.499 cv
201.262 137.383 201.448 137.244 201.546 137.115 cv
203.621 140.93 mo
203.768 140.994 203.878 141.139 204.085 141.325 cv
203.832 141.437 203.642 141.592 203.54 141.547 cv
203.426 141.497 203.361 141.269 203.339 141.11 cv
203.332 141.06 203.561 140.903 203.621 140.93 cv
205.809 174.573 mo
205.862 174.66 205.917 174.747 205.97 174.835 cv
205.879 174.874 205.791 174.921 205.695 174.943 cv
205.679 174.947 205.602 174.832 205.615 174.808 cv
205.665 174.721 205.741 174.65 205.809 174.573 cv
209.553 119.292 mo
209.63 119.281 209.725 119.405 209.812 119.469 cv
209.716 119.597 209.627 119.732 209.514 119.844 cv
209.501 119.856 209.349 119.728 209.019 119.489 cv
209.229 119.406 209.386 119.313 209.553 119.292 cv
209.565 113.329 mo
209.737 113.351 209.9 113.452 210.316 113.622 cv
209.74 113.841 209.543 113.987 209.442 113.936 cv
209.331 113.88 209.281 113.648 209.264 113.488 cv
209.259 113.443 209.468 113.315 209.565 113.329 cv
210.424 121.768 mo
210.52 121.787 210.609 121.832 210.703 121.868 cv
210.65 121.958 210.599 122.045 210.547 122.135 cv
210.476 122.059 210.396 121.989 210.342 121.904 cv
210.328 121.882 210.403 121.764 210.424 121.768 cv
212.064 126.209 mo
212.24 126.751 212.039 127.461 211.857 128.059 cv
211.751 128.414 211.379 128.688 211.028 129.119 cv
210.647 128.206 210.346 127.524 210.08 126.83 cv
209.854 126.237 210.122 125.681 210.665 125.635 cv
211.137 125.596 211.959 125.884 212.064 126.209 cv
213.677 111.472 mo
213.74 111.551 213.805 111.63 213.869 111.709 cv
213.78 111.762 213.695 111.82 213.602 111.857 cv
213.589 111.863 213.498 111.755 213.509 111.729 cv
213.549 111.636 213.617 111.556 213.677 111.472 cv
216.849 135.956 mo
215.838 136.683 215.479 136.425 215.08 135.329 cv
215.783 135.579 216.184 135.72 216.849 135.956 cv
218.511 111.42 mo
218.781 112.326 218.932 112.826 219.11 113.425 cv
217.56 113.133 217.54 113.083 218.511 111.42 cv
219.799 157.604 mo
219.895 157.666 219.989 157.726 220.085 157.785 cv
219.99 157.896 219.897 158.006 219.805 158.115 cv
219.729 158.029 219.601 157.945 219.596 157.854 cv
219.591 157.775 219.726 157.688 219.799 157.604 cv
220.681 115.851 mo
220.775 115.87 220.865 115.914 220.957 115.951 cv
220.905 116.039 220.854 116.126 220.803 116.215 cv
220.733 116.14 220.654 116.071 220.601 115.986 cv
220.587 115.964 220.662 115.847 220.681 115.851 cv
225.909 119.287 mo
225.965 119.251 226.396 119.589 226.376 119.701 cv
226.328 119.955 226.104 120.174 225.858 120.549 cv
225.608 120.236 225.321 120.006 225.361 119.901 cv
225.455 119.655 225.681 119.432 225.909 119.287 cv
174.831 264.098 mo
174.741 264.107 174.639 263.991 174.542 263.931 cv
174.638 263.819 174.733 263.709 174.831 263.599 cv
174.906 263.687 174.983 263.774 175.061 263.863 cv
174.984 263.946 174.915 264.09 174.831 264.098 cv
174.979 274.284 mo
174.878 274.299 174.768 274.313 174.656 274.329 cv
174.653 274.174 174.65 274.019 174.647 273.863 cv
174.759 273.893 174.908 273.888 174.969 273.959 cv
175.022 274.024 174.979 274.172 174.979 274.284 cv
173.163 238.026 mo
173.108 238.033 173.029 237.858 172.962 237.767 cv
173.093 237.679 173.216 237.574 173.358 237.518 cv
173.387 237.507 173.488 237.686 173.601 237.837 cv
173.446 237.909 173.31 238.007 173.163 238.026 cv
166.087 285.295 mo
166.354 284.616 166.501 284.249 166.643 283.889 cv
166.887 283.965 167.064 283.966 167.109 284.043 cv
167.516 284.742 167.26 285.096 166.087 285.295 cv
165.711 266.54 mo
165.694 266.56 165.428 266.455 165.429 266.408 cv
165.43 266.26 165.501 266.11 165.549 265.95 cv
165.721 266.029 165.824 266.076 165.928 266.124 cv
165.859 266.266 165.804 266.417 165.711 266.54 cv
163.361 266.493 mo
163.311 266.521 163 266.232 163.021 266.181 cv
163.11 265.977 163.266 265.787 163.439 265.644 cv
163.474 265.615 163.697 265.817 163.943 265.99 cv
163.707 266.208 163.556 266.393 163.361 266.493 cv
163.169 270.809 mo
163.122 270.717 163.062 270.627 163.033 270.528 cv
163.024 270.499 163.13 270.4 163.14 270.407 cv
163.23 270.46 163.313 270.529 163.396 270.595 cv
163.32 270.667 163.244 270.737 163.169 270.809 cv
162.211 278.815 mo
162.088 278.696 161.862 278.575 161.865 278.459 cv
161.869 278.254 162.014 278.051 162.135 277.762 cv
162.369 277.945 162.625 278.098 162.607 278.14 cv
162.512 278.38 162.35 278.594 162.211 278.815 cv
160.999 253.24 mo
160.947 253.153 160.89 253.068 160.852 252.977 cv
160.847 252.964 160.954 252.873 160.979 252.885 cv
161.071 252.924 161.151 252.991 161.235 253.051 cv
161.156 253.114 161.078 253.178 160.999 253.24 cv
160.885 273.629 mo
160.742 273.561 160.59 273.507 160.468 273.413 cv
160.445 273.396 160.55 273.128 160.595 273.127 cv
160.743 273.127 160.892 273.196 161.051 273.242 cv
160.975 273.419 160.93 273.523 160.885 273.629 cv
155.946 255.106 mo
155.884 255.104 155.743 254.76 155.799 254.666 cv
155.874 254.538 156.109 254.428 156.263 254.444 cv
156.388 254.458 156.49 254.668 156.73 254.929 cv
156.372 255.021 156.156 255.115 155.946 255.106 cv
166.076 255.165 mo
166.187 255.389 166.355 255.579 166.313 255.69 cv
166.266 255.819 166.016 255.968 165.885 255.943 cv
165.765 255.922 165.591 255.659 165.615 255.539 cv
165.642 255.408 165.872 255.32 166.076 255.165 cv
150.9 262.673 mo
150.756 262.623 150.625 262.531 150.488 262.453 cv
150.547 262.355 150.61 262.173 150.662 262.176 cv
150.809 262.186 150.95 262.271 151.106 262.332 cv
151.011 262.492 150.922 262.681 150.9 262.673 cv
196.844 117.557 mo
196.813 117.564 196.718 117.463 196.724 117.453 cv
196.775 117.364 196.844 117.284 196.907 117.201 cv
196.979 117.274 197.05 117.349 197.119 117.424 cv
197.027 117.471 196.939 117.529 196.844 117.557 cv
196.176 146.865 mo
195.96 146.872 195.737 146.711 195.419 146.586 cv
195.866 145.807 196.281 145.753 197.11 146.469 cv
196.617 146.688 196.399 146.856 196.176 146.865 cv
195.633 149.558 mo
195.578 149.402 195.497 149.259 195.489 149.112 cv
195.487 149.062 195.747 148.943 195.761 148.958 cv
195.859 149.078 195.925 149.224 196.002 149.361 cv
195.9 149.415 195.801 149.468 195.633 149.558 cv
195.429 140.314 mo
195.524 140.32 195.619 140.354 195.715 140.378 cv
195.672 140.475 195.63 140.57 195.587 140.666 cv
195.508 140.598 195.422 140.537 195.356 140.457 cv
195.342 140.438 195.405 140.313 195.429 140.314 cv
193.938 151.029 mo
193.884 151.055 193.574 150.701 193.588 150.684 cv
193.771 150.452 193.979 150.231 194.216 150.058 cv
194.251 150.033 194.474 150.263 194.732 150.477 cv
194.415 150.709 194.194 150.908 193.938 151.029 cv
193.089 146.079 mo
193.083 145.995 193.256 145.814 193.281 145.826 cv
193.422 145.889 193.541 145.998 193.667 146.09 cv
193.597 146.18 193.525 146.269 193.262 146.601 cv
193.19 146.402 193.101 146.243 193.089 146.079 cv
193.607 138.729 mo
193.777 138.852 193.948 138.974 194.118 139.097 cv
194.004 139.61 193.89 140.124 193.774 140.638 cv
193.642 140.679 193.508 140.719 193.375 140.76 cv
193.123 140.39 192.643 139.992 192.684 139.656 cv
192.725 139.315 193.277 139.036 193.607 138.729 cv
192.512 106.781 mo
192.705 106.589 193.272 106.564 193.552 106.709 cv
194.281 107.088 194.944 107.599 195.861 108.207 cv
193.738 109.183 192.893 109.054 192.412 107.828 cv
192.292 107.521 192.314 106.976 192.512 106.781 cv
191.961 117.396 mo
191.913 117.305 191.854 117.216 191.825 117.118 cv
191.816 117.088 191.921 116.991 191.931 116.997 cv
192.021 117.05 192.103 117.119 192.186 117.183 cv
192.11 117.255 192.035 117.326 191.961 117.396 cv
190.945 147.144 mo
190.906 147.054 190.86 146.965 190.838 146.871 cv
190.834 146.854 190.948 146.778 190.973 146.792 cv
191.059 146.841 191.13 146.917 191.206 146.983 cv
191.119 147.037 191.032 147.091 190.945 147.144 cv
187.837 128.839 mo
187.7 128.487 187.563 128.135 187.427 127.783 cv
187.55 127.736 187.673 127.688 187.795 127.641 cv
187.929 127.995 188.062 128.348 188.195 128.701 cv
188.075 128.747 187.957 128.792 187.837 128.839 cv
185.238 123.708 mo
185.198 123.611 185.158 123.514 185.118 123.417 cv
185.215 123.396 185.31 123.363 185.406 123.358 cv
185.429 123.357 185.488 123.483 185.474 123.502 cv
185.407 123.581 185.319 123.642 185.238 123.708 cv
246.731 141.371 mo
246.828 141.489 246.895 141.633 246.971 141.769 cv
246.873 141.823 246.774 141.877 246.611 141.968 cv
246.555 141.813 246.473 141.67 246.465 141.524 cv
246.462 141.475 246.719 141.354 246.731 141.371 cv
247.706 138.411 mo
241.35 119.428 li
241.326 120.107 241.106 120.369 240.215 120.159 cv
240.567 119.788 240.823 119.52 241.235 119.088 cv
238.352 110.474 li
237.087 106.036 235.121 104.11 231.794 103.916 cv
228.467 103.721 211.658 102.194 200.203 102.194 cv
192.676 102.194 186.26 105.461 182.744 110.99 cv
183.758 111.208 183.985 111.932 184.279 112.877 cv
183.409 112.602 182.932 112.164 182.469 111.449 cv
180.809 114.245 179.864 117.583 179.864 121.349 cv
179.86 121.62 179.884 121.896 179.896 122.17 cv
179.94 122.151 179.98 122.137 179.985 122.143 cv
180.084 122.261 180.148 122.406 180.225 122.542 cv
180.139 122.588 180.045 122.638 179.916 122.706 cv
180.521 130.298 186.843 139.134 189.059 143.97 cv
190.979 147.795 192.798 151.875 194.241 156.73 cv
194.279 156.742 194.318 156.75 194.356 156.762 cv
194.333 156.799 194.309 156.834 194.285 156.871 cv
195.221 160.043 195.987 163.563 196.527 167.544 cv
196.532 167.545 196.537 167.547 196.542 167.548 cv
196.538 167.558 196.535 167.563 196.531 167.572 cv
197.063 171.506 197.374 175.887 197.374 180.892 cv
197.374 193.689 194.153 205.982 188.128 216.872 cv
188.217 216.939 188.314 217.019 188.441 217.105 cv
188.112 217.335 187.935 217.459 187.756 217.582 cv
187.751 217.573 187.744 217.564 187.738 217.557 cv
184.459 223.336 180.397 228.718 175.57 233.542 cv
168.75 240.359 160.713 245.417 152.223 249.372 cv
143.67 253.354 138.194 265.982 145.363 277.075 cv
149.552 283.556 160.262 289.34 174.965 282.866 cv
185.386 277.556 194.873 270.693 203.271 262.417 cv
203.347 262.187 203.477 261.962 203.568 261.733 cv
203.652 261.784 203.736 261.837 203.821 261.888 cv
203.836 261.874 203.85 261.86 203.863 261.847 cv
213.772 251.942 221.674 240.484 227.381 227.762 cv
227.324 227.813 227.268 227.864 227.211 227.917 cv
226.933 227.583 226.653 227.248 226.184 226.684 cv
227.139 226.607 227.436 226.905 227.558 227.357 cv
227.836 226.73 228.113 226.104 228.382 225.472 cv
234.362 211.328 237.395 196.329 237.395 180.892 cv
237.395 168.295 235.04 156.953 232.086 146.451 cv
231.669 144.718 232.414 144.086 234.479 144.128 cv
236.546 144.169 237.405 144.599 241.146 144.97 cv
244.888 145.341 248.834 141.943 247.706 138.411 cv
f
150.918 296.368 mo
150.322 296.993 149.679 296.854 148.942 296.378 cv
149.407 295.52 149.978 295.213 150.75 295.571 cv
150.907 295.645 151.031 296.249 150.918 296.368 cv
129.6 285.847 mo
129.373 284.96 129.599 284.414 130.691 284.08 cv
130.51 285.335 130.51 285.335 129.6 285.847 cv
129.131 205.734 mo
129.024 205.692 128.92 205.65 128.813 205.607 cv
128.889 205.479 128.964 205.349 129.037 205.22 cv
129.123 205.296 129.257 205.362 129.278 205.454 cv
129.298 205.531 129.186 205.641 129.131 205.734 cv
127.24 210.847 mo
127.527 209.449 128.302 209.926 128.896 209.95 cv
128.939 210.106 128.981 210.262 129.023 210.417 cv
128.499 210.543 127.977 210.669 127.24 210.847 cv
127.765 253.393 mo
127.645 253.297 127.524 253.203 127.404 253.108 cv
127.601 252.833 127.797 252.559 127.992 252.282 cv
128.08 252.335 128.168 252.389 128.257 252.441 cv
128.093 252.759 127.929 253.075 127.765 253.393 cv
127.845 275.193 mo
127.729 275.211 127.58 275.008 127.405 274.869 cv
127.562 274.678 127.675 274.539 127.786 274.401 cv
127.936 274.549 128.084 274.695 128.233 274.843 cv
128.104 274.968 127.988 275.171 127.845 275.193 cv
127.157 192.706 mo
127.067 192.729 126.947 192.637 126.841 192.595 cv
127.063 192.202 li
127.149 192.28 127.236 192.357 127.323 192.436 cv
127.27 192.531 127.231 192.688 127.157 192.706 cv
126.057 248.08 mo
125.911 248.03 125.779 247.939 125.645 247.861 cv
125.702 247.765 125.766 247.582 125.817 247.585 cv
125.964 247.595 126.104 247.68 126.263 247.74 cv
126.167 247.901 126.078 248.088 126.057 248.08 cv
125.027 169.294 mo
124.958 169.085 124.873 168.924 124.863 168.758 cv
124.859 168.672 125.025 168.494 125.054 168.505 cv
125.193 168.564 125.313 168.67 125.44 168.761 cv
125.37 168.851 125.302 168.94 125.027 169.294 cv
124.369 269.895 mo
124.509 269.39 124.646 268.886 124.826 268.23 cv
125.41 269.191 125.41 269.191 124.369 269.895 cv
124.505 211.016 mo
124.621 210.915 124.777 210.862 124.92 210.791 cv
124.952 210.895 124.986 210.997 125.038 211.159 cv
124.891 211.21 124.742 211.262 124.595 211.313 cv
124.562 211.209 124.474 211.042 124.505 211.016 cv
128.333 170.78 mo
128.584 171.057 128.836 171.332 129.086 171.608 cv
129.023 171.699 128.962 171.791 128.899 171.883 cv
128.655 171.78 128.358 171.731 128.186 171.558 cv
128.059 171.431 128.096 171.141 128.059 170.922 cv
128.15 170.875 128.242 170.827 128.333 170.78 cv
128.438 167.479 mo
128.528 167.531 128.608 167.6 128.691 167.663 cv
128.617 167.734 128.542 167.806 128.468 167.875 cv
128.421 167.784 128.361 167.696 128.333 167.599 cv
128.325 167.569 128.429 167.474 128.438 167.479 cv
123.126 241.89 mo
123.001 241.64 122.836 241.455 122.875 241.35 cv
122.92 241.233 123.147 241.159 123.307 241.129 cv
123.358 241.12 123.526 241.341 123.502 241.402 cv
123.443 241.553 123.305 241.671 123.126 241.89 cv
123.097 196.314 mo
123.118 196.314 123.18 196.441 123.163 196.459 cv
123.097 196.538 123.008 196.6 122.927 196.666 cv
122.886 196.568 122.846 196.472 122.806 196.373 cv
122.902 196.352 122.998 196.318 123.097 196.314 cv
119.653 223.181 mo
119.542 223.086 119.432 222.991 119.319 222.897 cv
119.407 222.821 119.492 222.691 119.584 222.687 cv
119.663 222.683 119.751 222.818 119.837 222.893 cv
119.775 222.988 119.715 223.084 119.653 223.181 cv
119.147 241.124 mo
119.023 240.886 118.951 240.743 118.879 240.603 cv
119.018 240.536 119.152 240.438 119.297 240.42 cv
119.352 240.413 119.504 240.615 119.482 240.679 cv
119.436 240.815 119.306 240.925 119.147 241.124 cv
108.967 304.001 mo
108.89 304.012 108.795 303.889 108.708 303.825 cv
108.804 303.697 108.892 303.562 109.005 303.45 cv
109.019 303.438 109.17 303.566 109.499 303.806 cv
109.289 303.888 109.133 303.979 108.967 304.001 cv
104.921 296.493 mo
104.889 296.502 104.74 296.268 104.754 296.254 cv
104.865 296.144 105.004 296.058 105.133 295.964 cv
105.192 296.053 105.254 296.141 105.347 296.276 cv
105.202 296.355 105.068 296.449 104.921 296.493 cv
94.4492 297.438 mo
94.3047 297.304 94.2178 297.223 94.1318 297.142 cv
94.2461 297.019 94.3623 296.895 94.4785 296.771 cv
94.5645 296.852 94.7373 296.961 94.7227 297.009 cv
94.6709 297.16 94.5508 297.289 94.4492 297.438 cv
87.7627 298.546 mo
87.6162 298.459 87.4609 298.384 87.3369 298.271 cv
87.3174 298.254 87.457 297.982 87.4971 297.988 cv
87.6592 298.015 87.8105 298.104 87.9736 298.174 cv
87.8799 298.341 87.8203 298.443 87.7627 298.546 cv
86.0166 298.113 mo
85.9023 298.063 85.8398 297.836 85.8164 297.678 cv
85.8096 297.626 86.0371 297.471 86.0977 297.496 cv
86.2432 297.562 86.3535 297.706 86.5596 297.892 cv
86.3076 298.003 86.1172 298.158 86.0166 298.113 cv
116.688 169.85 mo
116.618 169.774 116.539 169.704 116.485 169.619 cv
116.472 169.598 116.548 169.48 116.566 169.484 cv
116.661 169.503 116.751 169.547 116.844 169.584 cv
116.792 169.674 116.74 169.762 116.688 169.85 cv
115.281 194.37 mo
115.083 194.337 114.906 194.182 114.721 194.074 cv
114.844 193.946 114.947 193.748 115.095 193.71 cv
115.226 193.677 115.402 193.818 115.631 193.911 cv
115.48 194.117 115.357 194.384 115.281 194.37 cv
114.144 246.38 mo
114.071 246.245 114 246.11 113.93 245.975 cv
114.038 245.935 114.162 245.846 114.252 245.87 cv
114.325 245.892 114.358 246.053 114.409 246.151 cv
114.32 246.228 114.231 246.305 114.144 246.38 cv
113.021 202.705 mo
112.895 202.685 112.799 202.487 112.641 202.315 cv
112.846 202.194 113.058 202.008 113.113 202.046 cv
113.27 202.155 113.36 202.356 113.478 202.521 cv
113.323 202.589 113.158 202.729 113.021 202.705 cv
110.84 150.485 mo
110.678 150.372 110.619 149.792 110.756 149.628 cv
111.41 148.841 111.964 149.266 112.55 149.852 cv
112.144 150.712 111.604 151.026 110.84 150.485 cv
111.559 172.678 mo
111.322 172.568 111.158 172.301 110.966 172.098 cv
111.129 171.943 111.328 171.638 111.447 171.666 cv
111.695 171.727 111.9 171.963 112.264 172.231 cv
111.917 172.46 111.665 172.728 111.559 172.678 cv
110.422 154.715 mo
110.221 155.379 109.334 155.76 108.638 155.416 cv
107.817 155.012 107.101 154.457 107.021 152.921 cv
108.031 152.993 108.871 152.929 109.635 153.145 cv
110.301 153.333 110.648 153.967 110.422 154.715 cv
110.047 203.791 mo
109.975 203.591 109.885 203.431 109.872 203.265 cv
109.866 203.181 110.04 202.998 110.066 203.011 cv
110.207 203.072 110.327 203.183 110.454 203.275 cv
110.384 203.365 110.313 203.455 110.047 203.791 cv
108.918 227.873 mo
108.829 227.881 108.636 227.698 108.646 227.679 cv
108.72 227.526 108.832 227.394 108.934 227.254 cv
109.03 227.326 109.127 227.398 109.507 227.68 cv
109.274 227.762 109.1 227.856 108.918 227.873 cv
107.593 233.801 mo
107.286 232.984 107.621 232.693 108.327 232.453 cv
108.546 233.233 108.309 233.582 107.593 233.801 cv
107.416 175.693 mo
108.942 175.693 li
108.301 176.53 108.301 176.53 107.416 175.693 cv
104.14 196.425 mo
103.66 196.124 103.541 195.581 104.135 194.991 cv
105.662 195.838 107.221 196.702 108.777 197.566 cv
107.036 198.041 105.552 197.31 104.14 196.425 cv
105.149 200.589 mo
105.137 200.596 105.047 200.488 105.058 200.461 cv
105.098 200.37 105.165 200.291 105.224 200.207 cv
105.287 200.286 105.351 200.364 105.414 200.443 cv
105.326 200.495 105.242 200.553 105.149 200.589 cv
103.347 223.108 mo
103.275 222.909 103.185 222.75 103.173 222.586 cv
103.166 222.502 103.34 222.322 103.365 222.333 cv
103.506 222.396 103.624 222.505 103.751 222.599 cv
103.681 222.688 103.609 222.776 103.347 223.108 cv
100.272 180.415 mo
100.15 180.305 100.029 180.194 99.8633 180.043 cv
100.05 179.868 100.179 179.747 100.309 179.626 cv
100.412 179.751 100.614 179.894 100.598 179.999 cv
100.573 180.151 100.389 180.277 100.272 180.415 cv
98.0654 216.003 mo
98.918 215.261 99.291 215.48 99.9951 216.308 cv
99.1816 216.18 98.7832 216.116 98.0654 216.003 cv
93.6484 173.604 mo
93.4746 173.66 93.1768 173.343 92.9355 173.193 cv
93.1631 172.92 93.3457 172.56 93.6367 172.408 cv
93.7988 172.324 94.1416 172.591 94.6113 172.784 cv
94.1807 173.172 93.9512 173.503 93.6484 173.604 cv
92.2363 182.471 mo
92.166 182.396 92.0879 182.325 92.0332 182.24 cv
92.0195 182.219 92.0947 182.102 92.1133 182.104 cv
92.209 182.124 92.2998 182.168 92.3916 182.205 cv
92.3398 182.294 92.2881 182.383 92.2363 182.471 cv
89.6934 187.582 mo
89.6025 187.606 89.4814 187.513 89.373 187.469 cv
89.4473 187.336 89.5225 187.203 89.5977 187.071 cv
89.6855 187.149 89.7734 187.229 89.8613 187.308 cv
89.8066 187.405 89.7676 187.563 89.6934 187.582 cv
85.9932 213.677 mo
85.9629 213.687 85.8145 213.452 85.8281 213.438 cv
85.9395 213.327 86.0762 213.242 86.2051 213.149 cv
86.2656 213.237 86.3252 213.325 86.418 213.461 cv
86.2744 213.539 86.1416 213.633 85.9932 213.677 cv
83.4951 204.23 mo
83.1113 203.444 83.2393 202.962 83.9785 202.499 cv
84.3711 203.281 84.2275 203.76 83.4951 204.23 cv
89.5986 166.566 mo
89.6855 166.645 89.7725 166.723 89.8594 166.801 cv
89.8057 166.897 89.7676 167.055 89.6934 167.072 cv
89.6025 167.096 89.4834 167.002 89.376 166.96 cv
89.4502 166.829 89.5244 166.698 89.5986 166.566 cv
94.0908 156.928 mo
94.123 157.067 94.1563 157.209 94.1895 157.35 cv
93.8994 157.442 93.6104 157.535 93.3203 157.628 cv
93.2793 157.524 93.2383 157.42 93.1963 157.314 cv
93.4941 157.186 93.792 157.057 94.0908 156.928 cv
105.564 148.548 mo
105.654 148.601 105.734 148.668 105.816 148.732 cv
105.742 148.803 105.668 148.875 105.595 148.944 cv
105.548 148.854 105.488 148.765 105.462 148.668 cv
105.452 148.638 105.556 148.542 105.564 148.548 cv
81.4316 209.063 mo
81.3438 209.013 81.2559 208.96 81.167 208.909 cv
81.2422 208.839 81.3115 208.761 81.3965 208.706 cv
81.418 208.692 81.5352 208.769 81.5313 208.787 cv
81.5127 208.883 81.4688 208.972 81.4316 209.063 cv
79.4697 151.361 mo
79.3564 151.263 79.2432 151.167 79.1309 151.069 cv
79.2246 150.987 79.3174 150.905 79.4111 150.823 cv
79.4971 150.9 79.6504 150.976 79.6533 151.055 cv
79.6563 151.154 79.5361 151.258 79.4697 151.361 cv
77.999 172.254 mo
77.8535 172.164 77.6982 172.084 77.5732 171.972 cv
77.5557 171.955 77.6982 171.685 77.7402 171.691 cv
77.9014 171.718 78.0527 171.81 78.2158 171.88 cv
78.1182 172.047 78.0586 172.15 77.999 172.254 cv
76.3447 166.443 mo
76.0127 165.444 76.5225 165.188 77.2285 165.11 cv
77.3154 164.843 77.4023 164.574 77.4893 164.307 cv
77.5889 164.364 77.6865 164.42 77.7852 164.478 cv
77.6006 164.689 77.415 164.901 77.2305 165.112 cv
76.9355 165.557 76.6396 165.999 76.3447 166.443 cv
76.0205 197.823 mo
75.8916 197.747 75.7637 197.671 75.6348 197.596 cv
75.7139 197.511 75.7793 197.378 75.873 197.355 cv
75.9492 197.337 76.0576 197.45 76.1514 197.505 cv
76.1074 197.611 76.0645 197.718 76.0205 197.823 cv
74.541 195.274 mo
74.3691 195.161 74.2607 194.951 74.126 194.78 cv
74.2852 194.707 74.4453 194.574 74.6016 194.579 cv
74.7754 194.585 74.9443 194.719 75.2637 194.862 cv
74.8184 195.124 74.6035 195.315 74.541 195.274 cv
73.9414 171.058 mo
74.1113 170.939 74.2813 170.82 74.4521 170.701 cv
74.543 170.855 74.6357 171.01 74.7666 171.228 cv
74.5654 171.328 74.3867 171.493 74.2744 171.456 cv
74.1357 171.411 74.0508 171.198 73.9414 171.058 cv
70.8135 169.125 mo
70.6865 169.03 70.5518 168.943 70.4424 168.83 cv
70.4297 168.817 70.5566 168.667 70.792 168.341 cv
70.874 168.549 70.9658 168.704 70.9883 168.869 cv
70.999 168.945 70.876 169.039 70.8135 169.125 cv
68.3252 176.66 mo
68.1836 176.424 68.0098 176.263 68.0283 176.127 cv
68.0469 175.993 68.2578 175.886 68.3848 175.766 cv
68.4922 175.904 68.6816 176.041 68.6855 176.183 cv
68.6885 176.313 68.4932 176.45 68.3252 176.66 cv
65.8711 181.525 mo
65.8018 181.313 65.7158 181.149 65.7051 180.981 cv
65.7002 180.896 65.8691 180.713 65.8975 180.726 cv
66.0391 180.785 66.1602 180.894 66.2891 180.984 cv
66.2197 181.076 66.1484 181.167 65.8711 181.525 cv
131.949 155.42 mo
132.147 155.477 132.312 155.649 132.489 155.776 cv
132.387 155.914 132.284 156.053 132.097 156.305 cv
131.897 156.088 131.712 155.948 131.63 155.764 cv
131.602 155.701 131.874 155.399 131.949 155.42 cv
133.829 152.104 mo
133.92 152.174 134.01 152.244 134.33 152.497 cv
134.136 152.57 133.98 152.664 133.817 152.677 cv
133.734 152.686 133.553 152.511 133.563 152.488 cv
133.629 152.349 133.735 152.229 133.829 152.104 cv
136.218 181.556 mo
136.355 181.629 136.449 181.784 136.636 181.985 cv
136.375 182.074 136.167 182.214 136.077 182.159 cv
135.966 182.092 135.927 181.863 135.914 181.701 cv
135.911 181.655 136.154 181.522 136.218 181.556 cv
138.095 203.352 mo
138.23 203.559 138.366 203.767 138.502 203.975 cv
138.42 204.028 138.337 204.082 138.254 204.137 cv
138.121 203.95 137.979 203.77 137.87 203.571 cv
137.856 203.546 138.016 203.427 138.095 203.352 cv
139.046 160.42 mo
139.07 160.41 139.176 160.587 139.287 160.738 cv
139.136 160.812 139.001 160.909 138.855 160.931 cv
138.803 160.938 138.723 160.767 138.654 160.676 cv
138.782 160.585 138.904 160.48 139.046 160.42 cv
140.133 199.456 mo
140.281 199.642 140.528 199.816 140.55 200.016 cv
140.57 200.206 140.356 200.422 140.129 200.844 cv
139.903 200.42 139.691 200.203 139.713 200.013 cv
139.735 199.813 139.983 199.641 140.133 199.456 cv
141.757 150.719 mo
141.831 150.835 141.905 150.95 141.979 151.066 cv
141.62 151.336 141.262 151.606 140.902 151.876 cv
140.79 151.723 140.679 151.569 140.566 151.417 cv
140.964 151.185 141.36 150.952 141.757 150.719 cv
142.43 153.165 mo
142.113 153.304 141.913 153.455 141.711 153.459 cv
141.597 153.461 141.479 153.218 141.362 153.085 cv
141.543 152.956 141.712 152.771 141.913 152.718 cv
142.007 152.694 142.167 152.928 142.43 153.165 cv
143.132 164.457 mo
143.504 165.141 143.77 165.629 144.177 166.377 cv
142.61 165.853 142.61 165.853 143.132 164.457 cv
144.478 176.983 mo
144.652 177.141 144.827 177.296 145.106 177.544 cv
144.822 177.786 144.645 177.938 144.467 178.091 cv
144.319 177.904 144.056 177.718 144.058 177.531 cv
144.059 177.349 144.326 177.166 144.478 176.983 cv
146.588 150.754 mo
146.698 150.974 146.877 151.203 146.831 151.263 cv
146.707 151.429 146.488 151.524 146.308 151.647 cv
146.247 151.481 146.112 151.296 146.147 151.153 cv
146.183 151.015 146.392 150.921 146.588 150.754 cv
149.67 175.104 mo
147.024 174.146 146.102 173.301 146.549 171.514 cv
148.847 171.304 150.269 172.86 149.67 175.104 cv
149.507 150.753 mo
149.514 150.732 149.651 150.724 149.664 150.748 cv
149.711 150.832 149.73 150.93 149.76 151.024 cv
149.655 151.031 149.553 151.037 149.449 151.043 cv
149.466 150.945 149.473 150.844 149.507 150.753 cv
153.543 155.918 mo
153.637 156.053 153.742 156.176 153.798 156.316 cv
153.812 156.351 153.598 156.52 153.586 156.51 cv
153.466 156.409 153.365 156.285 153.261 156.168 cv
153.339 156.098 153.417 156.029 153.543 155.918 cv
154.571 146.168 mo
154.981 146.337 155.32 146.681 155.955 147.168 cv
155.304 147.555 154.898 147.979 154.639 147.903 cv
154.329 147.813 154 147.313 153.957 146.956 cv
153.928 146.707 154.476 146.128 154.571 146.168 cv
157.033 157.379 mo
156.78 157.644 156.527 157.906 156.275 158.17 cv
156.164 158.039 156.055 157.909 155.943 157.778 cv
156.229 157.558 156.514 157.336 156.798 157.115 cv
156.876 157.203 156.954 157.291 157.033 157.379 cv
157.227 185.225 mo
157.316 185.276 157.396 185.345 157.479 185.408 cv
157.404 185.479 157.33 185.551 157.257 185.62 cv
157.209 185.529 157.15 185.44 157.122 185.345 cv
157.114 185.314 157.218 185.219 157.227 185.225 cv
158.201 180.437 mo
158.343 180.539 158.482 180.644 158.737 180.831 cv
158.52 181.032 158.377 181.222 158.189 181.304 cv
158.126 181.331 157.82 181.056 157.843 180.98 cv
157.898 180.781 158.073 180.615 158.201 180.437 cv
158.711 161.86 mo
158.938 162.037 159.155 162.237 159.323 162.471 cv
159.35 162.508 159.116 162.731 158.898 162.997 cv
158.68 162.677 158.489 162.451 158.376 162.193 cv
158.352 162.139 158.692 161.847 158.711 161.86 cv
159.552 147.795 mo
159.646 147.814 159.736 147.858 159.828 147.896 cv
159.777 147.983 159.726 148.071 159.674 148.159 cv
159.604 148.084 159.524 148.015 159.471 147.93 cv
159.457 147.908 159.532 147.792 159.552 147.795 cv
159.979 171.815 mo
160.064 171.87 160.149 171.927 160.234 171.981 cv
160.168 172.059 160.107 172.143 160.03 172.206 cv
160.016 172.219 159.893 172.148 159.896 172.126 cv
159.908 172.021 159.948 171.918 159.979 171.815 cv
161.363 149.684 mo
161.505 149.682 161.647 149.872 161.839 150.014 cv
161.705 150.198 161.604 150.338 161.504 150.478 cv
161.34 150.331 161.176 150.182 161.013 150.034 cv
161.13 149.909 161.245 149.685 161.363 149.684 cv
161.558 211.641 mo
161.447 211.546 161.337 211.453 161.226 211.36 cv
161.313 211.284 161.398 211.208 161.485 211.133 cv
161.568 211.205 161.709 211.271 161.719 211.353 cv
161.729 211.441 161.616 211.543 161.558 211.641 cv
158.915 216.753 mo
158.696 216.565 158.528 216.421 158.361 216.277 cv
158.501 216.119 158.663 215.816 158.775 215.834 cv
158.964 215.864 159.151 216.077 159.269 216.26 cv
159.302 216.311 159.087 216.521 158.915 216.753 cv
156.206 200.255 mo
156.162 200.274 156.04 200.109 155.953 200.029 cv
156.068 199.906 156.177 199.773 156.309 199.674 cv
156.324 199.66 156.472 199.82 156.615 199.952 cv
156.475 200.063 156.354 200.192 156.206 200.255 cv
154.331 197.977 mo
154.206 197.862 154.129 197.792 154.051 197.722 cv
154.157 197.605 154.258 197.482 154.379 197.385 cv
154.392 197.374 154.604 197.546 154.591 197.579 cv
154.533 197.721 154.427 197.839 154.331 197.977 cv
148.782 206.967 mo
148.658 206.851 148.418 206.717 148.434 206.623 cv
148.467 206.41 148.625 206.219 148.792 205.907 cv
148.998 206.16 149.219 206.332 149.188 206.413 cv
149.112 206.619 148.926 206.784 148.782 206.967 cv
147.603 185.017 mo
147.545 184.933 147.482 184.851 147.437 184.761 cv
147.432 184.75 147.532 184.655 147.563 184.665 cv
147.655 184.696 147.739 184.759 147.826 184.81 cv
147.751 184.879 147.678 184.947 147.603 185.017 cv
144.712 222.695 mo
144.633 222.627 144.546 222.565 144.48 222.485 cv
144.466 222.468 144.529 222.342 144.553 222.344 cv
144.649 222.349 144.744 222.384 144.84 222.407 cv
144.798 222.503 144.755 222.6 144.712 222.695 cv
140.356 232.56 mo
141.093 231.592 141.632 231.859 142.139 232.56 cv
140.356 232.56 li
cp
163.444 151.739 mo
163.527 152.11 163.609 152.482 163.691 152.854 cv
163.562 152.893 163.432 152.931 163.302 152.97 cv
163.171 152.601 163.039 152.23 162.908 151.861 cv
163.088 151.82 163.267 151.779 163.444 151.739 cv
165.915 153.194 mo
165.987 153.214 166.021 153.375 166.071 153.473 cv
165.982 153.549 165.895 153.625 165.807 153.701 cv
165.735 153.566 165.664 153.432 165.594 153.297 cv
165.702 153.257 165.825 153.168 165.915 153.194 cv
168.834 207.302 mo
168.927 207.416 169.019 207.53 169.111 207.645 cv
169.013 207.702 168.913 207.762 168.813 207.819 cv
168.741 207.733 168.607 207.641 168.615 207.564 cv
168.626 207.47 168.757 207.389 168.834 207.302 cv
171.189 178.425 mo
171.385 178.602 171.604 178.708 171.616 178.835 cv
171.632 178.978 171.457 179.139 171.365 179.29 cv
171.222 179.192 170.989 179.116 170.956 178.988 cv
170.923 178.855 171.077 178.672 171.189 178.425 cv
171.293 170.635 mo
171.384 170.705 171.475 170.776 171.795 171.026 cv
171.6 171.102 171.444 171.195 171.281 171.209 cv
171.198 171.218 171.016 171.043 171.026 171.021 cv
171.093 170.881 171.199 170.762 171.293 170.635 cv
174.5 162.568 mo
172.922 162.052 172.02 161.289 171.51 160.073 cv
172.896 160.296 173.752 161.102 174.5 162.568 cv
173.16 179.354 mo
173.115 179.372 172.993 179.206 172.906 179.125 cv
173.021 179.002 173.13 178.868 173.263 178.769 cv
173.279 178.755 173.428 178.916 173.571 179.05 cv
173.43 179.161 173.309 179.29 173.16 179.354 cv
172.936 207.736 mo
172.84 207.705 172.732 207.594 172.707 207.496 cv
172.688 207.422 172.789 207.317 172.837 207.227 cv
172.962 207.319 173.087 207.411 173.227 207.515 cv
173.092 207.622 172.989 207.753 172.936 207.736 cv
176.057 184.733 mo
176.115 184.832 176.174 184.932 176.231 185.03 cv
176.145 185.103 176.053 185.237 175.974 185.23 cv
175.88 185.222 175.799 185.088 175.713 185.01 cv
175.826 184.917 175.941 184.825 176.057 184.733 cv
176.168 174.662 mo
176.301 174.734 176.41 174.955 176.416 175.117 cv
176.422 175.281 176.289 175.45 176.057 175.986 cv
175.841 175.255 175.736 175.044 175.739 174.834 cv
175.74 174.768 176.076 174.612 176.168 174.662 cv
177.032 164.147 mo
177.185 164.176 177.364 164.336 177.425 164.483 cv
177.459 164.569 177.284 164.741 177.125 165.003 cv
176.901 164.729 176.76 164.554 176.617 164.379 cv
176.758 164.294 176.912 164.125 177.032 164.147 cv
178.466 175.799 mo
177.947 174.957 177.613 174.415 177.193 173.734 cv
178.551 173.983 178.551 173.983 178.466 175.799 cv
178.85 194.158 mo
178.979 194.346 179.154 194.52 179.214 194.727 cv
179.239 194.818 179.025 194.978 178.821 195.229 cv
178.668 194.903 178.521 194.702 178.497 194.488 cv
178.487 194.393 178.725 194.269 178.85 194.158 cv
178.862 180.147 mo
178.959 180.153 179.055 180.188 179.15 180.212 cv
179.107 180.31 179.064 180.405 179.021 180.501 cv
178.942 180.434 178.855 180.371 178.79 180.291 cv
178.775 180.272 178.84 180.146 178.862 180.147 cv
179.458 171.272 mo
179.604 171.282 179.744 171.367 179.901 171.43 cv
179.804 171.592 179.713 171.778 179.691 171.771 cv
179.548 171.718 179.417 171.625 179.282 171.545 cv
179.342 171.448 179.406 171.269 179.458 171.272 cv
164.523 298.16 mo
155.979 295.348 137.161 295.766 131.735 282.275 cv
130.785 279.557 130.401 276.434 130.241 272.848 cv
130.15 270.792 130.15 268.738 130.213 266.549 cv
130.853 243.866 141.464 237.627 143.496 236.91 cv
166.286 228.872 182.617 207.159 182.617 181.584 cv
182.617 170.841 181.058 163.357 178.869 157.493 cv
178.796 157.457 178.726 157.418 178.671 157.362 cv
178.543 157.234 178.579 156.945 178.542 156.728 cv
178.552 156.723 178.562 156.719 178.57 156.713 cv
177.555 154.119 176.418 151.841 175.247 149.731 cv
175.138 149.776 175.031 149.815 174.929 149.822 cv
174.845 149.829 174.662 149.654 174.675 149.627 cv
174.736 149.485 174.848 149.364 174.94 149.237 cv
174.957 149.25 174.977 149.265 174.994 149.28 cv
174.546 148.482 174.093 147.706 173.64 146.944 cv
173.407 146.554 172.904 146.05 172.265 145.608 cv
172.245 145.798 172.228 145.988 172.208 146.178 cv
172.017 146.149 171.824 146.12 171.634 146.091 cv
171.688 145.832 171.744 145.57 171.8 145.311 cv
170.963 144.833 169.957 144.508 168.979 144.656 cv
167.615 144.863 165.316 145.075 162.41 145.279 cv
162.64 145.99 162.855 146.66 163.089 147.382 cv
162.035 146.902 161.449 146.152 161.439 145.346 cv
151.493 146.008 135.327 146.569 123.963 146.569 cv
108.748 146.569 85.3916 145.619 79.2344 144.699 cv
77.0518 144.375 74.8916 145.928 74.3496 146.838 cv
69.8789 154.346 65.3086 163.189 65.3086 181.584 cv
65.3086 190.938 67.502 199.771 71.3887 207.61 cv
70.9736 205.678 72.7998 205.286 73.5254 204.143 cv
74.4482 205.932 74.1074 206.562 71.499 207.834 cv
78.4795 221.766 90.832 232.525 105.851 237.392 cv
107.431 237.903 117.617 246.309 117.714 266.549 cv
117.724 268.661 117.775 270.818 117.684 272.848 cv
117.521 276.434 117.141 279.557 116.189 282.275 cv
110.765 295.766 91.9463 295.348 83.4014 298.16 cv
80.5088 299.113 81.6006 300.87 83.4404 301.308 cv
84.1104 301.466 86.2813 301.989 90.0088 302.591 cv
89.9502 302.275 90.0039 301.928 90.1807 301.532 cv
91.1367 302.071 91.4053 302.248 91.2041 302.778 cv
95.0527 303.361 100.315 303.987 107.06 304.409 cv
107.084 304.37 107.134 304.321 107.141 304.325 cv
107.188 304.354 107.229 304.39 107.271 304.422 cv
112.083 304.72 117.639 304.912 123.963 304.912 cv
149.077 304.912 162.385 301.681 164.219 301.246 cv
166.06 300.811 167.417 299.113 164.523 298.16 cv
f
85.0537 277.898 mo
85.5049 277.862 85.9561 277.826 86.6934 277.768 cv
86.1143 278.747 85.6523 278.732 85.125 278.402 cv
85.1006 278.234 85.0781 278.066 85.0537 277.898 cv
84.667 283.021 mo
84.5156 282.851 84.3457 282.692 84.2275 282.502 cv
84.1973 282.452 84.3652 282.207 84.3799 282.212 cv
84.585 282.29 84.7793 282.397 85.0605 282.539 cv
84.8711 282.771 84.7686 282.896 84.667 283.021 cv
82.9912 259.047 mo
82.8691 258.947 82.7676 258.822 82.6621 258.704 cv
82.7412 258.634 82.8213 258.563 82.9492 258.45 cv
83.042 258.587 83.1504 258.71 83.2061 258.853 cv
83.2188 258.887 83.0039 259.058 82.9912 259.047 cv
75.4932 260.308 mo
75.4063 260.316 75.2109 260.13 75.2207 260.111 cv
75.2979 259.959 75.4121 259.827 75.5137 259.688 cv
75.6104 259.762 75.7061 259.834 76.0625 260.105 cv
75.8428 260.188 75.6719 260.287 75.4932 260.308 cv
74.7959 257.051 mo
74.7529 256.929 75.0322 256.692 75.165 256.509 cv
75.3838 256.68 75.667 256.814 75.7969 257.038 cv
75.8604 257.147 75.6377 257.422 75.4639 257.799 cv
75.1436 257.46 74.8799 257.287 74.7959 257.051 cv
85.1406 253.419 mo
85.1826 253.533 85.2236 253.647 85.292 253.831 cv
85.124 253.881 84.9639 253.949 84.7988 253.96 cv
84.7646 253.962 84.6572 253.674 84.6855 253.65 cv
84.8174 253.546 84.9863 253.491 85.1406 253.419 cv
85.542 269.614 mo
85.5889 269.706 85.6484 269.794 85.6758 269.893 cv
85.6836 269.921 85.5811 270.019 85.5713 270.013 cv
85.4824 269.959 85.4014 269.892 85.3184 269.827 cv
85.3926 269.756 85.4678 269.686 85.542 269.614 cv
71.2168 263.227 mo
71.1621 263.35 70.4766 263.196 69.7012 263.145 cv
70.2578 262.305 70.6094 261.774 70.96 261.244 cv
71.1758 261.332 71.3916 261.42 71.6094 261.509 cv
71.4951 262.088 71.4492 262.698 71.2168 263.227 cv
67.4453 268.584 mo
67.3945 268.586 67.335 268.404 67.2793 268.307 cv
67.415 268.229 67.5479 268.141 67.6943 268.092 cv
67.7139 268.085 67.7998 268.274 67.8926 268.438 cv
67.7363 268.495 67.5918 268.576 67.4453 268.584 cv
64.4092 258.771 mo
64.3193 258.644 64.2139 258.522 64.1533 258.381 cv
64.1426 258.357 64.3164 258.254 64.4639 258.144 cv
64.2178 257.996 63.9707 257.848 63.7168 257.665 cv
63.6924 257.647 59.9619 254.895 57.1406 252.322 cv
56.1318 251.401 55.207 250.446 54.4092 249.566 cv
54.2686 249.606 54.1348 249.655 54.0029 249.651 cv
53.957 249.65 53.8613 249.376 53.8818 249.361 cv
53.9541 249.311 54.0342 249.273 54.1162 249.238 cv
52.5098 247.433 51.4893 246.014 51.4727 245.991 cv
50.2236 244.156 49.8008 241.416 51.7061 239.479 cv
52.5244 238.646 53.4912 238.204 54.5 238.204 cv
55.5547 238.204 56.6367 238.697 57.5459 239.591 cv
57.5508 239.598 57.5723 239.62 57.5938 239.645 cv
57.7998 239.254 58.2061 239.04 59.1895 239.307 cv
58.7744 239.703 58.459 240.005 58.1719 240.28 cv
59.3672 241.588 61.9961 244.433 63.5527 245.896 cv
65.4893 247.714 69.6768 250.909 70.2656 251.357 cv
71.0986 252.2 71.5645 253.316 71.5742 254.504 cv
71.585 255.717 71.1221 256.86 70.2734 257.726 cv
69.3633 258.651 68.4092 259.103 67.3604 259.103 cv
67.3594 259.103 li
66.4873 259.103 65.5186 258.773 64.4805 258.153 cv
64.5537 258.3 64.6455 258.431 64.668 258.571 cv
64.6758 258.623 64.501 258.704 64.4092 258.771 cv
59.6963 255.198 mo
59.6816 255.177 59.7568 255.06 59.7764 255.063 cv
59.8711 255.083 59.96 255.127 60.0508 255.163 cv
60 255.252 59.9492 255.341 59.8984 255.428 cv
59.8281 255.353 59.75 255.283 59.6963 255.198 cv
59.9131 267.451 mo
59.7246 267.435 59.5576 267.188 59.3809 267.041 cv
59.5049 266.908 59.6221 266.676 59.7539 266.666 cv
59.9629 266.651 60.1826 266.786 60.6406 266.94 cv
60.2627 267.221 60.0762 267.466 59.9131 267.451 cv
58.3203 265.682 mo
58.251 265.606 58.1719 265.537 58.1182 265.452 cv
58.1055 265.432 58.1797 265.314 58.1992 265.318 cv
58.293 265.337 58.3828 265.383 58.4736 265.418 cv
58.4229 265.506 58.3711 265.594 58.3203 265.682 cv
54.4736 255.928 mo
54.4092 255.779 54.333 255.638 54.2979 255.486 cv
54.292 255.463 54.542 255.336 54.5615 255.358 cv
54.667 255.475 54.7363 255.622 54.8184 255.761 cv
54.7217 255.808 54.625 255.854 54.4736 255.928 cv
52.4863 266.927 mo
50.7979 266.657 50.2344 266.138 50.1406 264.789 cv
50.0781 263.871 50.2959 263.119 51.4092 263.063 cv
52.6797 265.267 52.6797 265.267 52.4863 266.927 cv
50.5059 231.523 mo
50.5566 231.63 50.6084 231.738 50.6592 231.846 cv
50.5752 231.913 50.4658 232.052 50.4131 232.031 cv
50.3193 231.997 50.2588 231.869 50.1846 231.78 cv
50.292 231.694 50.3994 231.609 50.5059 231.523 cv
50.5762 217.776 mo
50.6621 217.826 50.7334 217.903 50.8096 217.971 cv
50.7227 218.024 50.6357 218.078 50.5488 218.133 cv
50.5088 218.041 50.4629 217.951 50.4404 217.857 cv
50.4355 217.841 50.5518 217.763 50.5762 217.776 cv
51.5742 209.603 mo
51.6816 209.549 51.999 209.913 52.4287 210.25 cv
51.9248 210.598 51.5947 210.823 51.2656 211.05 cv
51.1084 210.812 50.7676 210.496 50.8291 210.353 cv
50.9619 210.043 51.2676 209.755 51.5742 209.603 cv
51.71 201.401 mo
51.7881 201.383 51.8984 201.495 51.9932 201.551 cv
51.9502 201.657 51.9082 201.765 51.8652 201.87 cv
51.7344 201.795 51.6035 201.721 51.4727 201.645 cv
51.5508 201.559 51.6172 201.424 51.71 201.401 cv
54.9551 219.539 mo
55.0459 219.609 55.1367 219.681 55.458 219.931 cv
55.2617 220.006 55.1074 220.101 54.9443 220.114 cv
54.8604 220.122 54.6768 219.947 54.6875 219.926 cv
54.7529 219.785 54.8613 219.665 54.9551 219.539 cv
63.917 238.761 mo
64.0078 238.831 64.0986 238.901 64.4512 239.175 cv
64.2422 239.244 64.0791 239.332 63.9121 239.343 cv
63.8271 239.349 63.6445 239.179 63.6572 239.151 cv
63.7168 239.011 63.8252 238.889 63.917 238.761 cv
66.0029 226.849 mo
66.0938 226.824 66.2559 227.066 66.5166 227.312 cv
66.1982 227.449 65.9951 227.602 65.793 227.601 cv
65.6738 227.6 65.5557 227.355 65.4375 227.222 cv
65.624 227.089 65.7959 226.903 66.0029 226.849 cv
46.5625 229.872 mo
46.4775 229.877 46.2988 229.71 46.3105 229.683 cv
46.3691 229.541 46.4766 229.42 46.5674 229.293 cv
46.6572 229.363 46.7471 229.434 47.1025 229.709 cv
46.8926 229.778 46.7305 229.863 46.5625 229.872 cv
46.6719 259.422 mo
46.6191 259.43 46.541 259.255 46.4736 259.163 cv
46.6025 259.074 46.7266 258.973 46.8682 258.911 cv
46.8896 258.901 46.9932 259.081 47.1016 259.233 cv
46.9512 259.307 46.8174 259.402 46.6719 259.422 cv
46.4102 141.449 mo
46.5 141.501 46.5811 141.57 46.665 141.635 cv
46.5889 141.707 46.5137 141.777 46.4395 141.848 cv
46.3916 141.756 46.333 141.667 46.3037 141.57 cv
46.2959 141.541 46.3994 141.443 46.4102 141.449 cv
44.7383 197.13 mo
44.6748 197.127 44.5352 196.785 44.5898 196.694 cv
44.666 196.567 44.8994 196.458 45.0508 196.475 cv
45.1748 196.487 45.2783 196.695 45.5176 196.953 cv
45.1602 197.045 44.9473 197.14 44.7383 197.13 cv
44.6582 235.346 mo
44.6094 235.372 44.291 235.084 44.3125 235.033 cv
44.4023 234.825 44.5576 234.634 44.7324 234.487 cv
44.7666 234.458 44.9932 234.658 45.2412 234.827 cv
45.0029 235.052 44.8525 235.239 44.6582 235.346 cv
44.3633 189.455 mo
44.4434 189.45 44.5313 189.586 44.6162 189.66 cv
44.5547 189.758 44.4932 189.854 44.4316 189.95 cv
44.3203 189.856 44.209 189.762 44.0967 189.666 cv
44.1846 189.591 44.2695 189.461 44.3633 189.455 cv
43.9512 186.326 mo
43.9648 186.221 44.0039 186.119 44.0352 186.016 cv
44.1211 186.071 44.2051 186.126 44.29 186.183 cv
44.2236 186.259 44.1631 186.343 44.0859 186.405 cv
44.0713 186.418 43.9482 186.349 43.9512 186.326 cv
43.2285 141.505 mo
43.1055 141.39 42.9834 141.275 42.8594 141.16 cv
42.9404 141.074 43.0488 140.902 43.0947 140.918 cv
43.2461 140.97 43.375 141.089 43.5234 141.189 cv
43.3887 141.333 43.3086 141.419 43.2285 141.505 cv
43.0244 219.684 mo
42.4648 220.76 41.5205 221.554 40.3652 221.919 cv
39.8193 222.093 39.2988 222.18 38.8184 222.18 cv
37.1162 222.18 35.7373 221.072 34.6016 218.794 cv
34.5879 218.767 32.582 214.587 31.2959 210.993 cv
29.8066 206.832 29.2598 202.786 29.2549 202.745 cv
29.0098 200.538 29.9199 197.92 32.5107 197.101 cv
32.9658 196.956 33.4141 196.884 33.8447 196.884 cv
35.5605 196.884 36.9561 198.055 37.5771 200.016 cv
37.623 200.194 39.0742 205.69 39.9707 208.32 cv
40.8301 210.834 43.0322 215.618 43.3428 216.29 cv
43.6846 217.427 43.5713 218.628 43.0244 219.684 cv
43.209 229.072 mo
43.0811 228.977 42.9443 228.889 42.834 228.774 cv
42.8213 228.762 42.9502 228.61 43.1875 228.28 cv
43.2705 228.49 43.3623 228.647 43.3848 228.814 cv
43.3955 228.891 43.2715 228.985 43.209 229.072 cv
42.4326 254.557 mo
42.3174 254.679 42.0938 254.699 41.71 254.545 cv
41.9561 254.286 42.2021 254.026 42.4482 253.767 cv
42.542 253.832 42.6357 253.898 42.7305 253.963 cv
42.6348 254.164 42.5781 254.401 42.4326 254.557 cv
31.3896 213.743 mo
31.4492 213.647 31.5137 213.469 31.5654 213.473 cv
31.71 213.483 31.8496 213.568 32.0059 213.63 cv
31.9092 213.79 31.8184 213.976 31.7969 213.969 cv
31.6533 213.915 31.5244 213.823 31.3896 213.743 cv
32.0098 221.614 mo
31.9307 221.62 31.8418 221.483 31.7578 221.409 cv
31.8193 221.313 31.8799 221.217 31.9414 221.119 cv
32.0527 221.214 32.1641 221.309 32.2764 221.403 cv
32.1875 221.479 32.1025 221.608 32.0098 221.614 cv
29.6523 242.135 mo
29.5801 242.003 29.5088 241.871 29.4365 241.74 cv
29.5439 241.699 29.6641 241.609 29.752 241.634 cv
29.8252 241.654 29.8604 241.811 29.9111 241.907 cv
29.8252 241.983 29.7383 242.06 29.6523 242.135 cv
28.7656 218.852 mo
28.7148 218.753 28.6094 218.641 28.6299 218.563 cv
28.6553 218.47 28.79 218.405 28.8779 218.329 cv
28.9492 218.463 29.0195 218.597 29.0908 218.729 cv
28.9834 218.771 28.875 218.811 28.7656 218.852 cv
32.4063 176.236 mo
32.3291 176.39 32.2686 176.557 32.1631 176.686 cv
32.1396 176.713 31.8525 176.596 31.8555 176.563 cv
31.874 176.396 31.9482 176.237 32.0039 176.07 cv
32.1826 176.145 32.2939 176.19 32.4063 176.236 cv
26.9131 169.565 mo
26.915 169.534 27.1846 164.907 27.8018 161.141 cv
28.5137 156.791 29.999 152.974 30.0137 152.937 cv
30.8848 150.847 32.7197 149.482 34.6758 149.482 cv
34.9805 149.482 35.2891 149.514 35.5967 149.576 cv
36.8291 149.825 37.752 150.343 38.2686 151.075 cv
38.7891 151.813 38.9307 152.794 38.6904 153.99 cv
38.6367 154.205 37.1729 160.276 36.6846 163.006 cv
36.2178 165.621 35.8271 170.874 35.7734 171.611 cv
35.3213 173.686 33.4688 175.184 31.3447 175.184 cv
31.0439 175.184 30.7393 175.152 30.4404 175.093 cv
28.8369 174.769 26.7256 173.843 26.9131 169.565 cv
26.4912 229.258 mo
26.1982 227.945 26.4873 227.321 27.458 227.188 cv
27.6387 227.162 28.0234 227.412 28.0371 227.563 cv
28.1348 228.619 27.2188 228.669 26.4912 229.258 cv
27.0576 139.542 mo
27.207 139.398 27.8184 139.434 27.874 139.551 cv
28.0137 139.842 28.1074 140.398 27.9453 140.543 cv
27.5605 140.889 27.0176 141.06 26.54 141.3 cv
26.3984 141.144 26.2559 140.987 26.1143 140.832 cv
26.4199 140.394 26.6797 139.906 27.0576 139.542 cv
25.4219 105.549 mo
25.375 105.487 25.6504 105.025 25.7598 105.032 cv
26.0156 105.047 26.2607 105.236 26.6621 105.428 cv
26.3857 105.721 26.1953 106.042 26.0859 106.016 cv
25.835 105.957 25.5811 105.76 25.4219 105.549 cv
22.3857 192.852 mo
22.2598 192.846 22.0654 192.633 22.0469 192.492 cv
22.0254 192.322 22.1582 192.134 22.2754 191.813 cv
22.6006 192.27 22.7998 192.431 22.7764 192.545 cv
22.749 192.678 22.5186 192.858 22.3857 192.852 cv
20.8047 109.508 mo
20.7578 109.417 20.6992 109.328 20.6719 109.232 cv
20.6631 109.202 20.7656 109.106 20.7764 109.112 cv
20.8652 109.165 20.9453 109.232 21.0283 109.296 cv
20.9531 109.367 20.8789 109.438 20.8047 109.508 cv
20.6748 206.147 mo
20.2061 205.957 19.8877 205.928 19.7656 205.756 cv
19.5352 205.435 19.3867 205.039 19.2861 204.652 cv
19.2695 204.594 19.7803 204.267 19.8857 204.329 cv
20.2256 204.533 20.5439 204.828 20.7607 205.159 cv
20.8672 205.32 20.7305 205.64 20.6748 206.147 cv
19.2891 170.628 mo
19.3359 170.72 19.3945 170.809 19.4219 170.905 cv
19.4307 170.936 19.3281 171.031 19.3184 171.025 cv
19.2275 170.974 19.1484 170.904 19.0654 170.841 cv
19.1396 170.77 19.2148 170.698 19.2891 170.628 cv
18.0068 163.997 mo
17.8721 163.937 17.8076 163.716 17.7129 163.563 cv
17.8623 163.486 18.0361 163.321 18.1533 163.355 cv
18.292 163.395 18.3828 163.604 18.5576 163.817 cv
18.3154 163.905 18.1182 164.047 18.0068 163.997 cv
18.4053 166.629 mo
17.4473 166.982 17.4473 166.982 16.4365 166.099 cv
17.3408 166.141 17.8848 166.165 18.4287 166.19 cv
18.4209 166.336 18.4131 166.482 18.4053 166.629 cv
16.96 195.912 mo
16.9131 195.928 16.8066 195.751 16.7275 195.663 cv
16.8555 195.551 16.9756 195.428 17.1182 195.34 cv
17.1348 195.328 17.2676 195.502 17.3994 195.649 cv
17.2471 195.746 17.1143 195.864 16.96 195.912 cv
17.5059 145.019 mo
17.6055 145.135 17.6699 145.28 17.7451 145.417 cv
17.6455 145.469 17.5459 145.522 17.3799 145.611 cv
17.3242 145.457 17.2441 145.314 17.2373 145.169 cv
17.2354 145.119 17.4922 145.001 17.5059 145.019 cv
19.7793 174.381 mo
19.9258 173.499 20.0166 172.951 20.1084 172.403 cv
20.2656 172.42 20.4238 172.438 20.582 172.455 cv
20.8711 173.098 20.9229 173.688 19.7793 174.381 cv
20.4033 175.9 mo
20.5283 176.148 20.6523 176.396 20.7773 176.646 cv
20.6279 176.703 20.4785 176.762 20.3301 176.819 cv
20.2578 176.553 20.1855 176.286 20.1143 176.02 cv
20.21 175.979 20.3066 175.939 20.4033 175.9 cv
20.1416 116.48 mo
20.9922 116.682 20.8809 117.344 20.5762 118.138 cv
19.752 118.082 19.0918 117.927 19.1699 117.095 cv
19.1934 116.847 19.8652 116.416 20.1416 116.48 cv
26.8574 193.149 mo
26.998 193.212 27.1182 193.321 27.2461 193.415 cv
27.1738 193.505 27.1025 193.596 26.8369 193.931 cv
26.7646 193.729 26.6748 193.569 26.6621 193.403 cv
26.6563 193.319 26.8301 193.138 26.8574 193.149 cv
26.793 155.967 mo
26.9658 155.791 27.1123 155.549 27.3223 155.461 cv
27.5059 155.383 27.7637 155.479 27.9893 155.496 cv
28.0098 155.646 28.0322 155.793 28.0527 155.941 cv
27.6875 156.032 27.3223 156.123 26.9561 156.215 cv
26.9023 156.131 26.8467 156.049 26.793 155.967 cv
28.9043 130.461 mo
29.0186 130.448 29.1602 130.651 29.3301 130.792 cv
29.1729 130.976 29.0596 131.107 28.9463 131.24 cv
28.8018 131.092 28.6592 130.944 28.5146 130.796 cv
28.6436 130.676 28.7627 130.478 28.9043 130.461 cv
31.4238 107.21 mo
30.9414 106.841 30.458 106.472 29.7373 105.921 cv
30.959 105.71 31.4648 106.072 31.4238 107.21 cv
31.9883 125.984 mo
31.8301 126.096 31.7324 126.166 31.6338 126.234 cv
31.5352 126.094 31.4248 125.96 31.3516 125.809 cv
31.3428 125.79 31.582 125.596 31.6201 125.62 cv
31.7598 125.708 31.8633 125.854 31.9883 125.984 cv
33.6455 107.754 mo
33.5596 107.813 33.4746 107.877 33.3828 107.924 cv
33.373 107.929 33.2754 107.826 33.2852 107.795 cv
33.3174 107.7 33.3809 107.615 33.4336 107.526 cv
33.5049 107.603 33.5752 107.678 33.6455 107.754 cv
33.0713 104.336 mo
35.3223 105.486 35.4746 105.726 34.6104 107.191 cv
34.04 106.096 32.6826 105.769 33.0713 104.336 cv
39.7705 189.707 mo
39.9014 190.125 40.0576 190.363 40.0117 190.553 cv
39.9629 190.753 39.7217 190.907 39.5654 191.081 cv
39.4307 190.837 39.2158 190.602 39.1924 190.347 cv
39.1777 190.199 39.4707 190.022 39.7705 189.707 cv
39.293 173.514 mo
39.1943 173.612 38.8662 173.631 38.7578 173.544 cv
38.1563 173.063 38.584 172.654 38.8896 172.066 cv
39.5986 172.602 39.7803 173.027 39.293 173.514 cv
41.4619 178.104 mo
41.3838 178.275 41.3359 178.379 41.2891 178.483 cv
41.1465 178.415 40.9961 178.359 40.873 178.267 cv
40.8525 178.25 40.958 177.983 41.0039 177.983 cv
41.1533 177.984 41.3018 178.057 41.4619 178.104 cv
40.6934 104.957 mo
40.9805 105.2 41.2686 105.444 41.5566 105.689 cv
41.4277 105.829 41.2979 105.969 41.1689 106.109 cv
40.9121 105.836 40.6553 105.564 40.3984 105.292 cv
40.4961 105.179 40.5947 105.067 40.6934 104.957 cv
41.9082 161.707 mo
41.8691 161.8 41.7998 161.878 41.7422 161.963 cv
41.6777 161.885 41.6152 161.806 41.5508 161.726 cv
41.6387 161.675 41.7227 161.616 41.8164 161.578 cv
41.8291 161.573 41.9199 161.681 41.9082 161.707 cv
44.2129 175.98 mo
44.3096 176.023 44.4063 176.066 44.502 176.109 cv
44.4326 176.188 44.3721 176.276 44.292 176.342 cv
44.2734 176.356 44.1465 176.292 44.1494 176.269 cv
44.1543 176.171 44.1895 176.076 44.2129 175.98 cv
44.5625 146.503 mo
44.7188 146.536 44.876 146.57 45.0322 146.604 cv
44.9648 146.988 44.8965 147.373 44.8291 147.756 cv
44.6289 147.718 44.4297 147.68 44.2305 147.643 cv
44.3408 147.262 44.4521 146.883 44.5625 146.503 cv
45.1309 105.179 mo
45.2051 105.2 45.2402 105.357 45.291 105.454 cv
45.2041 105.531 45.1172 105.607 45.0303 105.684 cv
44.958 105.551 44.8857 105.419 44.8145 105.287 cv
44.9209 105.247 45.042 105.155 45.1309 105.179 cv
46.9688 205.925 mo
46.8809 206 46.793 206.075 46.7051 206.151 cv
46.6348 206.018 46.5654 205.884 46.4941 205.749 cv
46.6016 205.71 46.7246 205.621 46.8145 205.646 cv
46.8857 205.666 46.9189 205.826 46.9688 205.925 cv
15.5928 176.429 mo
15.4258 176.591 14.959 176.653 14.7627 176.537 cv
14.1084 176.148 14.1816 175.395 14.9121 174.237 cv
15.9092 175.215 16.1436 175.892 15.5928 176.429 cv
14.6104 180.9 mo
14.6816 181.497 14.7529 182.094 14.8721 183.071 cv
13.7471 182.249 13.5713 181.668 14.6104 180.9 cv
13.3447 163.098 mo
13.4082 162.913 13.6904 162.806 13.877 162.663 cv
14.002 162.858 14.2178 163.05 14.2285 163.25 cv
14.2412 163.484 14.0752 163.729 13.9863 163.969 cv
13.8428 163.885 13.7002 163.8 13.5566 163.716 cv
13.4766 163.506 13.2891 163.26 13.3447 163.098 cv
12.3037 176.269 mo
12.1797 176.147 11.9648 176.034 11.9521 175.902 cv
11.9336 175.71 12.0605 175.504 12.2012 175.072 cv
12.4746 175.448 12.7031 175.625 12.6992 175.796 cv
12.6953 175.957 12.4453 176.111 12.3037 176.269 cv
51.3232 104.256 mo
51.6807 104.339 52.0391 104.421 52.3955 104.503 cv
52.3994 104.614 52.4014 104.726 52.4033 104.836 cv
52.1436 104.897 51.8711 105.035 51.6299 104.992 cv
51.457 104.962 51.3262 104.691 51.1758 104.527 cv
51.2246 104.438 51.2744 104.347 51.3232 104.256 cv
51.5654 114.241 mo
51.5166 114.149 51.458 114.062 51.4297 113.963 cv
51.4209 113.934 51.5254 113.836 51.5352 113.842 cv
51.626 113.896 51.7061 113.963 51.79 114.028 cv
51.7148 114.099 51.6396 114.17 51.5654 114.241 cv
59.7285 107.56 mo
59.8203 107.685 59.8691 107.837 59.9326 107.981 cv
59.8271 108.023 59.7197 108.066 59.543 108.137 cv
59.502 107.978 59.4355 107.827 59.4414 107.679 cv
59.4434 107.632 59.7129 107.537 59.7285 107.56 cv
64.3906 121.992 mo
64.6162 122.185 64.9072 122.34 65.0391 122.583 cv
65.1055 122.704 64.8828 122.983 64.7012 123.394 cv
64.3672 123.01 64.0957 122.818 64.0195 122.567 cv
63.9775 122.425 64.2568 122.188 64.3906 121.992 cv
65.377 130.006 mo
65.4482 130.082 65.5176 130.157 65.5879 130.233 cv
65.502 130.292 65.418 130.354 65.3271 130.401 cv
65.3174 130.406 65.2188 130.304 65.2305 130.274 cv
65.2617 130.179 65.3252 130.094 65.377 130.006 cv
89.1875 277.074 mo
89.2861 277.097 89.3838 277.118 89.4824 277.141 cv
89.4414 277.403 89.4004 277.666 89.3594 277.93 cv
89.207 277.892 89.0547 277.854 88.9033 277.815 cv
88.998 277.568 89.0928 277.321 89.1875 277.074 cv
90.1826 265.672 mo
90.2734 265.726 90.3555 265.794 90.4395 265.859 cv
90.3633 265.932 90.2881 266.002 90.2119 266.073 cv
90.165 265.981 90.1055 265.893 90.0771 265.793 cv
90.0693 265.765 90.1719 265.666 90.1826 265.672 cv
90.3555 256.599 mo
90.4473 256.712 90.5381 256.826 90.6299 256.939 cv
90.5313 256.997 90.4326 257.056 90.334 257.113 cv
90.2627 257.028 90.1289 256.937 90.1367 256.859 cv
90.1465 256.766 90.2773 256.685 90.3555 256.599 cv
95.3369 273.418 mo
95.4111 273.571 95.5088 273.707 95.5303 273.854 cv
95.5381 273.908 95.3643 273.988 95.2734 274.058 cv
95.1826 273.928 95.0771 273.805 95.0166 273.662 cv
95.0059 273.638 95.1846 273.531 95.3369 273.418 cv
102.537 277.075 mo
109.706 265.982 104.23 253.354 95.6787 249.371 cv
93.3154 248.271 90.9912 247.073 88.7139 245.787 cv
88.6611 245.977 88.6113 246.166 88.5557 246.355 cv
88.4072 246.305 88.2568 246.253 88.1084 246.202 cv
88.1963 245.998 88.2881 245.796 88.3789 245.594 cv
82.6025 242.299 77.1582 238.367 72.3301 233.541 cv
61.0195 222.237 53.8076 207.926 51.415 192.402 cv
51.4141 192.402 51.4131 192.402 51.4131 192.402 cv
51.4111 192.401 51.4131 192.394 51.4131 192.391 cv
50.832 188.619 50.5273 184.779 50.5273 180.892 cv
50.5273 162.945 54.4121 152.789 58.8428 143.969 cv
61.1914 138.842 68.1631 129.218 68.0361 121.348 cv
68.0361 109.763 59.1543 102.193 47.6982 102.193 cv
36.2432 102.193 19.4336 103.721 16.1074 103.916 cv
12.7803 104.109 10.8145 106.035 9.54883 110.473 cv
.196289 138.411 li
-.932617 141.943 3.0127 145.34 6.75391 144.969 cv
10.4951 144.598 11.3555 144.169 13.4219 144.128 cv
15.4873 144.087 16.2324 144.718 15.8154 146.45 cv
12.8613 156.953 10.5059 168.294 10.5059 180.892 cv
10.5059 196.329 13.5381 211.327 19.5186 225.472 cv
25.2871 239.112 33.5361 251.352 44.0371 261.847 cv
52.5781 270.385 62.2715 277.433 72.9355 282.866 cv
87.6387 289.339 98.3486 283.557 102.537 277.075 cv
f
84.6387 80.7041 mo
83.2803 79.8345 81.7676 78.9102 80.1592 77.9595 cv
80.0215 78.1523 79.877 78.2783 79.7773 78.2783 cv
79.6572 78.2783 79.5771 78.1001 79.5771 77.832 cv
79.5771 77.7632 79.5938 77.7002 79.6211 77.6431 cv
68.3535 71.0254 52.8506 63.269 52.8506 63.269 cv
52.8506 63.269 70.3408 77.4131 81.249 84.4043 cv
90.0977 90.0742 91.417 89.6055 92.3535 88.5845 cv
93.2891 87.5625 93.4873 86.374 84.6387 80.7041 cv
f
87.5293 62.2813 mo
87.5127 62.3423 87.416 62.4272 87.2021 62.5625 cv
86.4902 63.0112 84.9307 62.6802 84.9307 62.0791 cv
84.9307 61.8291 85.2432 61.7515 85.6436 61.9014 cv
86.0322 62.0474 86.6904 62.1685 87.0918 62.1685 cv
87.3037 62.1685 87.416 62.1865 87.4805 62.2153 cv
76.7275 47.415 63.2881 30.4541 63.2881 30.4541 cv
63.2881 30.4541 79.3584 59.1475 89.8779 74.8125 cv
98.4102 87.5205 100.039 87.8145 101.381 87.1841 cv
102.722 86.5542 103.269 85.2373 94.7373 72.5303 cv
92.6602 69.4385 90.1748 65.9253 87.5293 62.2813 cv
f
112.311 87.1841 mo
113.818 86.9277 114.9 86.1411 112.681 77.0039 cv
109.944 65.7397 102.402 46.394 102.402 46.394 cv
102.402 46.394 104.483 66.668 107.22 77.9321 cv
109.439 87.0688 110.802 87.4399 112.311 87.1841 cv
f
145.22 87.1841 mo
146.561 87.814 148.189 87.52 156.722 74.812 cv
167.241 59.147 183.312 30.4541 183.312 30.4541 cv
183.312 30.4541 162.383 56.8647 151.863 72.5298 cv
143.331 85.2378 143.878 86.5537 145.22 87.1841 cv
f
134.821 87.1841 mo
136.329 87.4399 137.691 87.0688 139.911 77.9321 cv
142.646 66.668 144.729 46.394 144.729 46.394 cv
144.729 46.394 137.187 65.7397 134.45 77.0039 cv
132.23 86.1411 133.313 86.9277 134.821 87.1841 cv
f
123.845 0 mo
123.845 0 121.059 42.3423 121.059 66.4175 cv
121.059 85.9463 122.306 87.1841 123.845 87.1841 cv
125.383 87.1841 126.63 85.9463 126.63 66.4175 cv
126.63 42.3423 123.845 0 123.845 0 cv
f
155.103 88.584 mo
156.038 89.606 157.357 90.0747 166.206 84.4038 cv
177.115 77.4141 194.605 63.269 194.605 63.269 cv
194.605 63.269 173.727 73.7139 162.817 80.7041 cv
153.969 86.375 154.166 87.562 155.103 88.584 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Dave Shea) ()%%Title: (Logo Red.eps)%%CreationDate: 2017-01-16 3:12 PM%%Canvassize: 16383%AI9_DataStream%Gb",Kq-GhgZKQ];h>pSdL8KN6&nGfD:f0Ks#oQo87N5HFJ*2malo.9Bl)#h_IFg[GG?sN5kTlFh;Q2*F*N-6JfZZkGq,_"pYEYRf%gEX(rN`5XB,]7ZaX5ePEV5b,d-C>(;(8R=2bYBt9?mLl-5m&I$N&(lU<E]ei1N'pEnr"[#=qqk&"i![_MgtSEqfVoHPk=?KDE;)$%D0+iTYoYuuEpSCMp"/mk'r9d*0\n6q`m`>[AiATBPWcn%iT!H>!UHfe'EA\n`fFp,iH-m8Ra_7t)qAPnGQeK74nQ;(Xk-q^?jpHt%]]+(C:(@^q(&i9hgiHi_eXGs1a,Bb_8*H+C/8'B[!h*'G5<=o,_kD$PS!u"-rAB@M"%pE:9)L3h!0]dH!BN^)"(@Y'a.ee=+;'s`%aQ!1;F+:+S<N\RGG`8%Q^M]&2$VWDtND^JiND&[u;i^=ja(mXapaCtrF1iE1;_Sob4Zi%\#pTZTjPRI6]?btHCTtm<km#EnAP\+F%!7Wt(IlJKZ%<c^&jQ>jK!ub_n(1i(P4$um'2o&]E(:M9"]P,e^1i<iE.&k\"p_uSTE$,i,Hitum'.hTa5Q2SI;ZV]h!159C_$WCJ%aU8r`m0W[ubp&Mtr[#O5Gdq/DlSUU;L(>]4GV-f6j1]Ei%bffjaQEFU5[0V5g;A$LScBub!)f2NqWg=ibTt#dWnbAUKg0?D=VUXf%7,W!<J\RC?pq'WBT11$o0A$mGr!c:D&R<JaYVg=;0X)>1^i'V`CG?7!`@rhn_Fu:bSR`Aa8V/&:3gkZ/P"Aa`IY,=CX^Vmn.McI9%@M+n?Mm*]7_GZ\RRhPdTjXc>Ei">#>ipkqJE@G]QQ:J_G_;DI4S.kf0CV`#f1W<pE7dr@<"(qad_g.0-^hr&#i,AB"c3XE(O>*7[%A2kh/)pTE%KhpZt@%S:*\:7Tgc3sW+F]]DC'A!JL*9.lG&Ru.H`\$`)n`]Mqn^qgLE9-!sM)Fc5X9IblImZbO"nA[6).#&m(Y430%'3?#\"h03WK>6A(3'4ePn2DCKHief8>&\r[2dSpH,oEhqJ(UMe"*!<FrJ56Da+po0CLOl4Gel2VUPC)7j21b(aPqO))WD:/"(ruZ%-Cc)mNG"5DiV_VP=:<S:S0,`WD@:s33cK7#Vb#M#hSGSs4^dOjBiq/GOkSa70r88]&GLmgVAScHF;X>R?]6p'EcFOd\`'g2>%6q;%3c:#%nIH[$hO0b"nX<tC?jJ=[_=T8HG21+"'R-UjZU?pt[#_1jUjJO/?u)0b`18NaZA<(;*T2`A9Z#@92T2kXit_I1E,j'?QpO%,%0BS.#iJ4:MM>S1i5R@XEjM1K1k)@:K'DX<\M9#.1q(M_=,k1Or6L6cWr8dIZ7/i*o$3g?5rel8Bc;Fs5OoOF5EZ'@ns5G+mqSE(L%Xr[G"f+icO^Yuq8IWVq6NNjctOa4CR`8P(qM,A[n$D/O%1I+m\@RPMlQ00UT'.oOdMYL,D-p@a8C$!fW8aJ/OLX0?Wque05&/;YX%:dlfa4H%!9Cbh'D'T2*Q%#kRZ-4nZ4IYOQMSDblF$HT.[8W"aC:I0u-p^+@S_j]L>KGoD;D,)pnLc@$n,ajF[W'&'D'ut/6,lCdr%/&]69_7'];CEWo@UZY3RYJB(F-q8)Q@*g=EW&G'mVPH62R]n134=33eijket=?NW.$aBojb.U>/9)(`W,Il>RTTaa?eq)/p:5gHp%IL8bH(dXj_&*"O`[A1);"^rO*YpQi:$,+2UJ9YH:1BHC-&CWA-4f4OX0ZPU0S+m3b&a*(D:h\oeZ6-:iKFoGR+p;TgQmsLXWT)P;%GR\?)r=H(:Ws/A3lO1,J:HgD4"8XJ/PGj2fG>c@K;MIZIR"jZZ-!(_.#4lF1GiDocD^%#C&$JeBY9BX,0SBXL0$Yf(gW3Ja4ja><%,WTmu_^$.G<.H#7``GS*;()GV0]e1%La$LeZpP!ZO>p.a!VDfpf,iAL\=\<b9VKl?Z0$QXncIu@F=)q`;dtl6:@qgcPU*hm]9L.D%/s6o\6fD<'ck.1qfG`!fU)l7p,sEWR"j`Ye0TaQl="/rH,3LN(Vs:V(.hG2tqo*WBH:t"&,!8AKH,KYm(i[0b;8RWg5=N+!>V<+K%]FGWl%G)e]-jO1<_W-BW9F@.VfMk1KAZW`$MD^SpH2XI7C%So07%.$qImU9$11a!,/+s_lpM2U:C-lg/(O6d0%I98l&;OXFd/M2J%]`@AMs(L@1NQT5<W#"GGQj+,27'n<>PBIZlL\O6$cCj^G0WgJp2#lN80an*MpP9(mnT1Z_,ddU]j09mRob=)^_[qtCiGW%9*tpUI%%B2ZD[JUh=W^[;J'LR3Oo*f1j,E)k*$Q:2*V2-LM>6qQI&@XohW;%1HX\"P2raW&/73gE`+\P74`RMRWik36MMVM8MHdVV\cl-sh%H2NPLJD+](p6[)jr*pF=#gGfEn#_(m`Z`W*"$;<:jX6!<6&G_t).?h$>44+sA@WuI`UR&D/a>r"bEOLT,p]A-4tpccrE#d<a9D*k%=_u8(4c$pZaGa#^Z^:>DGpP#NhYt\`^.,3,!F9AtL!X$2-Mq6;+/<Ld@7P27;st?%6f#")Sde>+&>ld8;/2'B,8P5(>=1GPPpj"U%,X9NLN[\.)H>?EoW##?r;C^g/0i:<oZ*hSYja-:I>*S8,?1(,DjA+CAp"!K+F(pVtqJ2k\)LNa:_;4?\5oBpo'(MSN)cj-gPYSfQ%8C/`DkIupsbjhdVF@hL\i)ca"^cl5U/hq+%FPENnDaJq^h^6jDP\`o>9oqO`rj=c::FuF/<Z"pr@K$.?[,8+N^a`?A=<Ot1@DrB:%PK'&13.ep*J+,\ERa\'R@]a2O`s?O+V,Y;M"s[O[N@c=DBouK_C->f$1aJJCE]lN.$q1<R%o\h?][aZe;,N,2l60n>nP*h,=BTc;%k@>+U,DF]%U7kSfAgd++m*QL99I&j5HeB[:J9G^;=(?#;Z<J/%?7"jWH'Zrm@g#26*jS3=lb`,;2Gd5H,fp2sAJ?sf:m@F"d/8f+%r!:K`BL+of(okqdj=cGn2P^,]A`k5^`+VDDe=;JfOn`#7@sHK,Kf4j+`+2h5:B[Rne(S\hp#W[(]@<@O./65rXU.cNWD=iI:P5_\%Yp*7+dYY1Jd+uNMQ:6c%%*DI?)@aM'(hr>.KriKk*XJ/LMNV&([_S/eGDSUY/IPMLN$rp#,C,GdRAL^FQ8B6&F.h/#3rF%0S/8#a%MHUb2W>,=hGuTrF<FLT<IP1k#-2"*?C#.c$.71eCA-J-^,XZhF`86oX5WLT$+ZtF:89MupgXG1k,0*Z4#p([+*VinFCl3A#SnIR8%Z!Rf0(%FS/78*Y;Uq[3=d[hhg3<H,L=QLFA]L?!MK_)/7Ce&j)d'>?W&0jpjjOK8&4&S(>1]o%Z`L]@hBd*]f1b#"D)!_ZYaT77D%&R?W"`n!o&UJfg/d`IVL:R-@W,WAL3p5T3$:a`NJj[*7k@)ZSQ0+'<ZT,8urLrW6unseRQ_AJQfVW3N;XJ]f*LTT,rfksl<@?<CE%lC0cF,Ir`2Nt>:&m>9K4\Y\+*NaAD(X)$qp:F(@MggfnIQuR<&U69p9]Do:K9,R1%8P/O-X``3'MgM+<+q$RXmD$9fJqR3U0l)d4%/to3).k,U"hqXg8,UQ>];;ot\XK>Y2IB:DH37:)PfAfO:/^C0^Q]MWm.?fn?>+EJOrpu\)M2l,nDGA7X6VM2bk_";1-8JcO:Gp`i%--&DgZ9icV2V=59d6DEK8Nhpc-X*VaI3b%V-e[L<r!hmB.!iq$3i*Ke<N3rY+u+O5-#Woj:q8Xo*EC(D,op"ZQrpd,R)="m[3d6-%(/EE1;@2$f8^]pj,F,q""F&3P#;Z1gcRt@MUhJ!eQ+hP&\R8^c]N"G8M\-=PO-Wi?BQUs?#:01N+a#'t>$X'_aB2:i@BghFb_a81%;NJP9V/t0o_.P!#:$+*>/;@D2[-I6.mnHCi1chh%8gO;8BMA66S^jZe6.i27g+(jC8lCUD.S+nkU/W<PVPlO70VS;*-*Z<U'-^B]%IY5tr[eN`tbu"d^+al_`=3oA(Znn7/,YlGP&qssa.<UNRN$\F-.!DblR^WuJB84*jGRGCEa'a<)T+A.P.@*XV;i=l:E2[!6+%YR*%M%hCNdI1S1c:,6Xqci21)R`.-n?j_,'J"JZKlc0#Gljb&CPV+*&XJ6`PKSZ.L#Vg%omh2.Rf7?(c61LSBH=Q#$Y)rpEr>*DD%n4i%dT]Or<goLKSHO_6BoS'(/MQ<fNT"5A:Q=]*WR=NRf/67D1h5fPAAf,tcshKbbRbVVW7%bc'Isth\q^In.UrsMSeANT)`53jN3'3#%b>3,E#a*Zr?-^c9%g"ss`7S4+/"AX-e7*tB,Q,rj_JcC3NE'YoP2mBZhdh3EEL^JXSQ*0hHX!V+=EU0UAb#[pAID-#H?hV#6^^_@%nL[C3V^33t0@*SX9Z:l6@K[X_+CNE,LDGQ.:t7h/RS)=#P'17_Jm?"#KFY.2Imr`ndq^+d=5@m).N*4SAhe+o"Nlke9'h@?al:l#%"4:"KcU(J0<M3:mZ>r`Nlm0#M0_u1S&^H4ikXqLKA.rm,#:Nh$C*":qjX>4NW=[[Nf87EYni!l+=l<Tpno9Mg$0i1!_Qb@u[dcV/%imd.CiI[@S9X4],j"qWV-V(b"ZCUD43Z^:9Suk2oC@-YhO18Yfg4m')8bTba,S0ZN9@\8$]nT\'1MCbU(hd8SI)",/-?D?B>2s\(%U/%4*MKb^MpIdmd*F.C.k4!3K3f8(:i]SJU(*]G0Fsi0Z?jh#935I2j4JEH8BW6tFSjLYQA[+[4BKT-S43^;I4h7c;\.L_7OZfC4%Es<PL0GYfj6\oopArjesoruqeN:>:dbtlBeF=&i-KP\19NLeRee2U<6`433is$H]RkOnV%3-+]g.e?^eqN)q.NEVND$YCZL=<SX)%LsG*0._iO4?aLqh>*=]Rd]B=1dEn#4'@;O\9e:PeV"Fr";&#=tcfrlUBI?FgQ,L-@1g<Gj)J!@t8fQrHT9"4lpd#aN/5`J^RXpP&%W7^'f>V<uOagrog=H5g]RmKun'h%aTbWs#1NVFnR8pYXPZ$8;qls,+N7a$C-:.,$!8pV238kJ9N.>b:3(rMe-5#2LNC?3Q,Wri*N%OCK2k,0Mh?d+G#n2+(WAq8q'3CEAdi4\UD>pRRDL=HpJ'AAjlW=(Oq&.*1+K6lKK?^_'bD,+TG?!mP#&f3?=b!\Nu+S,b)(/C-iU%[1i=6EA<)a#?cm:UhK=Wl/E);8Y8jOMd(+cp]VW#HgbPIC6.QIKbq0:<0HH&V]/H3i>7tpD>q)M\auT8J?u`\rX`&8h[Y+FiS%dc%$P2;oXj)+8"oI>V`t/eDmIQhg(P9ZjX8(;ZFc$!#n2%U8ITi?C`D%.A!j)$i59JQ#qu"k^FE?0.pN\iH/jXB6rrOKpJ0Pr?r6,5h%rqbAUQu_fG8qMo7.cK?!k3uPApr3s'?JmcCDgQi9QqCbO71s_$0mX2ms(CuO6k/:fF,ZdZSqII9T(;gU5HYf!>JCD>pn%u.fUkpZ%?[RA!4W\?\TM[?7KZeN^X?X&-@QIi?A9oGk2#I2s4IgGo5H?Y#1P,h9nN!2%!$NP`,EI"&>JaH=fj!A4-&5m2^KFOB,lrtt!+R9W%?Q`b#'6e>U`$Op'9^=oADIj4+kDR+<k_hT8F2%]-f&'0QD]X8hVEa,-ITra.Sh7e6Kdr>cegA*NB`^KSgVamSeSX;-ROJ'^+7SA!%I/!`'rjG>afCkOib!#l&TC-RcF\5FS>6o;R[*9Wnh1ECTJ7(k;n4`#tlq]XG;:$GS".S/jYi(UD[]NVA22AVP60^jk[0m0X!$$j(%XZ<$]q^ba7_F9h'+di9S49g=8%s<C1@hmnLK`uNN,^p!!$,;IT&0$&s&,uQMh7-UH36f=Ih>OP1F:O01J3EG__.Lpml/@Cto/tq1%Ifn[9n;1>dn*tM<F)tTA[YJSt1K#\"[Jg8P/1bq9cW@fpqYVfPp.#KU#AT$gl<jMS7]ZuiYB9'S_;<&ZKTW>Mhu8C?B>0aS((`9-%$n'iO$>.5FrdT)tK/%\-@+`?O!-&!Ep'+7.I"#Vn,;&qHQj=X?_UAA&rP=`)6MRFYqEJ\hVuF!7eR@!XR%iR3L7?_>1&GTDftWRX%;l`)]>G01B>KeQWrnI/N(s@EU;#WE?dadO<s2!.Y+5R4&l$2tfSJOepBJ:=$!@mNJr`"BMhq\"mgWJrICAtP5R#]1=8W'Cik4SIn%[/RKh/YV/g4"KjWasN>K@q@uVroqP_(Ijmsd(_.%Q%+*8?iq,Z$\N.%(2KQS1q:jhI[RI+=`(YD%hS_rla7KII`S5WJ,eQW+3:C1%H3c<Eh&cZ/kg4;p%iiXS8FSfFTe<&pI)<g2OdOLF^6Z/#q=S.Ck=>4hI!`@dC`c4H:a31-CZ2L'"CiOW(@[=HTH].b3lB+(3A<Z6%S$i2&45S@?`$g`e^_'gmX)Il`J$nG6nUD^cP$NMY3GoG(UNAhPcnp9uEE;DrU,<pa']Z^ZXI!=f`Zq/`aD8LS?S2._=bhLB#f\+d%CA_G/`DO]i2I-o(Ei*uUab:JqdH%hQa8a-3gYBQpp@;n0mLR=dnbS<RGQLE4=)r/O"!r;h5QBI0^GpR]YnU89c#^iIJPkp:mT7Sc%5^@>]GGF7ZW$7]0FM(L7Re9_q@@\6TR?mg!80[DJc(<go(XdnP;f0ssln:@?/B_icmE:D)f#=9p*Uq&JH(O?b_.<T*[Wnu[o\i^A%E"KbnfM78F,)l/V:*dc=*n3mY-LY8L7T+`?$Xou-,S?/n.kXQ$5Q@e!C.WJi^KbiTnRb7P/+c#Lk2RUm#9o)Q>$^)-q#F!B7+QP7%OV4MsZCpQV;GA2U4Ra.G>Q^E6oV_Z`:b<bh9pR"%/cOc)-$6AoN#N2'j!@e?BR]pg&G6j,Od\O7/HD!&Noup\[H88=c=5lmfF@ri%_pKT/(kSMXnhkSHSVd]"i:n$("Xk*7&.mrB_2l+Rp7ALDDAI"VEL8#pq*IQ(I6:"5?*)CULV\!DlU]b2oc("R0lL%##k;%3n9Igh%1G884>SZ_*ci[V2Jms!scAcU@q#4q8km8EM@TKX@R0kj1)`8c+iTV+oKNODKOZ<ccp2[KN'aM7S4qb<ih?jtF,0>\['s;-d=h+=2%fYXc7d:GXlMDH[r<sZq%AI.e@.>ImPd"nPmem#8S_%DEXBUBJ,K\I>+CaRYu<>6s#QD5<GT$AnuC,rR.*4t^9()$>_HHRTV*5d\F%JlA>=>H52>#dTU"e&F7jfoV4A:$Q1d_-d71=SM:'kN@^Y)CMQYXfAg`d@\AX@!":*ReO9K+E^,[YQM^@cs%`oio5#Ajc"OUp%k`*%GWk@GNN;&"]P:AYeK.K]i,CCUb]aLRPEg,^M+J5TrLomD^rqisC@e4YJqmRBD__;hnItDcmfi_uJuYbJ$V:I6QGt\s?GRJVrFPKQ%@_KPKa0to79nL0,!1LU/rIZ$H%4&-TPr<$tf&O/+!C8cD8b]G=f[>in'93sdTeF4t):(M`-ImA#!8F;!;@3YWIV#nL@7>]%D?TZs%.>(GrQC*>Z\ceM,:n(u0N,Ec[X-I_T(+RM/c+GY`C(%Gk;/<EIjW$30%ObrnpsiaoJ'QZ^d<*K[0'5XXICT\O/I_-1PqcFCJq.K#%9l^`D&i+g7k.d3J?HnXp:7tVYb6mhBo`X+tl`F?(P3ZOf=<A_Oi`F8C+4aUA<)(l6<sJSN3"(VDrc%RD@_`30MMq/:W'A?1hH'*4%b8Bp]FTd7!Fb6`grK/$!D6L\Y9$jWNom#5=p"9;=9f*tP/j_O38NT`Rl7h8/J`qdXeSN=2NhEVDWX8n+1Je]TVn<tII"6-qm"7Or%&eF>1hLmP7p9K9]TNil^Z(>^H.Cdnd$=P7A5HuIiTSus29iG6=l`VrEq(HeT$0qFWR)%F`<l=p$'4I<[1D%.-dW.DH@mJhJc>^KQ%67Jk>*`#@_S2UCP_2p.13f(hFa[TU$"'S(3CfdkeRWVZ#JN0]d2S5N#IrSCSL--;?_oK"(SGVTp:)mO?!#3nmELge\MM]&,AF5)+%6K/s@ilK6S;R;ZeNl8>)6,:^p/f%09%s1E2ag"qX%2:$d@:_-8<+3/e`S[J+DS1P*LtU"-Q5B\'h4N"^hdTd[F$bp[?E@gqB!L(Q%-Q;aaSg`Zqd.@<7HF;Ii6oK5l)43M7WKAGoomi25)!@4d3P]C1a`n,nQFVPTL=LOQ\bHmELW:>9'ZVR^9W`ARYlujs^#;3]6sk%g%.2VYl0nAf1g.R<i6FEPPY#@hs/>>n?rtfkgAFXn)jmpPcR^uR8e*.()'FWcH>ZV:QHaCZa6k;K/'6N7:\AeF[47gK*\'`\\77cX2%f[AdJ3KEO\3oQa>\<'HqFLuF>YRh[&A(J"8le(n#Ht5EZFfW,K?TtqQSnNiHs4MUfb-pSL)@[Ole/b_Y]BdF`1&U/M1J[@>7Zk-9%@FS=@hl%^$+9_Z=7P4;8\[Ir-T@iiQ3M9L$(i6^s(]:(;Ckq;a/!ua:\h3AF$rl&;D,L2`>o8GQ"m7`ka3JIg'BnWpQB*I$hm9o-%L#Z3.4_1HX+LBYqa#b%TCS(0#iLP7eZ4?_HI-n:L1R_]7d#`u=h-<Xo7S:8EXGQ=7F<e?-SVa]f6/XU)4lAu_+h/Jl%W`p)0`2OR%,1]3`f(a<&,j%h4[t"H1)'SSQ,6l'fH3+:4]GB9(O+hZUoE=F@D?Iq>32t2\6]+:$Y`Z:D%XAgdbo`.ijE/UF^;8R\j`=Q\3MD-P%UFoNO7;cWu1>#8\0HKS3X!<[/gX%gWW*3"=9'C1\+B3*]HWJ2O/(SV0j4SRIT0.-@N_dVr)TM2H7GW<#+,,"``\`FMhK*$l9qBgq%_O@4ZdX3jZf)>CMW1rDgKb6!s;Ya%J_2[AGqDI7(d&l()G!1qR^nSPu6H0Aa^iU%(X#X'Mg^:!o8:$D'a].XZOKNtZ?A&p?-K9Aq%@_G*_gn1-_2DM<Q6YfhjD!3\j&m\]Ol#(tQH"Vnhf^!J$0";bc?oamjYd4<-c->XVra0U]rOJK+>p-2WpK-jhO@!/\V-pI!*Ull2%')Yc3qm4r-QTtYW"(d)%<XJ%0KDXqpk:k&0kf@ZISOlQ=J8Xc?"U$R@lsg_BdC2pKIph2:J%5[iN"qW.B(ugj=.>Q'Z(qd4pGN9R%I02sJplrB4YO%bS"D2<O/MFu&+"rIQKY7Mk\O6Mk[9R`m5SJBsot[;4)[cFD4@t4cd*NK8hkC.SlnV?I'ulu!RVrpV[7%+7_(ijE%kiM4-MsoX[j%B'<r)]$PgHZq&=(^?hYIW\NFnjdqij^(8SM?[MR5n"'3gK&SoJ4sAF^=2*bqRG/l0F!Y*0$Ofe>i.>qXRQt\b(6q%S%J/C=1M>%%b[A_FMkqQQ*/\lYNfC<G7iq?`Gm4d/-U[/YH=rGUFta`?=KJ)piC"PqKXSZT*,)jCsc>cRsb2%b;,t7[M1lO/Gr1I%O#CY8PI_ZG!]u;f5N<8u0<b1p1&.F!.9S=sQFiNgDn4@I3:iF5c40*BN';)RKIlg!XD7"km4hq7k,(qRcbfFfp`4ho/(!g+?5eP;%^U]7qf-?"PL:f"MJ%[MNVt8eDD,bQj!f<PUHn0.sa('AZO#An/o#L,:QA;_,GO[cK94-bNO`Omg`rG#@'jVigaDJTCLTAnmoPiHT%^e\HIq6TUNHO`uJI[hLPIAFmO=/3X^H0G\*^=Q)nd5q;]j7hW_=5OUZP=\!Ojmr#:CZ`fFVaL"-CM"QILK:%04?op$I?RW4JiG;e%XW@Jri[uk_(njEuEA>rJlPmR`\-%2_0TA#(GQuuY1KUY`S3E8;ak-s%9C7Enc,P["GMgBWkTrY.:>ZW8m+_moP\%M*E(OB'8*4\!%nWYV!4A8!_c%f/K$GW-<QU:Y/F4T;sk$]nO/9jZ]:_fI`)P#<Okd)qc?3m/U*m8\2^$%,!?sn)CXoZt!U3tX1fh[qe^G5k\a36tu%oQ0Va<`0hiJ9P4R$,(j]Ke$j;Dt3nFm`[hq`'r([R%mLC+]JQHE>`>ZR@dp%?2F)V5"###Ekh'(.klV$h*na$bN@R:_f`\=2S@>E%km1DiI/L*n$JLH1b>04H)[Ss#C)(:U5*:CBVEqpG/m*<pqJ;Ee#bM*5hrDnOVB>=86-(rs\JOs&'V\B)Cl[\n442RNj!@m&6u:('%@.CmY?X](E=//YRE>%^aT('T`:c;t?QeAn%dPP4%Y$rjLX$Ve#S1HHujO3Gg8\TV\hJArb[?:[L`J&g$*Um2Nn?Lm/33U?Nk!$nl%mdm9Qps%SYQNu#o\&@gLTAl<-Znr>Q%LF#49"oKa7auSnpgE&UXTqM,T6MIHICu50f'f]3^O7b?Zc17k";S'M7Vm'$lQYJjYm-K1%PfZ&1YaKVYo3A6&:G]"*fUQ=`ghj#GEH7_Q]*l\g,1L8jENqZ1FhJsnjBkuS-\GsXQ]Bq$0TrT@(8&S9C<Sq\)0flDT$pkCSlM4P%S^5)H^@sn`](T^<T!-(-^Kpp_Mh"]<_cp:<7^IL.j/Ne3BA>$BnEHr.q=aL@/,.Dnp"=BFm`FV(n58:K#p%3pIrRi^k=k.IXSF2G%*_q11`=C6!RJ&@F5(@Q0!.2r"o(UV0Q`PD_Y6+F\MT5,"]to*0gR?le":H$hHb"=tr3k8QD2/iM_g>_dbe)^H1>na8HQL3dRKh]\%Et3#cfK`FdX?J2--mT8Lg'`RIAPr01LDbW]]19*1T?_i;$kkq'q3F6(094(s,<.OcXO8`OldYu^;3#ou.@eSJGE/`5YB/"+oSO!m%[<du0B0:/op-s*6K2B3`]tP!fhE1PS\`9bbHd:K+iC^A;K:fH"`5<IM)l,+(IWt<[HBts!Q#1J7oF-1#5c.XO%FJ7SeY)A=Ba1u2%3[hjX"Ull1&RaY(5j=m.4YP!_ap$_FYW@/.P.E-Y8iJLFg^EIE#pL`+4tF$3UFL4>9f++P"u$hn-]a#aVhlc0#6hB]L<n9RR+r&N%TgfV6Z<!meX+2o1Z)'i8C6OCKBH!3m.WK#Z3/kiP=8GZY5muXMlK*VbMnF:;_kjcR&?9<G3E6H<gH];kYgG9=Ss8H[TNTBD&LaXA%MED*4;n82s/Wqnp&j0^s8X^C^<;qbh9Tq.]O9M`@OCff&MOJ/I>]c*n_)"MA7moj:ShmHqX+aO'::3).'P:=nP]2d`K"+d?VC8oB%V5d:EFclD=5r"6sc,s"D.RQnj27?+\)IZQR*gfLg>ZcYL"P,'&M(ojq$UQjUI>CB"G#jM%U8^^gF#PjB$\C*V+a&=TGg@YPSm1gn%UL0I(S9YBh!XAW;&`d7R5L85:Ias!Q=^S037_\gtT<l(IG[b_pS<Y/28^,Ej]#j*[H,94*D/V%$2''F%_c'PLAUuX(SKP9@[?X/2%"-a3'"0B3:&aU`9ZZ$No/G0))!ihmU7G!ucVk4oE4u,.16?[m"69\p&fURf;'brA,r1DA7rUMm>p/:*oq>5H<PAdR=Za-bHE[se\%CbFsWMFPRu7lJ)##ITolDuR1IBL3_/d&psf_uL/ZC158Q'$<[+4m^tej0)PYV(:F"T`lP\X1m-TouB.e-OV0b3%(!A/]S7!?\9d-%Z2GT*Ckn[gm9j`j5j^nF*?_S2]^s.n9:pF/<bU99!GZ]O[ts_E#^u8QC^fQs68g3*%*91jVhQeiVu/,NqK_EBa$36GrAeqJ!WCRg%"us_R`8gTe"WUc4erKqk[P`Js5ljRnJGjDl//YSO&'1'N!hN'?_-J>`!>MqG=7P%s/V_9u9M/D;-(YgZa97TQOHg8`^rOMRBN>`A%6)TiDkWENdRMUdD(l4b\ELt-k/oQ8PFUBZ-=oVQ<s270d'<YXE',p]!O'X_IWc[9n^`5#V'O?Q%X23XQ4Kg4Z"k-RVm.TJBo\&b7%!2!jrZtE@X3tPPp:^/1"j*JI"TBP[C3;`^;4_;h.bm3W0c4\"Z?hhr608]J.EE0Mak.k65ZQ$`rhfPFb]:7@R>Om`k!h%[Wk>Zi7%))S<^IB\rQA@9a7I\)(4.=T#m;SHtDf+TV!/I5B2=>*@NI6b2YI`d!q"[+I+KaF;ia9@_OJ4bf5;[Nko)i3log"QNY5)m:;h)!WH%DTJrl%,Ue4+8W`]#OQag?14?boC:S/KRK>.<CT2\>r"O5lSt&@%F>Gmg`)]7,km-&!$AiN?>\%5-gq%6"hhSC!JpHLgfoL<\TGk,%,b/CeCjM9DgbaNOm7tD(3_2sop,*WeUT"GCm]:S>fUU&4]D0mNR'9Pr/acpXR)Rl#+[(_&qj4%Fr-;ufj]\OnQP^"`]jH;Q=\j+-%AkTCAg6_3@H++r#Yjr+)%:]&I)SL'B:TuHSk%[g%hN%`KeBQ<-&lEN.KUin_f,u3M_")\(/qonF3>%l90(dE%ImACaKY^Y\)1dE(%An"T\dtQIl(.^06ic,V`ghn=^!7ghEZHp^A&e[j74%Mufg$*E!Q[8QMVa%57Y?^@L,sbt"NG\FN^ue#tqnh6%WX(L+]7l]<)qaE@%+]uMBFGX5Y2NTu9S2R+>n/5N3\$&Tgmc+i,7N2WEbHl5MR_P+OgSI]8Zg;%(Dt:/<rhV_n:-C(L8aoE&3@B?N-;WX%d*4qlh8mEL%QjddArkb5d"3F9OGoq?*NSbDA@)X5$?sO'2#)f6M#Z+44$P\iW%bjX+LX_mCg#!ZLj=a$kpN"?s"`US%q8?\:'b".cr5(7o`'>D[%TD\srpEJj!'nlmP)D-T'j=;5@9qX22;4iAF-I5@DFkb0;Qc\aje:`-e>sQYZibm`*Xb<^M7\dfgG*V5UM+TtDfHS@0o'K=>>aQj5%',9j6*Tp>0G>kkV"Gb[),'6#2)*Y`a9iJXKhm[[AgU(t3.ZQ=:X'CO)p6eS9WD^AX5$U_6+X>'ppr.LQ;Q:2pRt^&N^"urfpJV;.%*n24r^:J,+X0:kn:kFBi$j&br1[4a=rj26>qA,'gQGFbALW3X<'[lh#YYT-;M=0KBF6;gTlFnYW6I/<$k)DlsBV1p)f\Yk<$d?rk%>(6KS&!7BC)kWC<Gu4"AD9gY=0Ck9E\'H'%@_&R3?lO]a8g'#rB#<QZ<uh@AT!H?5)c.,f[3p2LXM5d>I"lmQa[s5%cGu.C?chM%%@0S&]TQI5"6-tCaOs_sX[jC\U=CLTPb=V+G]6jaeE]U,D2*c,7M/.N>LiuQTe]_gYASJ#nR\t\q%_fed-FFe#IZtZ0^120k-k3AQ%Y7jSg(-)OF_K/TZOU<HU2lrq3>j(G/n;-9b;nj387^Jn_4L5#4Es"%E48G'804r(ZO7*pj;l.qNb]%thMkAF1nnM>HGfS*?j+G*S%o@*LAEeg[Y"fsmMb"LP)6a*>4r??np2>XHj@*@M)2k.tIT83mOkQ[Ql*F^d?5$MEbb?1apT/sIVca;p;\9Y]A]JN`jf1q3R>:MSY%Kn%S<Z8l[U")C(BYR[j$$r#:`Cm1[2cA?q!D0VHk^dbtS%lQ'#mJ+;<G*R+u:Yu:#UfhnYQ;;tEhOLmJk&lT)/u*s-4E=f>8DuQY%mmTMO!hX!,$_?8<j/pd>*rN)$/cn>"AhUC:Gm-6e?U:N/A:'B.:@_8+Ti6-<#&fTcK[n/<<rQa=!at$m]"5S^)?njdg"$9<G$U*#%a^!.F^2L]\j^b_s&_W'XT-</dcM&,s$38\80(iG6f8?p*Q2pP4fasG#%JC74IdRWD,3XsulH)`f\eMgU^*'@4bP2mTfAgLo)AI;q%;^+.hLQ-"#3IDBui0^PT3E+?0ECmKNs+tR-Dp]CN[[3abem5I)a[J\+HM;^m$`<aN@/5Y]7@H74.a1X#5D5nuX"Jn@>q*r5eB;@_%U*!1gh)=l,9o%R@-o&G8RuLK7C_^PiKN!X(\994l21XH2`BD#hor)l1^"f>WO[q)k_t%24%@GX\T0L&Tq]E50_T[4!#\]@?#jp[C%jpA-]QoMQV!@.<oekDc&q<WZ$XEoAIb$DUk,r/r%5J6<=4l7g$6?H-+Q4C.+$(Do7RCNu]K*KNJ_Tu"6=/q8Jetjn+Rt\nU210;+%TCung2(GfUCC[W4Wt!Fq\!>R"Q3Jk<Z2Ehld[`UPkNr9V3LkdpG'p]#;mht7Kk`gXErcWjYar@N+)KSjGBsI-/0Z+35Ehn-i<f_b%L\i(O_+@@-J8faRQTi`^Vp)`dcEOur0VmoDr9jRdX0M68;t%F94:h"^f-TFE7t<o;mH:5sf-2)]XG?A'b%_C'#(T$AlTaK3Su7cM%rT`dZ`*L$Ja:!`Erf8H=d@X(I5$gTMC2eN;[5Dci"NFHLb4aD)!B0-#g<.;m#&P'u@78#+#t/hen=9RXq(%`n7/OASB]gI1?a94-%ML.pR9B96=PfA)C=HYFC$_%eM5o.4B/q2K$1Ug%`Y;QcbCQMtR_o_f(Yh5S4]]7?mIM"#Mjlarn=`R<4.P7mb>:c"5rHoe#4Ft5.%$=[3FA'O1]qkG'=9:J%)QFm;<LFZ21kP8m95MMdH,^g79'GM;#0>QLLS+]A_gq_]A!.&ieLj@Vai+&N]l&4Jc6@&H-^p8L&:B#^i%pgCDBSdB*d6Q?nI(QGa#XT7^9L7ZN4=bJ=KHXFenA(b5X<GCs@h1OOLX]E$HjTje-de;))]X0YMT.g?aG^qqgpq,f;:jjqsMm!'q%d#^Za."18b6[H=O3mCM-m*q&fFb\_fDSEaWQ`_=#'KH8#Go:38IR!Ep,d>Q`4JdW]<<b;"Sj._L9:q,$+*&B9qQC''?V!HNE4`C^%0&Q9nB2:j#I2E%D.M"Hcmtoe6Un*J>YL775s,^.'7=ru@02uCb$0S)Yp!()+WHUZ`A-p&7WT4l1Wt:6X\1PCR];O_([EJVK=8dni%H2\.,q@;`(f;u%4A?.N./-6%(j&rU.jZAHa4\s[Bjl+!>Jl)Z3oVM&!G&e'/^'F>=$\bMU/Y5VM#<)C$1#<"5k6P2BTg1iWaE+FF%3".+mcDPaJ[n\)1YI29E\$%_/f__db/gLK#r1Z1Qqepi_-EL$4bNsMNZ'<.gJr]H`"2eB'^R02;qb3=sJO8RI53ead^E.YSeuH>9%jU0u+f^[r&qo._=rg'Lh^`84*R%rjS".N\A!n@1oTE79Sc>_jZZVk\.1)-mE?Hn6Lp>k.#*)QrJ33g9Le1X]D+cpUShobMQmoE7k%"or-fnKe2iX\::PTbpMpM.U.e0,seE"8d6QU-cS0+(2MB#lI(\0CD^MWSgPJKF6.ibP&LI9S:K`H?u4JK*C^UV,H$6\S&VsSk(a!%#_ZGJ#m'C&EoHNC4=;0KmkH6ep^B32RoISi^O@Xm!n9)%Kecpml5lVSEu/-0X(sE!dKD,?7lF796kY#CcCRn;$p"u`9;uZe"/Z+F%B/>1QIsH+#X!_!%7.oOoa=a'Z%qYb5R4:A+h):bEB80i55!Bd/M4EDtM?30/kc_hd9c$SR(hk8AT\?9Ge6)6gHIW4jphNhWg;;=#%8%)$olNd970fc.$k@)m3XULMFUK/02G%0LT<ZL:9ib2UiP@/'hW'h<6ko]E&1'Oel-"X!Xr7go1ST^orpj4PlHOjk7qL3Si"LkC8%\Pm*FY;ipO]l:LW<S5E/GM3J?7Si64=74T#Pe153r7:t?:1N2L^8kJhmPNXGU0,QbXkDqF3s)G-=o@,tUGZ,1D*O>.3b;'WbuR$3%fBEN?3IU>:SYAAMWS:#fkGeuC:RVQ<rTQ+)VbNLNL#,@H4WU4k!A+f(au/Pf8q*P=DIBrFm8XV06o3F`+6YPmfHR0d$Waacf_"lJ%/U&[C1@DTs^RmS0F?3ugbhU0*1co")h]dB;<WU2U0AV?U>VAk-.p)Y=fBSUXI"\%3pZ9Sf<i6Y$/8+'>5qgA\4_m4MC$eZjh)C4>%X57X;oRpMHSWhDf9<2!\PH+C:2`c"k:0lXVmT*ttNY&s/2U>d/hC\BVZ/3ZKc>a:SNA#-DoirI+6<EBX)fVi=AQk)8"7EPo3aiaZ%IEk]LQZ>d#;k%iN;Z0n?-`;.sl;la*[?i!$G++omMKtaf?T_:<`N;t7aN.@*\/omsO#[/CZdVtD19K<qc"m!PT[bLPr6^iTp#(-g%BHm5IEOok4%7UZK:*1D5Kl3fZ8uOL6S_BSPF0/@Ob=GC+dnA$)qr:1QZdZt<JQJmN^lr39]j?0dW.X$[..qc<p1SYrF8PY%<4_R6%G5AWWhP!]<I+b+WXQ_frdd*-oH?[+?g7@*_4T%j$<E+)JH9pAQIfbQ=JeM/)isjPSSb>k1($2='j>W,Q;:qjdCX_(1VEOC;=V'lA%d<UIJch52&IjT7u8U=C"k+'#sM4m[Y=4UYWFrKFC?WX/0dt$4&kXAkjNM,>)P[QkU\^_HGHsJ";VjHhW?\MfVT"T:*:>aX%.g:5^%*FHCH\H9HpDF<0[YS.Mb)s9GY;g+r(PTO7YKMGHi601e@SV$J2!d,EllnfWZ;qMJLlflSB2L&rQ:8ofJh^$NDT%8*CcmcZISb`1k%hXNTN(YY^>"Q7DX:?2">Z[C5G>Yqh0hccr-Pn!Ihbu:`BYQCo`i@LLa@&XosW=J&aS377tnh%.-WI?Kh;5R>SkMs$ieX3@9>5d`4%SHrl#j4^VNkDn?bA,/ltFIfSdY"i'PV02(Jk%sg?Z&ML=e%<_52_LZLqI_T!IgB_R->oEmU*QT6)Am6dB@9rf[S*%[:B./\eLA1N%585alF/i+E@uZ*7nVeP+FBVcE]ctpSeLnP\ZTf='`1pUaEt9Pec`1(?l'+F2bTa)!X]%:X>m)KZ6G'W%en"4G!Sg]X@rL3?M7U0#%pO42PI]-,tJ"e_Hr]$s61%+:\?(]nmg9!T=[r9kom6n;1q04iEE'%qi[7Y^.e%;qH,IonF)jU`<bNV@\p9$*%V-?WLchD$%a.'-*%=h=E"\\68r`s4*M_AF]IGeCRWDdRCQ?$\,hP/Xmu9IcO5T)Bf"79)R@7EIBECRJe1A`<.0dp\$HFT:Ro5J.*1Z8ZM[gb56.r7$Dn%B@.<ipOFmg1l:7)g!!n,7aoMRroBY<f87$GR%mFrAF(Ehl177,p,"VO$p6em4"18Q-`#gmr!Dc51]r?7F1*2[E:u*ig&KS2)`r\Y%q["_Ga_mlF=8blif_9o6V\E?CDKS!O:4\ZeO/.,C[u*qmmfo=`*&7Ce.i#cKFc(c9Li*mVdpH_Y.X#!`.M;SJFrG4gOm'L%h%Q?>%cHf;J:-gPtC$.tR<eXpPD+j7kUYW)%V^LgIV:_'UDNX=Zdj_LJJaG/<la3kM.Fc?f<(_A;80cOL'^?n`4nSU4:9eu9S87Ls[AmY"%co"Yok``4^2k,r+HFKfBC@CK<4Lr]r/C`]=]nqs2(3%P3\,<bI<,Gpfg@+_M(98BJrSUTdl@1[E(_O+&Nj%6p!ut\FKjU/\iP%VW%+_XqHrV,B%C7YP$k^"Zbj6ke@^d(hVm*\%3X1^uqqa0M9.llRl;lKl&b0;5WHbal48muYsLP;!;(kg-,ZIuOIp]WXPXD\K,/>@1V%r)]sD9NUdjJ0@im0rG]`K#F<91k_"I8i%mkZ@b]55TkXP8uE!0SjUW-nY6$0IaK7e8i8$IO@&!VPTTk@pr*.M"@XXP:`7nphL&gC%NcapZT!ZTsk'%]G2mh^[F-8=I^\U_PXVI)P066m8^,B1[s0Y*FclRcq[QQu3g9fHK=k;3.!gD5Z6^@bW#CU'j3A$?)N%F8Cp%r9b%Z=LP00Lesk,2>D(<Hl<m*o97>,p/*A_9*V`2Bub3=ARO5=0nLhCN2ph+O+67H>H@*eT`a&bAXG="<sS"^e4Q1:s(V=Abl"BD)`TT%g\pWn$gDch_He$_cugqKXhQAL\l4NWV<a,3VP]Se(tGgfk,:JaHUr&t'\DerjB7U%VO3Y3*6h*FNHY7nV3is)O:I$p^QsHY%O5gX%"eARs1O-(Pe]DCF<aL7f=sSUgIYden\Y&PjoUSB,IY*`2#/H,4(CS$c6%N=>nA/]AoKp7[qBq80$iA4of-*cSZVi*?[Ifgapm83c%iOLjL$mI'&b6^$Pjat?V!Z+7"C^o+^T3R.oBd<8`n7>SZ6Bn#:eJT8'9,F1`=5&l1(Yfp4R!M=<B1^cJ@]<NDd(7+6nli)qVZQOr%VMit:9P->\Jegik-!)D2P0LPtqG%Zmh6eWt]ak<3E#9f-c7`]hUu[A`XH^b86)=\^I@od6.4=J1X"1-LdKrUU[rE;Nr/)4G;sCBe%+"rJNLe,XC!#rKFA`Id`S5t3/fc<QB;OiRg@!XZEq]oaTmKaY.EnUUMVW;DP@ncB.$%tbaT"4s!iECq>V7aE`/<:PAq;HSL=VK(H%.(%]Um&R.e?JCuS$F[CG:fU`Z#OKU:.fHe)e9<U2nS.Fb9!0h<12[4fI!=pZ2u<Sm"Pn)+4-esPWZ+6:0%lN6'_M*WKk3"pnPfV,%RZcf0bd`1gJZ*_7]l7GhmDXX42DWXT4IRIonC3BaAs;7":!(AVL`uRbTgSBtd^AHpX`s(ra/MqR-bP]bfS@`V!G9u@mZ;81SHcJL%"-@2TfQ'3a,;B0P^[kauIGO^)VXCUH;/W^ro[6po'eK/:'Uh/Kl_E?<hr3T,("eUR_VKb(Mm9HacR/[k;4lg2Xp+[/RBL"4D0:d&%RQZ7f"HaE\!*MsXAUJ%>WXTI6=SQW@_<NrQ/mYG8\=SJoaHlo!j>5iDkj%V@*g4TI$9AO<N+*/Ifdg3T(FaWR2[KKC[d)_"S6oJ+%?#>G[4kq!_.uIP**c4XmT7k`$?#;.fk\MSP]#\%F2ej'^\nFCCo_;^>+F=#*J/pe&NKTG2^8^TY-rjsuRS5/1l+1&`<[-G`[%L)#%CQQ+hh%P",5).+QIjSa(#qKu(X=M7t6tqSH,R@=m8(]J;[1(iCc;Sos</T!Pp[q!G/j%@7KaHFk.D;ksH@%AsAKCE;P'?dH`n4F-%gD4om\h(cpHoF&2l*=D5;i3VsgS^"f!4-ud)=KZI?)OK/^k<4^T7G5]J83A6VkR5j<=i9Rb'q/`B'aGi^o0VGEY7iHgu^k*7B:#C%nq](cF#ZcZEei&`BAs3B_)i2oGuab.$(ed;S/p]4@IIt3;k=Qg,X`C1K1I2qk%^(m5!.=%"$/qQ$(S[L06""=LHbQII!SE';qiKG%$2)d0e?[CHNonmMBV!s>R\#9;m#<6/[+.Qm>&@Ptf)V[tkTe5BM^M%,(k&ok<!4O7lf?F+hpLFsHgL^VmMnsEGCeZlcI"\n3I=26%HFcUZ3Jq$b6AU#*\t6$.`Iap8>mjhUFJu=:8@kWO'GiHRZX-X.QdrkV$Sb^Y&%[M&ocnadS6ATeo"a_6Ac],AQn6tg\nngegcbL"%]pV)j^JUKl?j-^g*;HUT(fND/7;f$NJ@UJT%M"%T:c(&Gm?;`m3;P^,=!cH\9gHL;o_KHI6GMHj:eJXG6hG^/OhUf==a6=Q#;%J?%!@I=kF(ko1=YV"@AYHuH!5K*<\J2jeEG(&"Z,b[+>+/@UnIYY*!C`*(#>)0j/cAu`MToiBa-&89QA$N<l(;50LIadt/;,2*IT[En%]kk[%lkPN`BE+bR$Y<I4##E?L(qR9Y(tZC&3N>=jg6KZ!$YV)YBTs8h?'-K:@$W^H"\fe`MOA`)%!erf@rnQuQ,MHUf-5OH\Bg.0%:Vg(^rit#7;2<>aLXW5XUqK>S-!T#.._uhK&5-;7Z)$\]eeLl2Q%>'p'=juYms!<eoQmICYdo91??hnUgI>42hMM<_Y?J:Ela#"(%%0X,J9Z3eFZf4d33uLkt,c"s>poP\n*>P=d$lK3*!fDL?WWGnJ/.B\B/SqZ%,`+)IJ7O?7#DHsc8%tJ3I=E#VpqM;^0Jflj#UBI7%XUI7[o/JaP`Yil&)+/c5cl$KC@I*UU*'3*g3hpN-?#o.f1[((VK)=`X)/%=LSB&aF1X;XlAIIps6YDoTB6,+ALX%l3%RkR]+c"@Q%*m/pm64TQ+"s)r^4!]U,3.juQa38VgPQAo&).lMnD;-`K?9])OpUen9oK9h3F5AHe4#:h[aHn*X^&oTqS*)+1U"2B?!)LjF@`e;h%pmNi68@+lV[%1d7*GOZDQji,`i'^G6nJM>u+$;c`_4##^=eB'JCqj(A]':uiHq=+%O!\`uK->*0bX(^]N_+<CGYQdcChlIUcYa%g%4+r4D]rr4\nm4N*fc6"meP%=DD/+g*]+fBtRd?o1K\Xg,.*@lD4iUs:S+a+Hg.F+pG2"M]7*."]@LUP)8^l2=%"Y(IC^)HbG6FcO%_#cN1`MYi'@9#4r7cpI7T%-&N1(J:HN*`"5*JRc+b3C=AmZ_01jRHAI@5PI\=fo#H66B.<cHI;a^25gNW1oPB[,6_j,b^j_YE]9G%@MO"V^g>U3lGP<#I)`?BYT.:7WounhP;-.Edn2h^/\Aa0dM\4!.]qf`#D:HcJX;\JdeY99b[TLSaQ&a/^MDbLLHIcLS/?Z`:uq*Q%^fp?i:mQM"Tq@aY$S\DV3=o](-<A;b(t1\Vfm/_^8)"hi9#kk?h[4I/B3-R2Cek/mX(n*=-u=$3^SO61S=3[G!K\1ZDWYFjN.78^%me,\0"XD$!`Rrpcm2?gg3q%lt$f.$<6U8FD/5<1!ZsMjZf"hZ\._"RJD4cdNgH><]DWZ<'*$+lGN%2-b70`9g"Z(6;BeEEG=.Vs$%40bYQdVl0P:oQt9bd(\t`fOW3O-o/fho0H;AL`P*P$rs4#1q8KLsfIX^%=$5,c=YOKqsdoib@eg\m:<Els)H46!;0jq@lFk!b-nT%,n_oTN7/f1.N]P*ZgHh90c3f!2^r@'@;!h0@htVQ+Xt]E8EtDC>_]F_.Z[9a/@dUBl)],?0#R@G_kY_a/9k^$1HlJY@<QdL7n.dU%5e-5CHtjQ@)*,:GH5bN**Z9rR_;t(!!Q*o$D.TO2Q_1aF7n1PF%hW:eBl>^d#N1?A7*4#S,]]BV7.\p!_`VhlMR'mr+!W0'Z4f-V%(pII_?nYd`3)1JN26Fr&V*qbTL6hAr*[IYH0?^r'ciqnj0idFh?FHM0?JTM(N1(?YFfY%Y`d)^4N&/Zl2@g?ba`[G5W?NeE>,WM+%q:)5J>6iL0`Xu?Ud+M+Mms0k>3#iH=iYFa<+)[_FO6rMLV]>qhm!Q<q,#g/W_jNok*[r0@n`5=HTNOIKjr6U/irf&#LJp]1M8t+d%c%jbmmjJ<^jEropD[ABi4rgg[A4YU?oAMNB0qDepkXjJ%J52@_`YoMPjd8Th.u*_>9.M`Z>>Z%1mJY>hl1L,E=cA"jKjtf7D#&`#%_GM2s]8T5-`t4b.F6kWGD7`q4#2YlFFUT:"l?HrMmi-.3NMAV'_If<oUY(7Jm6B<m?:W+n\m=&#=6N(\&,J@XLQC\;_t%SeO*"9b%2@f5)KPf@I*p%7S#`d:jZt?uq3!X7e&dm9E#JTL._pL\Ef7'3TDO<9aVL6@Ag"XkE:g7jRKJW8"Hs#m+W@Daq:_O_GO2o=4IJl<<%7OeC]]St@lh]l[-L/2:!a@P]j>l0MS=Na5=E":ls7)#%b[u-Q57alb=2'^ZJCS47_=?EYrD%M>dVX>@5"Q-/AEr3>S@ENGm&D$b_%67SKX+$43e*7W#&,C5T<g`mP/DdABm$?qThdW-hmDKb-UWGnk]&G>gJ9.HI/=5iABE-hL<MtS$MT2o'FlM\g/M,27oM;@"oYL^b*%7sgpJ9K3^Aa2[Qh[,=3(^m$Jr5<suAXHY@UhX,8JR>kM]L+FA((kaNW/AEbY*SH@)jCZr(/5cW0*Rt]3Jd:KLh\rCacD'TZ0$'!$%^3mpncg4"L(KqUnAc=jAbHsp+Yg$<%KWZ@hVqb:QFQmSK1Q)bc"$T_RTVed25/"6Hg6FfM@@[t?HO52mK1<0$bpAd9"VZ(+8YVU=%G5BR&P3shh$<T2dI-KoB]05CjS\^fk_?Lm$kZVho:75%*WV2ffZC=F?h(k_^.D/\c[o7ONp6T)<Q:I?OVb2,J`b;)FAI99cC0Kn%%Sa6P6aIMO,fL7q-)0RBD5H*<c`RZ]23h=.bpmfa$dYD/7>L+_Nm>TH]ZuUBe/9e[J+.r.JI,3E?o\KS]2t[F3:&uFeQTM9h<R:.B%$cGiXD0?k:-=j)^Ue%KMiVfLR8UYh^Gmb13WPuG"MbYthDH*`ob#XZu6_G3S@dZrXDUfXV5\nT=4<l=Y#]R)8g65CI<TB06^PlMG%^(k^c5H(;J4K3=jLLe(>m3XiqHfR$@WH-?[E]\U+[U+9gG;eO!k+k]-,Hd!k1V?-$,d-T,QcSF::ZpRnMm9jj6Sc>j^bX=iKMj;V%V7-F&ERsm-_X)^H>2cX8/tb#lo^8;F\$$lc[qn)W4$`MV*@mUS/!j$.r@j";dqSU\2>54EflUE.F9c>?mVn,e)em'22Ot1,lJ1YL%A^b@E14;O2cIm;C7_L[9]Lt/Rei=0_/!#ohVj0oQ3Z0qE2P$/+7JU9"@q=&&q:]EGoiTmh#4K)`@Q'cX/tFb@oGH8'>!a11r_^#d%["bB*Zgm#-FB\!CF7,iq>0*Si>!L8FW.VD?[R$><.D///S\Aueb\Xk]0Xc0`h)6\V0"#2%e*W'uh6Q:P/1fQ'Zg"gsT\Sh-B%(Gp%YT5lr:@#8t.gH"2Cc\\'3jnX,GW)*nqO$haj;?Ql>.J`iq/U^<SJEsp[q-R+S'F>If+G=QZuYC>mc-Ca!5*E?G[pfSmMGaU;)'UK%LcJFZf=7<f>2k`WDLo3RA)C@c2'bQV@^#[o%(-IYGVZtc<^EMoQIL3>2%,:q2%h=>jTGbCXCpodD%F`$/$O--geRL;2'a0t;6u?[%D\Z&OJJ:Qn`W/f)e_R:IjAK/L)J@C&/#>e`#dZGYbRm`Hs.[+GEn7V$\Pp6*b*kr:q_`To*9PD\q68CbmL1k]X<l:tH7-4BI'R_=%h166Ng&R'PRbVB2RQE#@`N.guqpG'b)I.As-!.'ZFNpADqmK-;Yc_%UEnTuRC<_%%pKT<98'A6K9\iiDIPhX5!`Mb&&'j9>eh+jM%!;_ph8$s#p9Wfm"VpDpcc[UU93n)_gS#$N\r?)TN=_SF%bY`u5lFO,_2'lJ;@12VHm<kYj9NTST^Dff6]Eb=7"o#N'5ogEb3aOXB%l^6'r/W8"Q-@sFdRFTPpP54<%pa?82d=!%Fc++d`rC!6o8j[J,h15ihMKeAt$CaP/+^jGh[0ARoWtT9F<tl<0B69_"QI=@A$4)1t%f/m\kqDphD7U(`Y-Y/Pr.XsF]$C)CpHSnVDTXNu[7o4hNl:[R>/90J_lHW/)]>73e8%ZSKb0$JjCd'Cl',buHql>RMMh]G3+4K(6%eVW;Z>Di/9X[[8QbNIBca(joT`V[qQI8Aj_(\+F^LiFWVN[MJ9p[W2J1:Vd-1K,iB_h2j:POg<4n$q+f)fFJN\,X.l]A.@<TT,^.%mZ*G*=RmKsVEC(0A,3"7UZ<`ch/TpqX>F;O]p4ppjeBkfDn%U6n(#2?__T!ccK\WY@?AW/'"`g9%=RQmH=CakUh>huCU9U7gHQQh%\dU,,To.(7,:(jSrb?#Rn+rV+$tiX[QI\,A!1Y8Zej:coTTcW4Ae%?2]l7Lq%Im1ah))"LSatMmG4\[X.f/*1BPbSaKDeul]l3a#%Q;OR](6Y&2]ZSf'8hndOVQGe2CM#Z50"Qf7e%rk&`3+KnjJKAK`73gI[ep&I,u!s<R`$K-.D3p8!(J(&)=pU\+jNUf>"rM4U_jl"%!L7+"HRT.nA;NaoYcFfAU:?+eF'K)Khn!`@d!TIhIRC_b7[T$8AG*kF@n_;@j.6`k#YNQ+\W76,'u+1'\6sQji8N9N%TZ-]=iu%K%k@e/=2b^3VSrIbqjkWR`fNphD5;CEA/+WULfSNQ!g6_?4buo@)]C"$fREsuq9`(hl#S)d36DtC33*T$Qn2R>gi<e?eeNI`>jn(tl%+3s#%a_<C4(Z!oDRNs=2o&4u\iN6E!?L6G4]PoDmSubW<da.krSZnlNDPn3'0&1/`C3/B]fZ5TuFf-<NfA$Om7&S0Y0n,DYXU*g<%qP(Ucds!%=PP]R`ekJm!2]lJQ,WpT3K]%d\N4<q(Q%l3J>u*K0(Sf3h)6NDEWcS1UmC$o1k7-j+Ut7&neZ!f^>N4f58Jf3Bq<"NJ%dqPPV\@bYokoK&RON=>5CC1//T7eK6eCNo#f1YG\'4S)_^0_hF+@\Lg>Ybop%7W_L'K7YVR;UjZAEYDdBh:C]YXopc]:A.%Zh&n$%pb=#Hr)-Fa/'o%o,l/r]^K-,C1E[)1[8SK4?=FT/@n-m.H7A(_<[iI$(-G/_QT>8o_U</SbjnZc/[WYC!DNISao/QobT\lt3*8iG%Zqq@t^9Kht>s^HoL86(hNW!<(l.2W:O?_DH'i<d`]]4GqLssN*nSH7c.bRg@Z#t<Iob7(2C1hQi@or,1X2gP25$7I6\>-\oXpeD3%8D-Q&jWg;dJ>p4'mN6d/+5snm@*Q*>XET&qoq%adFmNf;(b_S:3Ik0%`D!BL#Y[HTbDLdC'f7\=([A*Tr^k"Pc;lsLJDM9h7^h4b%[ce-3F^sS'BnDW9lP.FOeplA<QHKbHbii4JoO\@t!("U%XUAll7+W%n<=FQ@DM_n\[J?@BQ4qBseaGM[=*NgI.l69]iJeS-[%76V%b&Fr\3O#09P=+&];`Z$9:s&/`;`RkH\^F7W4D=[-Go!R,6f;Xrn.8R@rI]WS/<!5i?#'Gao^^mF0P5XGO7c)ma2D*@Ql(bH!o$<`%hUW1urN]37T[b#IF[YsF$"=ZD:[tP*H6>o1N\0>m_U[O.$W+NcH9$LDK^'U]JAsSh>N]IBAc\o&7G#E3Ne>kdTgN_I_\h,e$W+)R%#!%3<3EE`T393Ol_FEB,$W)=D8mdG?]Fp9<CK;qPC$/.bG.NfQmn<J@[q5NM0'1RQ.NJId54]`HNc?Ki[ZOk9_3=;`I-;hq[i=i1%\<Ke4$[;MAq$c^^52)i\<q!4Si)2am<rif2&Ui1Ie8<6(C9Z!cI`H[l'YN&d.%+=1HT0G_p\H>:VG:s],MH2i?9_r'O@G8\?MF;q%W)@c=hnJQ6;W$eQlkRsV`-8lG:M5B7>Q+3N%CPN8I[2DXi-YE],=;a_eNrs+=ifYb_S(CXP=s5m/'4+[n+AK.g@kK1qq^RNI&l.2%2h5SslXr='m0M7un+G.7-KDS(mr>P'EQ"9j]:bGAZ'p-;Rs[V;I0\ToB.W8n.F/UooeX>4DoXe5l/(`=D!L:R6193)T2sI+I&l/@%p[K7IkM?!JI`>42l6"tk5N;h\,,4t-Hi8m:B/MGBpU\sPq`mT_ePC<L_qt.aD25ri\,(r$8pdJ6#l"051GbLmG3sX[TB8.nUdAH>%l0s&uN!$5J)6*Mjl_hh]g:GgQlTJ<rhWng55k.=P6gs\(ghRp$aiCpCchMU,L\piVG`.@J5/+r+*jfkYgHD#nqd)MI,@^UbgYM;j%1Y1W,cMQSpqAJ2UGFY`kZhOruo/QL@)4rjgUBpS,f?a4m^B<oagEB,*kWZ_5?`#((l?AKipe5O=$ZBt9^=R:iX8#X6k-042[ZW3V%\,&Z66O2K6-]sbXXa^.XV<tGJkgJ+Dp\Gc,3Np35hET/rI`KNV28@bh>2JS=p\IHX/DcB#hn=KN`E[-4laM@!]QC3HidPG/<,(Nc%-_joE%,Q$5e%L2kHq[?=[\VQIp\Ga43c4\Wp:T!Q00Lq&L,&!S:FWc\?$YqQI_49uqqgY:?sHpFqAg238D`ZF9G'1@:0t8RrJVIY%kp5f7Hi8m:@V(CDfY)aR\,'h&@sd%tB;>Z=*Te45qH;?W%_L=g\WZ5^r=$#JGIZ8N=?)[YEE^*.cWE.4RM%`_$uUoW7athe=>"D[%I&PmP'feo^6<NXhY$H.,WOn^\"7MLhM^gn+p"q8qDpB*PhE<)h?AL=/(P8;:!AOa-5ruX.&O\;tbi+$@C`J"flT,ks,gXD$N>9dg%X1Z@I`SZ@NcI@.#nN)ts0tu1^/[X1&>u`M>oNo8%4eF]KCQB^dhM4k;mnE#JolsY\:?J[5Mu-fbCegkXq!H$JUW-AQno=8,k??!g%c"m"HTbUnb5?m#hj(YD(]&#RA.NWf;=7gce]!7m^=jr`:>l(%5CYm`b]6HM[ju?L_Mia,`qbDL0)oDnfdWb*(rgq@QE:5mO-(_kF%2'(P_b-cjSgeN:^@5LKZe7FqTgQ*mc3F1E:Q.qdHSf_;Dps"$6[;u(]#&rQ3+k&4D>P;V@2_T,A*%:36.R1jur9EV5'^j+J:6Qh-%l[n\#Z`A65RE[\C9Kk7sYCORc#eCAXpY*]WL81m>c5Fumq:qLNEBN+-I9L^21YmE]cb/GdVrh,+4Y8X_XicppUK,K*PNUPV:J)*#%bOesJ`#Il(J1Q*7l@c8C*;oR@:bk`&]Eb1mQ<3LP,.W+cS5Y,['rhq!^U51[9pRsg*\QJ*)^(XS*A'JkINNU([C>3i7L,VRRBG\f%Zg4[IB;^0AY;.1Y^18d9aX5@%8&_s<djge8?0M.-G[$qAQ#,R0%6qCO-,4N=\uW5B\GVr0YW7X%IOGU@B3lWSIZmapBbI(ceWHI2%om['?`h1)'L]D6#"D27#M-P4!JdAI!gJ;+r(ns@%W!@_S(s=MHf9?eo7;m%SrripR#`]9XjS\4?jQtmcKC*qjlI>!DmOOWA3-[.F%3]U#$2?/aF]OX=U3KOSUj=jH\$'1mV+Be3!q3247U*+DUq\BQW4D:VN9&l^#4nGAi2CGY6Gn1C]U&Y4lZ:n-b=\')1Yo=#s/Bu%3%VEr,'1kn/<G=o+.I(7=,)2<(o\-il=jU;]Y)r;*H(W;Sn9G,.PUX3f:_o(akqC7"95/2c5R6lV=X=n\ORRBDTgQ+s@&!N1'dLM/J%:nFur78I.5Z9RT!c_[Ur1Qj$&FA-LZWiT9eeHs$G<'Y<@!D=#4_kGQ0Ks-^&R;=6sPE3J<gt3Amd%9Ed6_NN.$_<nA)QS8anaSsn%1to8R9gg6hqW4QK9@XI##p1mme"u52(iOrQn2?"b!D4t=41+L!oC@pM4^IdRHbq0,.gA;X0SnS,%RPOQU21RU2[)Z5C>7Lu$a;iX%:D2JHdj0q#+6h16<##"j+.fKO/d#f?c_Sd=P*F&9bq,Cg_ia_Fb]'B,"Hhe^0q;A<!dqShb(Wm>9>ksFRsss0PMrJ.lP4(Tk.G26%#RCSERP<Zh=,9NE`(CQTJ:73FE6[4slg"nDL8=(J$5(dmYT$m6M/M5S?fPJ:C\fE\-pE&@KD*fuYkin%T]C!h_`S#qido/)Jnr@Z%0XLcFUg>mK0n9qN$</JQ_A6M2n+mM[cJ]pL8obAhb]TO7j>Sck)AltmM"mM[L3?<!duud2p:nX.K)]BA&(T[[,X2@AlEYr-0pIrg%PQrhd27dTA?mgM^-!]]E'4?7'DBU7p$V]h9$>JiR.'0s*MSL!7,Gt1>91k\r2F:J+q_G;E85L*X6\S]tB]u1NXY*S@0")!^d]Pu6%i>Vg#71^P922KMMq$V;%`!._okKic8+[j^68#?[O'n!cN>#n.Y=V#YYBX^QbLb2^dLe-o%#16<q^>k1\BIl?&2!^l!ZU,YS8&/O5%e,Q/8K_,OGqnHIrg#U'V(HEh)^ds%P`C/3=;IN_InE(e*IAC.6V$(i<joW4@6?R'!fMq(bXO7Im'XoG;:BUi;g:;b:4b3cBA_On'%?C*%[,#f?7Geip)0(d%dcV^V._:ec;+Pg^"rRqK"`t`$!j,gZ47s+EE/h284ZL$YO4;rp'%&`E",ig.5`Ci0S6mP/f#RSpm-L0YI%N.TKX-)'63h-2HS@InLi+[Pc&&&/GX=t#3fmbD[\"oZVKeQGdb,p3519;oRL8T^&u(!DGI^Yl(a.&ai`:OY>1"[I^*-p`b$nB:&N%&]\f;!YX]kQped[p0*Le>_5-dN19gXdj?A.&-OR'!Pgb2-4"u^o)W>$aNAg_gTgM-&MAJ.UW"t'\'SrD+A$UWC!_R3DEt'BLp:6`%J[5Q()2%LOGL8T=KW)8V&n9'G#WL<Q1j6@uhBql*2bB>tJ<0en<4O*+EQ`I'"C[!.Yij/'d\SQ%EXZ\^b#G@JSDrD?9MOXn#d7/9%JtU;8#TLe"mS&rs&2I8NiW79B;!?#C8QAEcJb2-t\[%es-9h(e-E5jkR`7IUBZsjb*aR'hUbP4J3](H&c7t<(A/a3@a*Wb*T1EJ3%+:&n?B=iI\)V]<OH8P>qUbSWA=HLT6=6]BQ!'maEPlSHhM7a?G]J<J*O$SrMgS<-WI9+C]PfWagGcqj^Ph6b7aD/`Vh,bdFZ]G"B%6@r,rduB6V?ECf3dlqT!H&LXgi%nki4jfF.0%_q-SaaJihM(o8?Wh3r@R&)t,`(.UC7D=SarLn!A!QBSgk&T.h*:to<3bHi7[?<'%ZK`+;VVFuqX9O?]NMlgYR':ARhQ9Y<\)WIJp=DlER+\tS("f&/1aQaqc1p?XiVlt7,8LsqEWKHjmTbVQ[?+W)3D4k``IchudEB/k%hS2\&.oh'HH`e(]6ik\VV&"aFlilb7'mU<Q@$gn05f%jcI>qKT*#hGjc(#3SLB8m>1D[M9+Z49DUbP4Y5Q\LfOi%r6\ICi6pO`s)%cbS-B!pdg`'5G6L,bGs5;TkY<S0DSLkTC.i`bn.5b_Oio#?Z653D^(U0@!L'F'".1-qAbd`YUbo\g*Cf`0_7t>YK6t2j.RAoA[So%<C!5g(;"5k=O1",/t&ZB3>^:"eOCF35ks05YXllQRW+73VS,pUXk&P*.-QkJ2Rj2=/*YP:R*UC[8D!ur-Rq5le3)[<93?-=%Gp>c%Z3H9)d%DHm5E2BC!*Wp;F7,1j,_41C^t5KGGU=K#]MJ["aa7,.c[^1E2R:2E-DLiDnEu,)YlF1PqU^SdJm;e@WVh7leN`N5qX:L;%StmRHQou%<LV]V0rFX4B\,?#:4Lb3)Bj2um$\ph8d=UI?Y0Ho\?!7Xq1N'q8VsL+)X&uDK@O5p%(ia`k16L3Z>hUqsJ]\.?(O9Ji%n:RR2<%jJ"PEe`4oKL_WI8\lPi?^iHaqLadi9;=;gDmrojMKldGtpEuhd]LTnJQHD2Q<"[J,N>e"K6)SaqW)VFQ?_`'G?N2o?>FM%0*36^,5rFQ7]KB1..FO16/KAh\]WHdX)+MVnJGdQcd@M's8#E_Qa*9;1UR%f:O3sOh#gA6+n$?X(b:uic]c9Hn6Q<OIsc:H"8rlm%^FT(0m0Mbt9ebo)GDBfnbrPpt]2sc+(ed6s.kAd*Lc82d3gW*Y8`o]'6^7T'lkSt\=/Lm=m-p5ZnaM&o_U>S"p0:VOU/a-u(F9JF%6*eri8B:3+o^l,]U@A.5"sKC7K2P'GMosNWLd()N7-M_Z:5K-'0-M_%_3nDe"2,8/P2JN,2FnOpD;K>C6%]`uAG9Kt+:1R3>fle4%YtF^q@:`=.%M77nS>O^?#u%C?90o00'BE>n6R+<Uo'9o8LErS/Xdc_KHmGrd$<s@[#\%f<aulfAf6[k1KJ<0YJmY-(=Kl/p=NR7"%B0hT'!*)B:kp$@]pGOGlJnR?m]mDr$h[Fj9QmPQA"A,>aL$,EPQo_<@%KP_LLU?!mSGP\?:rKO'A5^Bok</]?r/TBqq0%5dLisG;%Gk&KM9#bL9_l'b]YSNABl[rI"6,QJ(:975"mXnVNQ=!9+r2G2:J9W_8Gmd1Npd2@)F/0.+qHZ?Y(H(hV=PCSm$k#Y.E_SS\W(;][%W[3b=0*#DCh=qYWBMJ=[+W[86-QNCe^7q>7n18mmT;Y[4#X`ks!+5n4'%ot$R*>U@!u[)eblHnjL>;D.o$&NB2-#FhF4o,P1M:G\%K..l2="J+EFKm%L'mG%@.9,U46:JHn-#1q(L":._)1$(<\raJ(ZbK<WpBg,0o6a$-j4sl&qkdXZa.'=0OMgjUl%'Tt1k&U5EE)kg%TCS[s(n`@FYI%a@!J0%U7JSS6Jd!/\G6$>Ya^Kk9$5@](aE9e9qE&+FQ[22gbR2>&5uFmQ*QE'M_rPf[iKliN)9L#?Y;AVFXh<eM%*<FZ4r![?G:e=/mDM9;(q(32G.n5]F&NP_n*?7;-1HE?5.HXF%1Rn]()$mc!I-Mk@pr?q\#[d,gZ:pci\Wbj*lEoj;,^WZ+:TG7;%eS1;n\N4/%V[S1::1>@]Lo7._?32j)'B)T?FAY^9>/0WD3Y4;I^OuWJ97@^bi"n#o7SeS?HjJ`0Dl[1Ia[M<pH><]H,tI51(,2/4%.nrPoTG$)`StY7U&pPttVK5XgNqKeUMJQ$<a!B?@Ir9X-@XL^u?Fd$!6ac4(n.@'ni?JF:"mGGN5_72E.6`gL73i!<$7)9GIMj5o%H-Za1>S_f*j@PKG`$5th"!P!,6d:gh?(Cb[`u?00a(7^fL)r:)7<lm$*]bcBaUj+q"i:<@osHa8h*EFippB_s=r45$_W0Np%.Yq0%K\Lh`Qpsnr>9hF3AK%70`dh!TW'cCkC^`Qg4uWQ%pK6)(7XNnY[5ea$EB&aDqfP/+V$K:4.03qi+;A<^K*YX_:3<:lGk0FZ3WsF6%;*b1;8HFe;#9msbQ1E3cHX@56(-sXPo(H7X<9cn@]oZ<u#OdUbW\1rGlM3!YR*i!%<k+17Ba>o%+J":>"HDfXj$T+=7&$q<&CdE&%+LmHV\_f7-S]2cVJg`lPb]d8KR^iW74W4EpNC=N]BJnD(-*gNEck_4He72<HAGT,sU4ZV`YpGNl<eIiTgh=Y.aV(#=XO<q[%*7c;%k'q9&rQiR/;MJprlW"t,II'dIgl"3qqq.UrU9@?1XF9G3D&AeP*NX\U:i4.7[t;#K*NC^d/QKX@ej?c5>?WPS=rF/R2>Go]7*P^K%Ro9gErq?S0_m!r37/PjXTT*"PR624j&thrXiYMGlZFA!MDtI,QhC=bQnSdu"akeKm?iEe!.\Ge(_L0S%^M<H!=^0VBKSN+3npEhH%+PE8[n>+%*2bR6regk]Hj*@F"LZ<5[He;)eJ+.[7:<-i;GS:!OfjjM[@pj@:(1.IH4ZDra)o*$LL%>/Q1`ig?Mg:rp@o'p2:Y1S$%X^k5\;<8k!S@6&GE2XhV%a$p'fW#12fE7],D3Y"`Dt#8qo5;A<')6]eUOlG^F<$60'B"'c&d/).CuXqLMa-.C(&78#*rTr:g99ls%Dj5YQJ_f(DYolKUU38R1$V$l4Y^M6I0iSQDM?]8!->Wnt+pe7?N^SKhA27Rh-A$=@'[Vt]0M3_Pp7X'3dD9@\Z.!eWaS]DRhAjXt%-"tk6_;3"o.9rpD/*09r7$T9Q)5SD_i9m$4\`X")qanS[XrO/cLDW,tqYIZ`j1i(2oD:YUqfth1qsUY^r`c#h^Y,J'[Jr]4BqE)i%Q\S2:Vjl/J9UaN3k"nS2:UB[T<bq.f[.D>dh!Vh/1[!p]F8#*=M6EiT=(e:2WMf>GU$[!b?c7&Um\oe7Vp`V8]ta4Njg5ue^[iA`%?VdfshsR7*H$\6FQFEJfY?,c@DY:Z_e*]B&@]e``^$AA`IK/X)I;/H$C.bIoB)h=Fk'NT2n=mIL]0g;FJpHKA$A<'Bp>oSoqJ>0d%o>]*Tqc2hRRr#d@d_:+<o5R8\n)s:^7=!WjbFe56A[Oa<`6BoKQL/>9B\Sd&h+p6g#Kj'N[`a0h(g:,7^Nm=@la_\TUe9HmI/k[J%AkhamSY>:jfB4j'P$J%#jZ2@f_pTA*$B%h)r-XE"#IH;:k,CD6"m)/qPd9Rd8p`]Om@ID&Ju?2PH6.9:k#2fLI+%#GX4[-Glu2@b%Up%/O5BBSKQUB@_Wic+,BjLXGX*L@*H7E.dZQ0Rsn%V*\kPtDAs#N79s#f2NB'l1nqs:X_I[dcQJ+9PJGmIoPG:u:0l@Q=1G5%^&%a.Gf-^"cVYH"qPO]0e%,*6NO9LN;8#qqcKIJjXiSogA?<'?V6^$`,L.k!L$0qbXZ+I,1s$oD7ls^)p//.sL!b][(kWDrED&WtfkC%94<k4>Gs:PEu:59o$lEK?GlSd6OQG?aS)@V;s2MYed`K?Hqp,CQhOj2h;&[tr)]aLh<]F*inE+OmTdZqpXDqt^O'B?Ons5G^9bC"%?!g3Fgs)(e]YX,as#Vl<B8Ab0_cK%/o9(T1Eo,Qc:s+uS[%C+-;!tT6BPYj&D.lFs14@q!8pa5L%k#jh$dbOAd+Wa#mVTqVf4TF3%g,pQA@neAHN07f7*7Ldu_lZP"bqV>L09S\*Fl$^M?Z$YIf$_Q!'VB2+hMU3U:1`#:\NFs`r\dIu%CEGsRFTZ^W988LehX(m4%#7=%j_?.4o_h*4K;Y>sqlKfVl\)L.cB^g7NuNqXF?MW1Q<:ZQ$k>D5TC$7RjL`\/1c$&SGPXMhKh7p.kMMo%RGW&ilT/M0T%*tYLGiA[%$)"oi:c@c@4)$N+I*SMP/\)t\!d\Nkj1_Ahlb<&^%Y5WFb1ocOV;G=[&,.nbog?WX]T95So=LXl_%\JB[i00[S*/2`H71h"3Ge!W%pEsH_pKZT"SpenCIRC,]XjHhm\g`pe)IjL1F*"&LZdsjqe2`&lJ\(`VSMsn?;qUtSO4GuG.;AOXqij!==m&+5D`>?G;mPri=dm&U%7>&ED4."^uf0)hm2<Of8qh$t4T'*f$C08d0-tc_uTtNh*ps@<SH!$RmkJ<io*1H'(FmZ4sBap[,&;TZsQ,,hco4P%tF5W;FNWti0%.-Ck1]2g4mPe75uC=*W5./c_5VkZpN>Mec4HJNJHf1uisdeEV4-ZA.WS-uC$m+5g/bNY_nXF>T#H0#<KRATjjSekS>pZJ!8e9^?/%EMMpr1g9]A5(nq9FXV<1[q[r_h<aK@2]F<gH,U&3Ul/HAWahQ)gjP%E.42$"gt[2LSiY=AYFBrO%[P.!X&7n?m"4+kc41d:S],gZ%\Y.7heb'La7B8h0+bBA(XkpOTeuQNC-uGI%b'qf:G=P`GdV,Cte)&,@H#Q?GqUJVB[rnT?PGS@T7uDO&e!Gp[9UX:L-`qT')_?1%%TtN%RXo3POlY53c*##':/`JoO-V*;B8PB`XaRP1$+u="[<OZ/FG_b[pGFH3`2OToVRHBWh)O.]A;[O_-qMlPpVdB"T*&Ad$SmtjZ%5?Te[7l[VDg[JGq\eWJ/j7Fq7BmXIGFM/\eSZb9G_`B6EKDG>S&)0\06-hp!R%aro!d`TEn?r941K`[.5Te_[R)X9KL7FB]1:Jkg%NVDuZ^<[dJqO+=).;:,)D/;tp?;3eoVJjl>ga.9!>&7#)cGZKBnLY7<Y\)TdY2!pFS<D`RLZ7VuBBe`OlHoBrmX=`lhCVL&Vo+i,%%0]5=p#f,WjU];$&B2f=F&/SRm(r>)K?c2_na9\:O*G?>4(QVmU(f0H7U6,MYTb(\4S.[b#;,D@<uiON>(;4"%ppW+oUTcK[3q,;%^!kGpnl_eEL:sl1m80Al/[G6OWni]V]6+9mZs@DLbWF"OXI8&=Abu"m8=#U'Hq:t>&#nf3U5ZtJ`[U)]T;,dZRDYAABN?%sdE=tZ%T)/(X>VVst!K$C8Q$,Z$;"*RLIo,pcimpgn:OAO.Ngu[1X97c;M)`^o/s!JgSjG+1_4Fa%H+?G?5K$V^!_62@7sRcI)rlI_$M)H8%M!%-mj"]L`o3U'1[mH7""eeukdqUh<@m6ipePS9k%3ar^oVOIALYGEKL(6Nu3u"sXAl^B=>T[Zm#uHh56i"T(=QU>,]e=I(]K.Jq%+*b.;\:hY[H75)foIf$HVd29,773CT77rCb<AH^CO8Hq0/SXsdiU9o3?H_n=]>B#50e",0[ko:l$l<6+g+oC1;IQ"Nqhm1MqIC%+%IurJVm%.X0[8(^JQep0TE>Ce3S@'udHB8,f10^ge*Eq8rO2fU;;!6R9DpLe,DK7S4?G%VVBEi4[RC5e3eW_WfSgaSU;QBRaZSAk.%*pMe(c$V-:3GNd90?h7Q>F<6AOat)IcL&l*.GADQZ"_6n0,AQ-mLNk]I:68WWm+Cr2E64t:!p4<]=A^lSMhZKc>je$VNi;6QWCfI%[gkL%$V&k^-@-IAZ?CY08!'fGr)pTGe?!H5bBbNFl8reD=->'lb;6!dL1'e([]2^kd*SLtiHb&1g3I<:8F9$pLU,W[1PM`7CcWYT%jf*<.(+=$6NQZ^gh@N+2pb.Bf91$ao=i`gl`pp(#C3;VF$cX-"Flq;LY\[u!3E!2dbJShkboAs(,!*<]Y$k%_jD1EZVE,sVo>bm^%-)ZTMKJ*F<[hdSe*8I9Z2_@AVQ)dnt$:clDI<R*Rc1I)lVe7\?)"mJ/gJ<oKTifWUQC$Efb8m#s:iipdg@9L(n`FV$6qfan'plLt%:geF%S@bGAmRA;4%&b+RE2-%74Juh0M&2GS`d"B^IEBW*L8e/=Q"`lpO")F/`,;t6Nkf&U46Ep_b11(L(mj>/HX1,b21t!B1Fi0?%];Jm;r!Ej&`d_UeCJtG:6Wrl^j_U9$rat%g\ZlVDnsepL!nu?RS`J&7<@#A/J!p$?^YCg19J7<mBIMAcL("LPATdA>36D`iB_Edc%7oAaa0YB]Oa:#9S2a=[lj*iNcLsk_0a'`b#bDDs`/$-9+P[.-;`Q7E>hIa(=0uoF(VYhTVEk^j8f$(?tdq*m9X<,,"]k@403_JSt%h7^/l+^;)@2C6+p1=l$GH__"rl>SgY4rE&-+P$;rK]ZKG,_$%>\EVdQ<ZN>ZMo+HfAaDM6/>5e@:Jjrd2=[.*s(9Or[j\^SqnMn>%\,VQ^Wsi0HfWsiRKt""`b3l-s2k:7;Cu[n"!_9S+!cio!0?_)f,b\4"DkMD1M>AFg2e/Dj^o_tnH`WcM[a'[UA$F^i(-YiSh`3L-%Hu;)+d27@#W`,hd+UtUj*G)h"bOcO,HN>A:TsPeakg5\iVT]'il>3C"V4N$fd<*AnLsnr&kOENAC\k,1cVtpuQh#G(>VL'iYRWLh%q<Y;ulRVm@:)s9Us3L?ISdW=Xc;FHa[RuXbZY!]>pQKRk5GhR.eM/:!r4H?gJr/\R0%7p@r'F]rUVCJT@Jf[C6!=E7VhZC#=p3`u%k`r>`=KtFK>6Ob0B*QfR=3JS<`T"D9W?t-'<;+^MS7q\s*`SmZHJ$Xi;FScG\j<o5QV1C+aoV(tV4;_7A?cJ+:W`Oij3Y_lN?W!o%aZ80`,U'.@'feO7fu+@[HoYT5[Gn&J%GR8Ac"9E+gp'nfkb)+Q=HA=mb`2'`-Ws^rm-G9fC?2U]X<GpL?mT[3o7%F.^-<].1eag&%f#CB>XXR,=pPFh!/N2OX;mE2?!["eLO!i)_'XicFE!rM?fb&jHjX\4ZiVjJo$!@s;I-cQ(PdEf^/Q(m!W0J-Vjm.3d-\f[Q9&9kL%;OeY`AoG&f]kiMR!RHIL:7gcKeWGB?kc@\<]/EX>oDHAoRNATMDs'Z0"$[4&;mjfhKOtmWmZDB/dojM9pC%I!.^%NGo&8]H"0A(J%L#D^)DKi5nO&mAb!SUcqcdoYM>K]K>9m1BaP5;T,8<Q'H]=67OR_>"h:")ffb*fI_'iA8$[tXCUgTL64`=@Ws8O7'7]Tp3ZMIX1`%Z(*&U:6@8$L6*k1.7`X!S=P'"attoRCF_'Qo@Y=-g.--8oi^_9p7MR4%*0X6Ok>tlHF\)hXIt^[Yc*e'6\_'>)*gTZ4n;1bmVsYM%/5rRuNT)O4LTC1PM`>U?4ZEhB>hS.RhAOJm3?>m<PgX*;29Z&QCcSQ'iXO^a_44LM]L"j['VDndf!tjk*-J=AqCJqlD6A58Hmqb+%"o+AH`Ldt$rd@ub$e]KAqldY']EFDVALBZnA\8T#g%YN<PLQep/V$=e15=_#LZd;R]48ponT]OV)Ee1]]K4qQkO=UZs(sWbX`J$T%mb+1$3nDT'>;H63*e*2IJ(M1CmeP0gHYDY'`AqAErX6hOq&u8\c\/a_#[L'98.9Vc4;3&'WBR>O/iOB"S1A_aOV+;`/%+>3+gaY$%bMk'B<)t`gV0QO;e9B80cA!+:BE]AZRG&I_'r!aFJg;[iimt\dA;'NCOO[2I9=0F>X1r7;P_JV"f0:RtSWc\f$ocZ"-q`MdQ3"B/%5@^JW\bcdt@E7_]+7_b^M<h6Y%qr=;6!QGR>atjP@!t5`L/+s38ca5?G4N[3#s0=pPX!pu6^k<oCOZdBW`$4MOiHpd9,l8YM]A]u%mEQ(]g*aN/;i%_$*=Q-ZkQ@FAX;N&245ugOHXnj^p?3@?$tLInV6+;8`.#d55DQun=A,3OQlD>2mICJg>L=_3r/d-qaPu!2B+6DE%=cRBZ#UOQIfnSEhK^+-*Rh3F=Vs0o59K7_%GS[LWNC^S:kZYDZVQg`FA?oL74R[,7)\gP97o#I:17%?G'BHILHj32$1kB=*pIL=p%?s%ZlLJEdMS;Cf.>rpTu!0dNC2^DV0MZiW[]@KBk3g?e<%HRmB)@BbQ@Q_$,`/M-e4e(8lS1_G!:u7Xa!,E]o2mYS3_sJ5'=anQb%S7@HDV+GRb)/qi.^q]N$1UF]'4FORef7I@d#cORTl#&#H`WA9+2%0?fLFEc&p?((R$inbIo!k6Q#,8bKra^RuqkS8E?9B3.3UX#0%H!dJbCPk'<mZI0V(<b!s\]<R7ji#<2X7Ro`YUiXB,(`3+*R_\G215XjG)Zi?SD0?0,"c.AP*`WFjVaaAgIOAKPWCES./S.nc=3'P%_ic*V>n='VO>h;e1YR63d:>IV7b_!tBG-N%alc,hLco5/9i#,`1WN32\VAa!,ldlCa3-jpZt'7IH)qY^QZFd3&/1nE&l3/X=,pr)%>47K6=2!@j/o-8R&Q-[X+cXLJh"A+7h2H/if.1(Bo8nU5h8+%l5dMAO-oFqlj)M]7b[$O>8[ja$#G#MJi,`d>$h6KhYZE%!83r>f%:bh^H59d="V>B.q?:Vu[W@QjM2Bo\P<a$XgaT;W-M"Ol"jb<7L'CZ;YeJ8kaZFg/He/^B<SpDI(&sqp.hTYIC85'9`\PW6aLNRR`%XPSuL4Q!2i&"d'>%lV#hP\cY[@F.N.Op&E$]P.>Vj2^^'Wet$>P7t(XW>DQ88PGARU.<>2!Mr1?&N#&SiS9tH!DD2qU27B)XKG/\%d#<"98:SI5[O"'N,<_@G?.#?q]G/+1WF`uZmG.anTZul+lpF=W+W0[XCtq7YiD@P#1CNQQU-1bf1oC38oFsV(W/fj'1U83>'!=>&%3bG$IDh`c;X]M,2--l^W`9L[D]J1>4XKet1h6gZJ`&he[p=c_o?aNul"ZaoTJ`8I$b!JOe="_sg+5hAil#],m6;Wos8+]=sr,e'L%<lZu6nB_^XM?Fp..P1k"nttS,6#L?-H'P3BB]QP:r?l7?f,(C:&%4C$/!i_+/?VlE2OpY=q!_T[69pKcMs;,GN_U\M@sgQ3;1/q*%-QP?*h67cuG\I5'ja5=?H.U.p?32nq>-iOXC%]Wg#DH)I'T71pUm^e-2=mk/D8VpVrRK,,C1A>h<f;-b1u^kW34)As2FVm#BJZcY%AgufRPt&)=ZD&c$9Mimp4Z2:`FgYQuM)`3eDU_KnaTgU-`k(QE-^a&gqaE;q@#NremOlhu!%uYshXK=^#kSk&\]a&oL,hc\h_Y1$%gWsO#!]PD&DpS'^drAfhnF+F#>\2LKNtsh444r@"GQ`TU1$.^X4aFk"piD\_hpCZ6opa,q&o75?#,mHCh_d@R)n2("_bt>pq"/u&%#b*ZPH0H*(n5S9&H:<09Rc4-Y#IrbiO>e"pe8$b[<"A:5IL<DEoBtr!%/L4[-@DN$oTBU>%X2=tFi9._//8FU!E)tF!JV&T$VRLB%D:[[H@1Z'sUgeT/Zeb0K1a<A/(.0cF@)\@d6LHc,IJ$gA<"ZA/Y&;A\66slLe78\sLS-eX#SdO(4%fck070d-q&IZaqOK$jo-Fmg%GV3hGM:%+*p@9OVo&))AjM&*_-tfU1lj%tYF016(fm,sk_"![Gc]lgY@O)]lm.MWfkF<o<Z+nb)\@+7R6-SOok`$BP8c/5e6PjEp%m7kNQ6n&a-$D_DFmu_'S_s5DdJp_c/[VL@2q:fEl'-P#?OBtEJ$+>nK9h=46jn)cgYM7.?p0Q]ZcsYh+eEukQTWHIiYIlJ)KkV4'%*7,kME=W/-,i:WQa/ja3ZWY"`J,q9`.3WnEWrg>AhgttFL?Q!)n'<YtfKV?j#gu85m1=)Y&E,2a?odaBH[JAUb[KZGQM^`92TQdb%Jo%b"/<Ho#,70>>_'=S-r5$clZcbB*Wh\7aAsWPl<Qn@ABuk4"A:u=DiS8F,P^ML)UNtI8m5ZEK(ngQ?/iRs*3JoZABM)"J(n(q3%)%ug8W8ff,GA@O-b"L)MVn)78Dt,bBk-3Mq29qUQN>6\LR5r^?GjSNDJJak"fFieV+cHI'A*L1H9KHg\&;uf6.lX6-O16gI7M^r:%0q=(':fl:;RJ.FD`??V`NF[[Y.lfp)5YqQ,?]4^>hE#Sl3!>e"CBjX)+#>?Il8^cc"=NcpPioHV;FhCO['V,i'(Vd^7cVhZTVGlo%QuljbOVXin[sBP!ZBdP)o*t>=+r?-B1o<fT\mIW+r@YGTC?c`5bl[*P8W34O1.:8<\o#(,h],oSn].i.Zq6iDRu#H9Z+Jn2Vs8Se%>Ce/-gEQ!h0:U`9rj**h<=J!;Da*A7/8II%1MRJ!3).]=U4k-<,2d'pq,nq(*3JQ`6&dnXjDpA_r>qK9h\`oU8(!),;)a`CNtTXE%e7solLFMnKX5^N`W8BDcEIo.YaIKp>rOUU):>[CKcX[WS_(rJim-"@UbGV]QfHu`q4RO_Fa__Ud)!LM7<r!66gOJDKF$iQ-*lUSh%ZNt_^<*ok?gsc,&f-g5p.3-TYQ3Mhq=qV"hl28Pj%H.UZGKHe,-E2u4b>f7h=aC4[k6Ouba5iWXmY7+qTQkrR!m!!WXA0>L&Z3%=%iCNh$4)4(4^s+%alpr3BCc(6kfkYO'q*Y4G,_?i3.#1;)\6R<t"=!]H0pD)eNS8bukRh*2>@?[VRBbm3e_A1^G0K"=!Bjq<q@0D1%pE:0BIh_]'G`!Vd6j.m_,'42,,&&CpW=s.SiU!m<+Gtp2kI<T4coD;7g/P&3;]jVg!.7ZAN[4[8L^6"t;97VGh,_k`111@KGE+;F%a?ls(oJN+<CJ:P7_c>g-YG(P,cf%b1>e\AaA[P^;1CP2UrlrfI5N=S-g2;P.;9sonR3k]H!7&9l]GTF^)S&!_>%dBthfu6:n:Q2;%caLdJ%TM<]7:14TU"i14'SR4R8sl\]U<I@;rACp=<kA0Sn.+91/nq5N!]=5DM@$B=blZgq7\J?s"19`f1PK:KeM>WOm:7:eL?>rp%;fc:U$NdLTMo-(nb]BM6KVkl].1X>.O[tP7/A:mH(Bo1^YH\t'&FYQ!1?eEOI'Q_-@(<QR4t/Dg'<M!H"n-')!1mpCXl'@_8'c-M%%X&Ru5IVZq"/Z'iW(2=l.m#om`LHZT(8_gLfp8`[!q:5fM1u5i"^$kDIjk<[Jh%u4DOX"CrSr[1+$p<W8'U"Lq,YH>NoCOk"1joZ%Mg>XBCerP7*J%dPi^mT&G;HT=VM'GPNf'=Z:%3cq=DkEuYCK#O/J-)Ab63i!7_eqMTI&\4Cdf+)C*7i$/%2`sNq*j[!d@<tlHeEO%M)Xi:XVfo@>P8IRaLu'J'r][a\W95pA^"l,b-Xo1i:PgmWaRAnEJ+t1Drf^*d6*$n&$4n>&*@dlFTGtX*/HX.atE2aMgL.R4(<#R%Ctj8LVATFcSK!oPKAGp2fb>`]<mfKsU%.u4YO'kZ%H^dTh`uLfS]GQs`cXp=)=D2`o6qYarfoS:gjHR=gp3g%gBuQ95r95<a]$4Q%mXU[.Ma%i0Ppat<D@fAHXoVQpbM_L6C-k"RAab;@eJl[^'>K)r\GtZ7)E#Sb^9J68[\gHQI4DPLDIX?Ba?bjH$WP.H+GDH:RH(i`%0&W6"^=EoMTeLkEBg:I1hp[RuPbIg@dZ>\5k1oNFO8'PW5/>i-"X%7u4RXA@A,LgK>.k5LCtc<LQ5IjBGN-T82@aFXoJ;h-G6S=$%L,*KUe_;XAbfI1X]5<cDBb>fuG56R=@)>o)=;$]T5[2Xs>AX\thuLQ+XkpV".f*DIO<)j1PllIFBXp/Ta/JgcboZaf"^2-E.2&OP%H`k-I@Q"[<Y95ajdhW*k\RpLl<F(Z'MVT.7=Sjf-@V_M&-t1bA&(*WEM&?E@,gPO6`%//X#0_7#3-EgcKgech!e:=Orc;fH:4+"'%\mjXJ$YZfQG2rGP[Pml_&%e>a9IIP*N'oRc[]oX_1"[4q*7WWBL*HSNL7U$O+,%6)-jhjG-tn32QYA0&B/rE`Rc-"7F-bQD@jM%W%`ugN]BT<4WnTTNNnqlSUqZs8dc&TZKD_pcr-3Z:@5l>XucCjZZ4Ys3G\0?0@K+N-\K!s?!@oa\l8EYK.Q0?0IDVnjV57jOZ)KdbI%5\rC89kbh+&t"q)("W.+,*@iR0MJeXQbiEsh5P3-I*UL1]gM/t,]m5>I9'"jmha9nDnENFD3Y'=BP<F#@A7<p@I`$&#OH780IoXa%G^TM?SG/`mnF,Y`(3j-SeQ;aVda9j&oP'3cT0n_bKXf%E[QtKV;[Bdr2Wf]F;YOjtZK]CN<^HTNBO@,_bEW2ZV02+R^EF3[03Wt0%'mq20>Q<"WYLu&JTilW@a\sB%Td&n19VF6,m-p_aGW<%Mg$Rpb2V;3AFKIi]WuVa%;*Ze5mn&1aBpf$B8ouoGb]a$Tb[$7l":-pQ%ZO=sp;a"!;i)$<b'Z]]#"%],Y(&=dS=46RGqQ&;jXf/D!LCr6$>%UNa%R&mC+&s52^=MQ'IfCLrr%([XaEL`=pmhq?p>[)&,k"/\%hKonc*<O(:,*[Lg!9cis=fRlTPHAl\.%4o<=Tlk6DKML*`(7T*auKU.n8#$E;GV2"DF-PRe>]STj51s6gs>R/U/A&1R7G/DLfKgk%4]lVe!Ge9G2<Ci)$;`&?P\@en$<CgG-)$4AQ6Jr*c0/Ouc)UFghh_]4Yh]"!QO*[-\!>jIU+Y<b_&R2\?q,>-=6@`t@fW2Y[QJ/)%.<,u+B]kl]DZOcnchq(g=!`rtY[(-].CO542bF([Q>uRf13:c0QZKKd?]Uk(lGX5@B7CXiN#A@/>lXB-bA`1iNqpF<dikq[H+U!l%SCp=3a7$tJU!8K2oitt6N1co0AB.f(WRC2F1l'j`Dr:s(W;s8P'7hNgTHOK*Tlo0(7g68t"nb6g&\/KtJ3ah,9do\OJ@^LX4/:Ih%UsU0Jo8U)7jhjVAMjU4[NTGM0o?+4jJul/U2'sPN.=P^(V_XG6"ium'*/e-4=NL]RHOLuA*BIPMlVK.A&\RCsq'>&5VRla31H;D,%Qqn`:FA?]a4p*XkD5?D[)<_H$QVT0*Ut]W7Hm7Q;b&Sf-K7F%eR>e/mpV:\7i'jV10KMq;6&Wbn\/jp%Xr$GTL)gc=8*j-kCDgV$%`[h@IBYuVu\P8BCY'hNcFc$PlVRZaAqTb.iD"b4&B)gq18FeY)QI(:(:T:i/j"1p!ZZRco1YJ;%$)"Cq;h?sS.MmY?=#$Ar4LP@m%97V\Q^6!a"4SbI9@RWUCl]/ONYSV"@+C7q*a<n(cYJba9@E;[hqZ=q3pr`U7O)s`[1LtECYP__ZGEX=&D>%`mnur'f2uiV:s6i0S%,:XPu@Fsa^B_HuBJCuHM#32`0+g`M<5T-F!](ZKc%D#p\m/=kU:5TUWC`Z1=!t(1`^DKbH@NiWXF#2isT30")P]RmUB`^pa!V!pI%U\2s?S\X2GF#Nd,G+?[jYae@!^IBN_a]4$3W-'Bc`k*H3auar5+>UlQ7lS+'6qK^*E24Ut-`M\'pf$nPN#;!g1%`KC)8EZefK;]B%=ORJ)YGP3qJSWmPjHcapD8%]70"5?]QZ]Rj:]O/3GuJ<WHCCTRA:.<?>5rUC/Z8Q`*M>=0U9e4NCTl?W(:4Y^=4.-F`N\Mn17W(5%bd<88*b8dJAp(_FiRgWt&rps#m'6&EiO\g0d+oURA7IXT5DrV$0tB`pNi6N_KGANt)F=9\*ME><HeoKnh?8"N3+4-U8krU]2ejXS%9o74\;-q=;b)PFd>/bYT\UNFP'&p.p*i[dr4$G@\ij]cZ\D;^E?[2F;!B:;!42Ihb;=Y]#4(=&IOo7Ulb\#.N/UtD'Oc9LH4H;j,%.PZn=57([%o&*+MpY\gIXS!MF-^XC[Q.JV%A7\k#R0mINe!n9)OWD(#T9'Qe9=m6Qp4l`tOg2%B[;i=+,+Vf72@+R8D*+la2_]+l%AX^]0j.,TO-qL&s!_AGqRI9RS0Do)E(`lYlStcNPk#;;b4%WI"g%oh`!1g5%.)@.q+>ADHL1)FA(0u@O%[>3V4\,^DF0@J#(P.Z]%#Cd?n2@%P2e3\[-^8@/dE`/gX%KC_5EB['=@23#g8,71LDIqb/dVBP!kG)ZMVH`g>Du_*'a$k#@a7bE:1\Mai'YW^*PB2+_qkIT6%is+;3jrVD3a)rk%_//hiQ8",Y"<EutIlT[LY1Yd*qiXX9MEh<gM$!RgJI,MTe;Uo"&2#IlhF\>*bO#oN+(\=KH"L[H2Zc-sVR$?u%6M+4r6-/.:*VNiuJDMg8TKY8\I9AR::'lG#dM4Y]D:'>cM!AL:*YGQ/`%328Jr>.t`T8?fE<k>h\tHjtnKL7bOuO.$2c0Q4\Xc*.%oTUMGSAOpcBM6<O9iFLhicO)!Fib$1d/ZX$Lm8^ZiE,0EmZ^,VO7B=&SPXsO.!i2TGl;Iee^!#PAes!>hg3!1YUtW>E9+a$8c&.'%\2t#0GKPq-kF4K)dhYXP_p143"HYs:QsW\rO_WEdLXrF;LFFg\\t*icU0-l5r(7<NDrY.q(amk4>o2=,YQgXgK/7n_,rENA$CH%b%D"W5G$+E0oI^&N9@E%Ze#jCh71S/ag'k6.C>JOi$!>Q`%B;7,pEng0g*S^S9KID_n!bX4BFL+'k2"S`UYG[,c]fd`KAJ0DV1&)C<%jCD_IkDDms=6<%5a*6,&^*6(<c>Gqtc*(H_.#s,;f!9DSf@NkB"CI(K'8LgumHa#r;RZ^QFVg1aP-E[3)W\!'IoqsP5i2=eOrBFE%RdVj"?>/scq*()SFG#k>rW@kVqe84m(111Th\EWmRT;5WNk5p*YF.dr/E9'qkA/Q:OaWPR3TGus`nS5K!&p)'bO=o[Gjs]X'nI\X%d/:<q"ut+JLD2gS2F]!i]uq/OQ?)'k)(^rd9^eTl9E<oV_SuZa1:;$Y;;6!DNL`3nLO_=rJZ*X9^5R,W>ge9ZQX[]ii/s99iu]7H%2P$b49[EULI$,sb=e#LXi.KpA.tT5KYV*j7T/)-N@)VMV'p5_Y,j:5,a!Bi:-EL>LMI@8W_p(j:37(Ce\tb1SM+k_\n"@'R:$kU&%E9m$NSJpbuH_55gRR8L=i1&sHP#Fm74tqG#3JC;CGD=LM*ue9HVopO`Y]6LB5RfSJ3q">P;Cl=+4+_"s5VC1OFl8$L5T6ac1*d18%S@`SSlIP[RUc'2jK%9]FCY)C@Gm)VI5V;?CB8'Yk13VC'J7gF$f2Qr-GK2Nm<0+ba:#%KBSCtZ^<f'(R)h"RK1241.l]X/pUe+Z<%I-MB@_3_]X_YnlN-](cf*O\s>k"M1<R:/f/_W0lgk_0XXZsJqu7=F>B/n=G7?o8ff&.)gjE%CVl\RV0/W>Y^%*&uc2@;SZ!s)O.o%\p@35eU`/A&R,>.`Iih!Xmm'g9,r?A'HBlo8cqV:WV62s\Za->%S3>,7UFP9$:dU"el_92OslO.Q;B-Cfj^6lH1`k*-TE3,YpaJ]%jJ=3);bk9ZmaN86UShil+\j&OSm#B7fF\s-lc8EP4!n_%ETkMBhn4c%n'#('Vp=t0fS=$J/U<F7Z^!b<:F-O^Zik)jam#@d_O`k:%Va<"ej9#TH/kV9S`qi"kldkN+`\>G3(7bZ62\GC`Y4:,1^CgtE*d!3Q$MCt@1J7sXra>0j4aToMgRd$_$$92^,+k8(O?aiC>i%V`%9fmNV9S!:6!BfGbX^PKL"(]oj_nF4;lAN,n,ZML5iUNQp>rP$.J^[of:)XG1ckJ0^M%q.5Rqp@apm\h;YS1=k8"2bO^I(BF<eTdS%QIjif3->hD]Ykk:gr<W6Qk7?#k57<hb+uModrs"nA-KuB\Wr+a'WI;2=3X:!Y3=Fq;l<B@;in0*1AZi@cEpD>_;gP\gYb/;juJ96%jG\+C.S'n''$1HUVsbYjPo'gC:lZa4GM40L'HDqH7`gmZ=@Cc^QmRph8689fX.&DR\pN.*+t*'XrC$91Ws%^rAYbhL)Ol*l2+aP'%?6`7lGF$J9l^&rZq)3-LFZ)\!a*2O?;Ijs%8c>J1k/b9NVVSV_UD.6HGAbdZWr`,KMrBXO@X]:4I&Gpm3%SeGn^Xm#c#2i!)Hs2d%N=]^_RO@uB9p#V(f/r+F94i8Bi)]c;?N4r-0U7:oJU!]pcKb*=,!O%Z@Dt.jP/EUF(i:%N1;ONlflBB70[#1,0HK!1438p382Uli%1uOl[;oLNjBgc-0O[uXJ-u,k^!hcu/bnlBK]BRV\V)0CO=MLQgX=8\3UjU5c0"W1H7`a`B,Gh>@MBc5J#_D/;;5GXV;7T%ST%cE"%U"BLB)6fSu"'2GW?"CsJUV;r:lh-4FoBS[EFA`1iC%a-(f%[P1b1f?&=sK7Vc4T\cf\TGBqBP:ZN')dm9Gs1gB8GY'm#UmN+(Lo%%$UI)LDT7WkYbS"OF?Pi+0=IOuTiA&e9VZqO/JuC?84b?LpbpU@./9>l1E8Du05"cQZBH5ui:o`:m!Q\5LOl%Q"X6XpSV6s+]H[O!%/[HZ1]?F%2!`T1@R0dHjmoJ4/Jp+^3<c\<=<$/9Ij%+dRJO47jFehiXEqZGiLWMWmqfcp1G#]aJ:/[bB:^$'9dbS_X(VI%>W$Q"5%-F'Yjj[0]GOWYS0[1up/!m<:h'K2nfc"dF_23Ni:XZFhnA%E26EpZhpEZ79<b_6*`Y>MQn/X"gHIZ03a=Cd.p&HN3%^.L6#dk9mJ%r2%;[B+_pJ*Q!n:iYTkdlpW_siD6eIJYBIAIY$Ri0;E-LE?_A2aEi^aMcZ-*SNE8#[$V,(&AWpV[j?j1,k/8h+hrJ9V>:@c'ns72%00bD.[<>Xb('Q#q\a`R<iY#JcGm^6qXkRb3Kq2afJn=3uoQB@/,%C#AYJ6lF8lc0LB:2q]5_0M'j=$T`(Qp7X,cM[?`K-MAo-e*=%%/fC*`3@p4<cQDrM9AX>-]%rYr:OMSGLRHXXo'Wtk3NZ%AaI=F"LA)5qmiY,"9BfeG$5#7VIXXC-7Dp&:(NL`?:'[P<S-+=c(l3B%:[57Mo*Toq2ZIB?^T8H49TKu^P3BVO,h[?o5AfUKi,q?nTc%niZ]Z`,IKm!^%>8CO`)Z,dOC$5;imm@>6K-D^4ttu3HGd=^A`1`X%c*2*LZptZ&Z0Qeo4OJ:><J8/+e)YaaU\//)fn;Sh2`?pLW2e)iMEe'"X@*+I0>Qd5gc;PDb0I@H2FiR(jk-F$jJ$c0mGYQP#Vt-0%E;1Pc]fi'76H"E?pUINK(Y3J#L@X)^!:=nQ"pJ8E8UuQGLi<aR"5L`MMXoPUCXYb/Sg#_8,u,tF^PK`=<Vt$EY5Ch-hfbC4TQ**g%P.2jH"!4XJ'nsIYhE,XXL)"lDeN>?Gl(@lkhmg:BMW4kQErGf7Yn/#rTb3gVc#mh"X^5H[n*fV:o(Ne\nS>JaP-1"OJDV@Oo);6d%JG-2k7)AN(Qt$M!l="d]<86O83:Co-m$<fVh>HHRL,ZD9P-TH_dQ&JA8<5^Fe6k'QX^iu0DqkC2lIR2Qqg%TZF@Eu(AYSItoOCZ9%JbUTO5ejFIZD!*ZA4WHSPAC4'J*9M7OdAmlO\f6NcU4o%UV&C:$$=H<.+caR&T!s'"A!8p^F9K0n_nUQ>a_U?,,H9iVA'H[c9:S`%Q!`f!AU5p#:eDp^C-7F^!@1UDNYlS;_Fd$.+hk+Z)rp&(8]"&EWJT\hPf[0(3l>V)A8*Qf9OkblcIN]`KoHY]r:3\!+MK(\RkjAQ%R^[/M:R)Y/hrGX`BOI.q^M'iUkhp27h;JE)APIr)`Pk!R[_HlqG$EfD(Y`uC;[Z-m#)gMYY>T9rTJqeL:]e=/OU)R"e=^(sFXsJ=%k<;jbM^RUW*a?fU6@$qS9<,uQYdfR-e@_V?!2.e.7IP_9/(:;LX0aj8mQ4oj\#8MF8d%ars)$JRg8W#2:o*+X@2!b6SP/3E&o[5V%ObfKVEd>Q=$cO8/U.bZO;!Z"Nq5L>X\BM+6^!KI4J;TSAbYcu5hKFo_eeB+=ee@$n$D7;&F-kuS*[o"BfI9*$PjN9D0-Cia7B>/h%!Js*PPN+C>P!q_s'!:>4p*>PA>j"mA,.'0N/DI!"YNH!s^Lgbqje5jqFmb4cHHBgj)'=a2$B".Ar8?q]V07K&S0$EnWQi!G"]Sb;%9BC2G@XaZ7.Sn2ur1_k)6=%6WS2PKMqK:::I/f';(&"HbQ<Pe8nLQ&H,+R2o%2J3:h:'"cZ#.H+jL)L9E1%nX5^JU%kW<FD>uuIE%(%)XXGp.i&b,D%BP@N3.Y<Mt#$33rd).6>heudbR4+gl)T.*4oj4nm?p\HQ6W"rld[^2).oNO'u6Hai%o$6&<`[RHgQ[C<=FO+i5%9GB!*o)eNVBWk28XOK=WgQCYnMPmEt_aBPCa$fM-k@Z,;*dr@dXkAmA^b_AF/*1V,GH<U)M1j$R#nWYk'L=so1XC!d0f@pj^HDhd%E40g74"baX)`ic;?m@XccMEsIS%`^Ym5G2h^%pQ4C4Frr]C#nsAZQp5D@`%mT()b.3URgS(Gfr)Z6n=GQes1tSSZ?;lee?4?*9=%%K[X/FRjk`u)W]bsQI_7(+b1Z3BcJ9Skr\JX*6/8:hK*Bn2p\<Il+GBhIs#+I;`sH(6q+!1a"Y/]b[irq96tb<Argelnbl%3?=_?b%8,pHXA_%I]:GD[\8K&T@;GD[Phf8KW(SB*YF^1kO=$dPE:Aq(O[BFWZ2]'H1>kN=S=8#T0G&ak?=\27_!m4C<-GB=&CM45$dL#+*%BIVP4Hp%'tiP'>n_!fL`np'Mn;EFU<aBA2tZj$$<Cj5T4nu(0Flh8rVY!<__kFRB]icDk/,)T;tC[')e*[)>2KcJF2D#)\:3hG-X%IVA<e^hl,1#XTQNJR]bGY`"'&`L6Lj#BP\j8Ml))HS`XtTA.G,AYSFreJ+Ql[j4N74(j#5,sjWRDl<C_[Kf,t;LPEq[n"Q>8<g/H%&J$&-VEttm+df=_XpiD:8CfFDne0_6b+JOITG`25*1*:iU0'hZn(&VY$L,(iK:<f1XU'*EODf(%HR-Xtgh]3C1X#HgdB(V%qqEqT%[M<\oe!)Pl@Z\5MjZLe[?s+oE=s7g/`MoLR$Do$[aBQ1/Xct/9nms'"Dk=g?j1b>[9YAnumG5q!D:&n#7Y3Fa1Y_L_A+p?mj1:sb%O3!P=S9S&)rl\52R0dFrDPhYgb<2>;\KajnZ>N35Vqmhi(>[I95+ZCA&hC;OB&g@7:5^g4Mh\'2e5udQPardf[BRO6\`q?J4^=3'%4n>/-H>:](-QK)q,g+Y[`c*skd6LB`_M3$Al?6]4K/1o51)::Q]gMa_:n3+5#B/b7kB`;^l7n6<o]0GH)3)L(UF2bJ/6lSu`q@6*%o%4$k)MoiGQ1:kR-;_%17?%@l)@u#A.,FDE,B\HK7i7jH2B_Cs_*k9-s&GPgW>DdES^)e>F?]X;K$@*bb]HMMUn!4$j1.[$5`fYS%fWHdrFZ]%+l.JMaAg6cp[d9Xg0n`,s0@_(Rq)Q@U81:#A.PWU0!oD9&8c]Iu*Sp#7$ReTBSh7.Z#r'P9(f]$!\(:>M^`*;Os5<<o%BJR1<DelaN1oEFl::*&OJDqm>_8ch56E&F*95:ktrmG]Bd3IP+ii=FrF!sU@4F2sBd#('ZgmJg8I\(g?,@,V0k$#(FpB\[E,bG9o%nq4Et=+6XF6-mT+6.*1T70B0[.KD%\U\>*S[OR(g5"d`KR)&.'Z70^e<7<-E48bd!=&4!m.rML(.V<T6GM^JJlPO"qX3=eL+?2)e%Df#EsCM'%/!;p6nIV/N6e3m!1!mSr6qLT@&,`m+I,nYi)'Pbjk5XWDpa3C/LjhrMtU6:ciR!bF4Dfs*?R82%`P2^"U70t\c5+?qP%QK"P`T4#JY(Dk3e=3g;ipAa'q*)G`2p`q]-B6J@PW(H*A1$kO+P/ri`7XA"],koX5-<^N,3d-$nCFdJ[;E+eYGAc;1b*E^][5$Y-%j=$HU6gK(8l&7cfjK2J27[!Xg_b%),!`_mBW7P6_g&fGle_3X-<'FF:'Ko]B1J.cIHnG)(@0;_7$+fQ6BdA/`Y':)cM$SEB08r[R%jht#B%TY8P,6e$J[d&rr%:nRVrrbqM13or/$;t6U:KcN&G`j5j9#>Ag-s0#'j9UU6OG.\\/W2qVlQ=ouo,LWdU^stIV.`"AK!C>W%gc2)ter(.U]mbumR2RiXh1sk:X<\%/-o3$+!:SF=hr#Rk$I]cXr>#WQ/s%ZBd4hTJZYqX4#C^RMIPl2?M&&XZFD9JrgOH@4aCoo]%b*)'\;o7e:@+EJa"A7X7^:U<7]9onp6ED]EA;A!;d)*b#mL)TkXX)?26O>0B[t`Yn07)7!cEoS5?!"SA\%)$Ph`iHkT:bLdSN68'%l`P!+SXdu[Ml0]A'C6A>!`OuhT%#;[pSWOsgbY=%MaUVA*l`4]J3mGV,D+1\0#pftk*S`&Y;XA-Me3$<rt&L(QlmgB9M$(lSP93K%[pK2ZH(:X_.pnE`jGo=Q70%EuOFeZL8n*M&W1&o;,+b:\<>H!P`BP'-<nf7l%o%+]=mK$FPY3>qf9:`M[1,(njfhO"B59S#W<5GM%.;Xr2r)n#FWLN!m,\doC&SbcaUb5H$\\XpMMOiS=5\J[[klq2M.KKmMaj1]TSkjc%@RKNCH4:pSJq["!%B&T7#_io@4[E9#fh:2S%43@M(Y"Qk!b=)!-O/UrpJ,hg,Bg"H]j3?@QnKUnCSiL0LN`M^TFuc_^4h6s]LH>KP^9`HZU%Om3Sl4-$GDFYg([#f^k`VP2]^;6^%jF-(T'X5KJH,>mj:l&+/:QjC6@I?5Qg<Xud0rtpO:m3aT++?6O18bf:MU]d;JA0Sf#n1r:LY'el']>,^DbE1(=EeLPMaF3\'Sj=Z%,<B,D@GH#4O=gKtkc2Xh#WDNiQ8\-0k0e@gb'NGbA.A+I:)th2FNQm/k%I8WFiI=W(/cr"nGlnabaRWo88(2!),3j<-`k"b([n1+%LjPr3#E&'.C([Ytf5rD?9gfJ``PioODOe1X.AT&&T[\&3ZL>1ki2mt\WfrkCpi]j7ESj#0XpjYjXIlC=\/&G'_70jD`A8e^`.GZC%UngNqpncD*>+HV0!Bt8-nkN\gY[g3tU1o6M?'A+Xj^&0IRdfM4qN-#D`4U#S'TfB[i5"G1Yh:8>#;u3CR\k`>(5(DXMDX2!g./1m%,:SR_9,h]<g+Ja>W(f&f/ida'`mJk]m$%c+6":]W4<Xfjb%jle9;6iUITU6..)88C1$bhSD>S99Y6fKND')8th%ktY[T*2D<gO-\%S:RfjK`XL<\s8LS;$-!q\:b,I9D3G3.FXta:OcZ!Eljr5rOF"MfLMfmcOEK5J2<sIbFUUI*\,3<92K=gAiT\q"\?URjo<`%B(uUP%;h>!@a?kE=-hp9D#BCY6"#2mnp)APi8X@G`$2^.^Sm!BX&Z0pBh.LkM(-cq7N1T>*aq"Lu;nd@R4Iu-F:s<R?.bcEem/qMS@-2:[%<c:7BCPc'tJsg)sYOPm*(4>,47@Okib?=N8kBFIRcsW#O&?i9r#O3'@TEr.#>!f4]M44API&\_5Trcs*g>*cu#s&nEVnrBqUVf\A%kXeUM%=2jn^dOfa=5#djc)t8].m;VL4+EU,53;($)m=tfkKI+*dcuYNF>8[0kJ.kp\Wp\+5g81<]YA,]m="h!lP%!nO6U<XE,mF=%ep.Y8>4n73[)ec-So,hAjgchV-+#!I<*9GSs.UABb:!^/a_%i]rF!noq\P6g'=Z[qV`7fn.;6sM&GDhQj.fZ/"'ji["E^Gp3-D%I%:$:36hZrg.JeP/]-oXS[7`,Wp>aO,B.d?+fOp)uq:kD1NNJ)&8JH6CE'B:h7Q5h)URJX54iSLVVc@og^c^rT+%LJ[A#\BAB^cisl%4,"p,q@R6,`?/a!!)Yg,,Qnho+W05eEED7c]N9+sDacgmmau*+V=\:>Yb^LB3kbOUkl3#c?*BkRr0=OVhnqIWB@`P.HiUMu/Ks(2%3moI"WT)HQ&X7m#*,dWqCfebbcA^tKRNIcdj5!ri.C`7D3qEW<CS<_D8VokA:/f@eDgs-"_%fs6M,(/9;cI<g4,SHHX'R1&HgShl%YKcII9rT.S.sn+E$`4>iSNWr!"#MM7&Z>dslA4^sOVib.O$odnA^=%'@hP>KZ9,V>ZEsU8aV]pN!K8"\AOHd%!ALM>V)'[TF>8\0%7F2^1mYBf=TmQUPSBpj@\`h`;f5R[W;C*I0cZ0\rLbb-Ddc,glF+-ASoM+hEG]E#in(_3?X_h+*V_uX2.<HisV9?#U0B!6&mbZ#P%\TrMnJE=J#-6(csq[HPk)@oHT@'t-fk]H+8<RXFKG!9RRin(BLB<_Y^^]<a%rSgi2IP(8jO!NEW_;!6':GfMNr1=,l5)SW"[t&<C%%Xb$`A_XcB.o[YW0NJZu!$8R[NPFJWgimhsla?lSmq6+P,&#+orfK>Bb(RrOZeYBW`6U09&IXgZIV[e8<V2io5;`nWAB.":0[':5%lW+0gBA3q#&^XH+F"HdL9YslJZ:fqD8Go.W,YmU]61Tok!e*ro/M<3QFa*6S;-\uRJhe`Goj$Zs[kl.8h"P9OI2OsBK/YSKU'Rmr%L<QpY6oS)m3oP%Zj@$)9jGeLX29DKOjmQ=Qo!5qX@;BY:n<(mms#QYt;$6!Y!"3HJ]TIm&c?WJp2'<p^'8J#f>IsVbe6!/;!.*KF%CJ`q%%sT#-k)'9rf@<4pFGAqHgstmjb[\ntjrf8,dBY3:o_4d'EpdVnXCK#o&+2'rL8u^Qe+ejai_SBr<G9Qh=q(u;Ce"'&L3cm(%$as+%@G?u]=L_B6WC6JDcgPW<gt1TZM0g;'Rn]Vh1PM.rXO?^RY%s2ZBa3'*dn?(QF)!<_nXV\HHj_K@40NOf+%Huk6c[85Wan$[%/R2pFZ*n^kb0t0>o<'La<,RCf&lD9c3-7Lm*^d!U8ic*3k`P7I9(0>b?L^l)Cp**R-2_jI.6$K$6m:sf&+4=<QVZ9[ipp@+V7W1h%Hq*dp0q5.Mj=6;X,,(J^!a,HjoCZ$G^h(Z/JX.!]EcQbt$k))o_M47Bc,rs<]%W?gd9Y084AOaPKVMa2m2YKD9ifq)`G\AUQ01m7%_(Y02@RT'nmr2>'hphTJC6\ibY-p-(U59q,Qn3k?G\b?,\iLDB`pP<)Y>_A=UchCjGTS'qH-JIc04$^k0^@0bF:VECC+9Wq`i$h?%XZK,=QP)hia..GN#B+Q4Gm7odC^^JEFP`eO-7K,Nbs#.I5f<Gej6kC]f?]H[-Gi(Xk[*@V*JF_-kIN/,p43*Y>qA---?W-n^(A7t%6[a2Z\"cn2m?A;U']\`J.=G"T3<**[Tn-sT*`XDa-kjZ&LNIJCa1>R<FO;(1oqM(f$:p$rm.lnnT#.cA/DjoF#Zicl:;oYZ#>$]7%KWc!J82A0'd:OM>,$FKK=f;>AE.@5A.mthZ(IW>cUtUslA+#/:FKVZmmQ\"Bo@NOE;$=[J?nYXfTs-PlZ0'bk:JQ-A)WUf5c!mLn%jJlj1)nHH2^a;ISmHAQ#85I(#G(j?9lb4EA="D41B]^4N@BV2A;Qs$82'%Mb:-46Z.-uSS*"%IjqedKc`m3(NRp7B_c,@^3n:Nk[%4mX;R<VeX=SOGdZ'Y,fg@.4b^qg"/h!R'E`E$h.h>-/@P;4Oi+--f]bJMP_K:F!:@O@kg91WG`^R1!*`f]Jp0N(5?o[@:#GR7$$Z%!,]s/n=[Nu]>Yr2gpFq-J!`TT7!hfQdOGdTBXi"^T^N6/lS`8=.AUXr\iKLR.L+Q)g>%kq5XiXUUa)Vl,F889@dRLI>"Cmu-_A\+%>^u%M\pg@p6LrP=8id2;i4-VkBmsX>2o1^T6&D=NF'5j4L0-RI(p9S6].$KpZYh6F"[-b\7r--V8]@B7^K'N'qSc$6m!p9u8bm%I%RY-g%Phb9e'+C4R6>Cb;kYsFYiS;]pMrkT><g8Y@^sdN$DHXqHC_"W&XrM.);Ah-8IfpT9$9/9BXIMF_=Aa$K7q9Y*))fQ[e4iL<%]kY3@.$X,(a26q5achiKRg<dXChhBROlp?7FE962:\B=nhCEQr`%_1$moIV*5u(&qi>JP^1F?6sTT4P<Y'Nu@f;QV\J*(.GJXd.=%;/['S4&G95TC%06qVHKr%S>2<h64dtL@))3X6W?r7(>N4B9ld!O2*fiEVsFmg1,Qibj6*lZE\`4g6j7!6.)nr/"Zm0-6@V.9pU$@%AdSS;U0[*p=10P436n=U&HS*!cii[Fj\r:RoGm*FBY,n\+.K5XK[PHjG\3CIma5EK`%p=Bo`6T5PI\kW4Ma(:9+B&i\qfF7?*6in%QMdN)/s=f"q(?s80Y'-n[J-!!_Q'_\qL1>F;QdW;<eAaAA@t]D_kW<>03bO-V&g`WNKY+%"as$S!14YgkR2b3!41IY<'FmE*+2NF%,Q4")q7R(S=5[,R3/h%OI%Jj=I,]O;nnUPj\bAi0/GFQ:/1N2L7L$?^j&9DiMb#4hl^(n^<p(b=$VeG4\Y5_p.1K15_qot@2_WQS%p3]m-B_bc5\Yus=J(V5-9f306?EQQ0d>MRIaRqabbRFRh-4:dk8hbcD5&iHIFiE;>.SnmWGL:^:&1#5iVg>DSGtPuO#e0E[di:@6%J4+5"b!eq;0kZ6u(m2&)nWB)b%tF-u0oqNZYJ.i9BNqIS)uF01:Q\L;Kl;F)"G<e#A"_>9L3)U0OW;eeBC"_/W=:A8>nJA;/#&[>%h&3$EPOX%UWHY!O0XEOkhs=X?LD*R&X4Lt;8L_d4lT&'_;sh.HBXln,0??n9h>QQ$H6HT8bC5_!bABk/;*]aam(Kl=29n)+/YJGs%J(R)ja]Pq&\%8/E:(ni`$TVa^nZY5@hfUnNi%&;LGK+;CL]-hU3;7N2]4eP<5ffR.W2b2Tik>-NTUk1/[ZaT0(B_+Zlo<7UX^^Jt%D]Hn32R1K>=!(P^olron+,[lFTW$=uE\YeZ>8J7uI.Z$#IHBgQelF[WHqsZ7DgQD&iXs:7L<oNeOru0cF<+*I\MJHbVJ+L8\97<H%%hcWY3pn^alYL[g`lB-'NZm.**i"TQX9bS3piiU+CFG$O3.?p`n@_88J+.V=W*CW8oe_/,?iP+ePfW!]%()1<%3]KGUSh?cIi?>$%PjPqb0_YkfgCVBLi^Ye+4s/C3PL<`5\0]^#huKU=kY?Ct.4\haKp6YdL@BmMF'Bimb@4imb=kVBR3'H5V=8LEVdsK!OI`S=@$M*.%oGh$SZ&W3tf>A`t!n,KjdB'%V(CUD)Wb)ale*ofl*=F$!n+=\eSOml)V)\:ag>Ok"QG8XAi0qoEjgX,a3Oi:Xk"%LG/aYeN_"1<0%l1lMH/_:@B"d.R,>ghgV&K>=s#;Gbc/,IP`\Q/gW@O.@4N%kcCDj&LV$3B<GG&6+e!fiOVCdU0u*2-&%+bMt?_\qqqQ-nXe[Pk>=%r4u[_S*EaEZ1Dq]<sXhaKTKnkf6T3SRhcsgE5lrG?K1k^b+>$8=X<)meD^9$+%ri!(Isi6<uip8[g5G;Ki'`0QXZOF%UG!M(%T*_%Hl^IQBQeC:ph8njM3@Dr@^W;_MIA=1#I-.)aYZjm-(,+_QPBImF)]9\8VHe23`)Tm/@;E[9`]F%Fo$Q(Ad%>efD#D5gL*47*PB`a%DNaS$V5)=T?[99]g;M3TPqCk\efga=*O0.m@6'^s8BT@55/K0UCEsOk*d_U&U12g`Jc&--3hOG4fAI<Kd+=#j;YEo@c-a_b+\3*[%q)#FtXUW![hWA(2A5E&b0?d]Xl?$5!jglbQU"NY6oNue/G8%&#:mMY@fdCEpkG=YQp'@11+4I7<qOec`*&aL9CH78Ake3TTkIPUJ%H><.HgWdlc2U9V].m((PG"b!e`tRA1raa>K/"j1OpdhhYBHrXP2W;pDMK^iiSBhq$5%tm[WobasB9Z,/3Qs%2@kJ+"I8Y'@7V+/b%5'7ona47YK3o@Y@G6W+0_>YRG,KZS9;HG>+rT"EJa**i-TMr.Gs+[nNJZ-*nNXhjNXt#V!EZ>s)fZ;&&M`-gI&4hh_g,,g$4R[Yi%l;uhJK*m1sF8D$Q:L15:F@NQI1t^i0e\tfNS]@Y+BO3nT-Cj%n/.c3&pYQiE\*M2sWTO'sRSsA'^4J"e76"-5%>Gr%CTuZ48,;7i%BJDnSTcpP.,t)ZOpCqgVs6.^Z(ln6"ld86A?cE164-oJT'gco[D26N&H"&8TGcZR\Uea5N1Y3ke8GRU[Gj4Zm]IL+bVF0&,`[l^c%a3BDeVi\[EaH@<mk%a!W55d_C",9J&EPcT4Zc*'>&t3GLGtcrdE3gBmq?Ms9iXNbY<*.q2h.KemrQ^l-eY5==qrIYh/V;$:rMuR6%Ec_V27:B_e6nELqs.YWs$l-g^d*-d[YLp"na.W']O`N&)-C<B/0g7df;[KC0'\g3VWs?8-X1!li*^`*Lr7.TEB).]L0e?\iaSQ!<%qcb?/;Am%<!V'5)J<IZ+O9hBtlPEmIBltE]&028pYS#jT%/d9b2E#oTjqe@j"kqm6\F2it0b+aJOgq+j$)lV`D\l9bHiEnp,M85c%<.'cc8$S_ha`tZGXXrc7cY3X"?H@,(W;5(fpe-U$I+LWNACGmL4;9Ru/WGGP@Ku-kUTOG$4<lS!5>KN\UIj[YF+HH_"sKfAk/,J8%fYO6,<''llP5#`I*8AmMK&sI4%^M_+_mJaC*,]N7P!EeSmi>AY8B$TKkLRUPB:8d>rAa\Fk'PS.#hI=RS&t4EKRj;U<OSmB]TXu6%Fer>qa[(A3Qbqg"):322KD<7pClWbckA\,@huA3UNuJ_Mh]<RT19L0K6[o4&nA2%oNZ(Rr+:(E&E(XE./(FV%P]aDu[3=+=-6);p%,uR\sl2_@7gDfI9Q$;-'D[tfup2tkagLWeQ=,p[0-J8d;n7j\I:62=VG/ZW?3"oQ'RUDn[:nNbMg"1Kl!2i/9GnhX`dDof1I=Cg7%h.,Fa$PB1$F[b2S!)/s;H+DD`i$?8j!$'DIFR/D]L[.N0r.?6H]W_]fh$/#+Km('\4`]a_5fqkEBhUk7!Es3Zo^b^M$n#eP!^m$@%Kra\hdqp&YI`^YC'8FfS(mALW&3:?G2?W#qfXPiWWP*3E_KO.W#VI_L[I"2h@FOMSPc0>V8Tc@1>0'e+hNceBeX_k]n$T9_Rup>\%e-Egng'],,=2h`mo=]>/l6D=.$EB[_dd!KYF>^Llb@"[&i2Ue9W"!-[_,1@B<PQ&cPS-d*0tV^Df+Yc*4PhQJL(If/@oFk*rHJ^_%RXL4t71YIj6G[tba6=c'G$iiUEL2q.)[JG;e*JLgSISQj:RcnK85.U(R`Us?pAT](pUAlXET/i!R)D0o&iG4M:_oYc3aZD-V.t4h%5+BYZ?Pu2?&B'"8ie5>B)d;eG`/<Q1TP`fW..[V"PKpk@-MiXDac/8tDTg)RK$_dkPn(g*&hMMTd-V7tjsc-!_YL[AeM1<LG0k@`%2]0L_fJ(&'GYokS9d5?m?4Zdq4YpC2%BE&9o,A;BG\C2.Ss7tSeK/$0`O-m$f+cj676APU*1BTPe0/*-kQ!"thjF.,M2tA0i;0J*%(9LCOljD:)9aJZbWp=kYRVhe9E7p4IL'"mP4*,@GPB;cY^hPR#b%;c7^TX>)auE5Xn7mKXC)m/G@-RU^O.X:pX)'c.NeC%l@9mV-%[$CCa"<5o2,-Ih/]Zk5Hdu2)p4ellM$)lP$'e*=MD-.gTTAFl`qna=(X.\C.#oErnDeOfri*uh'=AkV.ZTiZ?.*g7n.8+_1_f89#%rSaH/CKT:Fi[]lWEuc5QpHklmNdEp3Ti%UrZ1ho9)YI\Ddg:7egI-:$;P9jUA=I^-3Bt#0cfF<gf-hNsWg,7=5n7,#"0$+W>7%nV%V:jT%3'kqFRc0uI:MMQ1$tRl%l)3)'2@PGMr$rG*rKOA3.QQ@u:[tu\(k9R'bf3Pm,b?bFM=gVqqte,BI:pi0=g(Hd?Wh#Q3r]Z6%EgO.GC]pb\$bf4^?BLkPEQcULkAU5dTUO7Md]r>0;,3O[\&D>H@m&(H"h1W14K`i2NTa#K7(oGl?ZR6&-nZ^rDRh?&iQ5$o+qQ0K%N?Y=1R^]RH3_*MgH0g?d)`8.GoWH9pl3Jg;F2OehN0@t1@&RO%pt))P"7DjBL%#W8mS`Z.=73H_5`O+A(Ceh8?_9<Km>MR'I3]kF%@<2nfIsp<uY(r#M$a8=<'Lgns[UV5k/FC/iH%T=>;p?^!EQuJf3UqnVmH+^o-[h;h-AgjD#BOLfq;RX<"4-j_BQI,l8Sk%sBln1g%b#uT>(Bq8k.8u0M/Jn.F0$&X-l6V0!G/1LO6cdAg=/KXJYr!n]>t)ThY@=%.Wp4mJE`d3[ol6$3[0,<fM0"s[@.,/3V$1?I^o`VE%_rY+,?96#BTgIK[apir!`P]IqoFsr%B)-fKOn*f:P0.1_E0]b^/eO!qh=IMe\1WMhM^jN=JB2U9QePA\K>NH#I=$[kM@Eh_4)<u&%)cnZM'i@f=.0[_#k7hRV"3e0=.Fuja8P`j-][CP(I.d-'`djcL!"VFQr@shGl]P'F+UJidpA5q5/PZ-c[M^QQiaa1OYSr:/`3.O^%1l$&#lf2%b't-q5?L`"C@r&RndF!R.;&h+f>N:H!WSX08!6\,tlJaN,Q6Wcn80GbSD`hkj&]!d_nn*oQfSP;C,G4Vd!QrY\Xtj$G%^Br2Dcn#MI4sc$nIf3ap$`2af`t<l*JOh9`HAl!jmC'p,"3)2!\r'UPY(N<tK/3_`#\/?q$g#AFD`9KM>SQhFn(a>m)$j<5QM5lu%7V_pe>8"d'*>LQL8mUU[#Nt7e(G0%@"=2<`4Y>WbU+H0raMd105$IUf/jeh\9m8`b1)cJ5Q?g!24aTjOEgqd@Q<ZgBGr*LY?@J^m%:LK&d*qhH;5T`8oIe7XN$+lU#7WRYGI#RR;I8JoG-&o>hf/[fF-"R?sEkGD0gdXY-_K/fA>;894h4Eri+-Z?@h`p(R'OLQ/.Kr?$%?J>GW6\(Rl'q^/Hr,4"@qsk"A=!4ai+m_._-36f`dT"-k%YgmZ!!J]tRZ[T"4b#1Bj7SZTkf/d1LFWn^:,^q3j"ZI8:V%of$I#E-%d],[M\csuDEE9ITN:jnr=[[8T=Pc8c;&/N-2rhIE'"6'/,[6?iX(9H)_RAC[<k!7V5D"^O7o2"9n(Ipt0\j=Y=d42LS;qn>@-^Aj%e=Z)ql#QN#F7T:ed(4eM/XK-]6%J!ZTb'[cUkf)bp=DO+`OY'JbjC.R[MG@5-oa+REJ6o\Wb?\#5l?cU92Eeq;03l%c/MP4bXMYd%ic`?7[d0mk_;FA.dBRVt<R"dTLOb46IqdMHHnSNSD]]qtZnABZ-YrP>(7]c9eDQ=U^"h=W32VI`@MIa"&rC-$^^'"_q\i>E`2`OB%"M%\/Nfn=p>86fprhe?H:Ys<89B>I+:)*8g//X\AjsPdm9gF:5%MZbQYo7fgLORY=;]Oh3f.i(<YH.h:So#:3/W'qaq\,3]HUa=Q%%#u,d>]YMsS))8)](6g3C^p'SnLdSJ=6Wf;b]$;+$s7*d)^q64%1=@0NdBIT?rlcsm=nc-ccCD=DU03&T,^LmeO[p9ig,gLKqtE6%l=G1j!2Ijen/;_\2Na7hBBcu$CTm*5!rdr:>>[5ij?:ARZoBU39'qaE:an\#X6+%G-)k\;TKPhE;%U->^P1Hf*6:_;.IWr0J2L0d%5#6K`72gZ74']oJopG:A\:\Y0KBRgSAr_Z('g[]*qf+Sr:J$d9Njf#c"NVh;9`u?NbB7*kM6oqHo(W6t"B+Thh!/i&4@Y.,4IgN4%*=Z5f<M"#6\"F#]?D5l`KHto"VUj4u:mO27_]S64`u-C#:[42%cj8lV,)H:F*;$<h%?<95p7A=&a5cqX4bUdLeNQO?/*XrdA;c::%?)(>TP.XV[!c[WMFd@OpXOYf5i=&fpUJp(!&kBPO#*g[T2Z)a3#guB4i'4r]B;XSP3-1eKh^7#]HQAM(d"CLY'JB>gpIu>s784sl%2'N'0U_[2o'J3I5hnWisf_23$Yc>nd+KF.5#dX'=B2p^CpSkltMi"@u;nIcL;/ECApQkcth)1"Ml:^q^-LMPK*I>nl]MPn&d(Yi6%!i>q=+ECV$Ek[H"dMfYR7\2ogOY6k9=bN.!2^<ih)H(@>'A6h$OkF'sipBcpMXF63pX;N3XQIOgOVL:T!VpWi=CM2@aBWUX?e*S?%V!5<m;/,3om7C_,&Qg7'CEQ2q*@mo4?X(W@634!HR!`1R'>b\Thujriq"==b[<k=cc#?*243C>,g>#EDo?cJ>KqLT1agEWorPd,@%!$E`VNAmW%Pr;W&PBKcn-0]E6f\%%Z@@1?4eI$Oh0FVN8:(AjPE(]'dg7X>ed%?f[#H_<E?-<$RQb-05!#=@H.\.]=eE)W4Bf[A@%j4Z1!cYL/>r9rEG9ao+2MQuD'>7m((5SU8\e*F_4WId:(gHiS!\5GAkn-I1.HJO#QpF/^s5[%Hjbtf9Ng%Kd@8sN#`7Qsk>/*TX%%P;\;imSD?,)Ut03(>%IC`m7/^(YZ2A7s-)(jl*cf77lj'P&2#H6',Z5:m/jkcYO2nbN(h;K)o%6Ss2;ViH*ikK\a+>3K`LdrGFQ/%S8rQ2m*dZ6ToLtE9X76pV-JNt]04b!m(fB&8P:AR@JJHVVC+;UEeds.?Mp45jJo@A?+m`CPblW-a(/\-r!5`EPVNjeoJogqGIUHo%$ER]F6inXaP>Z#MplPJWgsF-iOne?u7SY,+Na4Ws*rYOIREb%,.oA'N6VGt[Q7roS3s\SmV\q\'9;)/netdgI4\>\($oOkdiC[D5%EgF`=BED<,TO9f4IgdR96`%MLQn+3#G;K-bRF5jkhaPAL2-9d$hTTu^)tdSRIm^N^o?s;UB^R"jq_^?j&qo[[4a$ZprT4CLO+YG@%i.;Rb@_56-EN#lT#?Hmbfl'cF*gp!VH.o0]"cLFKq!+;-BG!_Fq81eGefO?iGIP*dD5l6iQtXunoeY1iW/=Rt`,4$,CBKXFnilJN%!pcn%;qni%qmpVqqMcc]m)+V/:2YGB_7(Z*W0:?WlZ4+%s3NED(RNbOcB,TlaT41VBo`F5]A^>BhgB07CAfP'*]2nu;o!81i.'-*%$#`a!Lh>uXKue=CCG\;11C66pGm9!AVq;BKKV%$@RP.9)B`5@6oaf>^hc-*9bF.9&Vr*oS*2fuS*)'IHF+LV?$1X4lZClJnRQdlq%j@Y@@E>l;YW"_fsdGmen,G>7Eq5L:d#)Tpg%.C2d!G)c'\Hd";W$%@K;@&0L.J"NA_2.o>1--K%=4Np5VF-$mbZ8Kd7MblGCb-9s%`tS+<[J4=0Cc`qiVnoK``r)[][A7'nJau[/QGEJ`"6L<:RI?fRg!u+"2dMc/c>d_BMS4%QI'B`$HHd$4c,h`9=GVS$gOh)rCcLf*%(X3\j0&B763'uA&7t:#O3<i#3f71o/e,s;.g4ilT3;L5[N&=$q8+Z\To2:,qWTjgunbN-9n9#ia/o,L6g44t"YIcmriGp8>L-t^'%=3D/o8O?a]lcORlTfd8I*dTK:FRi[\@O1bd#a6[YT(aSPK.=2FB_NiC;rufUR69A&((RUi;)O!lkt/F!"Q(d1raa;*4#\#X^XL%d%5fnnl_cGLofM]'si4,?mp;A(X'CNtSo;8r"NR"0Qp^ZOgni_Yr4Nk_XObfd`>_:KoMAJR)[=6/-fRq4n05sO#PiD;JBWH%[RE7B*%/9F*.#<ksiXSH,(7d@ZgFmd(*ob<V^-&*G1FsJlkq(<W`s1&)U02.uc=,l1ghsT;I&`%W`,B'Y64`rNQ&>o7PSG6UZpCJVq\"Yfj%M-'X0/Hu8;L<g^"W%23s"s2#SY?jLA:H%t@/la1>NiO$89JIkR$7SWF]iCW4fo9rdlBrR*19"Yo9u8S)D^l)L",4qGWGeiQOmCLd%X&.T-n&K?/>t+ui<[\Ot2jke(0,4Ip5o9pI(?*C"#n_XHB*t+h3gBE<a2a5'i9_#0\>@aZ9A`3YBYo(DDb:a`MR0U7UAjYc]+[T7%1t&3R<.)5/s)UTO\-k^n.mJ5tY'OlAb?/:-D$X,r'g%$@9p]jN53(5A(+!^MY!4-YAk_3Y!'\3me_SN;-7[LD#Q`6Cr%T;\Ug06U%k>\87k@n?'`P<qmFE`tD7KBk`+nTYL`:oC!"89Rgr*c<nbMhGofiIQdO.0=KQ$Bpk1W_airuUc<k/K4A.:N<XAdqm='^e=cAl;pp%qf4d]<b^ZVS/&A98P%5>m`]aPJ?+K,51g.86V3*<:AYq-2K2)6N$P]gfT:U1%?^;j/U&\?rsdr15RpMjp>7!&HW(45.0G%2q-Om%%2i"L>"rZBrlU`DpMl9Ts*gHaJ%LrW2dVm8(Q#^Ne#rgFG<EB?j<mtsai3GLr]Pl]*p8qjo<FF^P*g&mfa4Z'k8JH%q&Lu(]ec*S%%VM[!]'u^hK(1][uSR)-,M)d!7n0MN5nI_^-W=/qcmfkUNJuRH.j8bI,-'tQ(&^F#$cc%!L#fQ')=E:$MG+!Zu_shKo)\c^@OcQ#T%\le^W*n=rW%UIr$j[bT2XRND<i`$:fb.[@9C4Rc8XTVu/X(AtKbW&DX7"5(ZLD"dFP'e+"OHVJ4qf#ADI%N@r.O^CM^IUsW9/,HR%r."`3=sKj5m?s_AI/Qc]gUd4<F]ljR.hjaOQ^59n6iR^0ClKOZl4,IDo_qVb3QY(>dm7)u;D^RJAPsuqF<2Tl>=Sf]Z))'8-DquJ%8t@>DIq[RYOoUt<n\.T@9FZ(!!&II4&)l,),IZ&3#p[<1\b%pnOL\ACAXPjBPS6F4Z"gA(=@s&D+l-,!I1%$o9OJQXe?SmYO:hcZ%-3bgpi.(_L72*'8j&2r6:isi$W)V2\Ri?L3rFY-S"+m0gN?pZ*:&(4K;Eh-@)uT"kYFSh%jKIY#4Njpc-`Zu>n3F1@`)`kn&2TWb%3G=-K>[i7:n]<<<7'(bAT5X\%kYTV9<:]mdAFKV2>/>NXi`cVGpV8P;8f*"`Z"3]k682%L8PZ1QB]Z=omS*)&JJX=W&7l1dPah"$%USVY\F*F[LL4042MX@bXa$Kt.ITkQLn$8j#]iKN&;Eou5NAD6o."[_M(9j"F;!DFcW3C\/,oOK4pIs!TFX$^s_PJsq'a8VoA>U@V%<!Br<XAU9E!/RIGrGk_k+RL+QRa^5^Bd\^-3+YbJ1hsTbe,@/375qN2hO$52DT&#;+u!u;eP%C?%60&>*<l0a_=oTT&qJqI2cND_%L`[37K@NN`Yi#(1"t3+9f-BMN-,IMbIJrcM`]&S]h10$nmnI_,Eg)?ah8:%P/s!Y@L"&ae1QT1kje3OQ:HRC37L^-"+q`e[i'a<A%<77EQSc".BF>oYG(L596Ts%!B.!,,o,SohUb`cLXkM%btnQ@%bL"j37SENB>Q;j"BcB6e->^1h-m)7*/0s3u3]k[k;.Zok?@"s`A%p1@S986$kK[M?@,e4?`h7IT*6oT_Zr[VP$:&[7:(=-J)+!E)gMlH>WPlOh[b/MIbdE7gbEa)\RsM_WS-B8Bs4Gq1'(C]jL8<+Jre%<.UBq'_+:b=dh7XLd:XeBDR(Tp^5bOUa[jF#h6!l5r-QO.Pi8:.AB"d$5Glg93GEFW8smH8tI.,eRkF!,BT??*m.V3m^K^`pT8Q.%Pp=p,Xl?nQA:p]OZ,0$Q0#!A)>U;3Q]MoN&:'a70<Y0j7A$a`S6GZSFal-6CC#Opteu>D#`UU1I(n%t4H=S)M:e:sm^YmhXp%tF`%ATno"g:5:r!/72p``89sb+O7I#9JdDX-G6Pg6N*2Q1[KYD.ig5q*r+l1BB:;'soO.YJo'i8FhrU#>?#Yf=;h+hGsNo6[0OfoA<Mc%E^0HY2r4iFdWP4p%sTGe[ZTrYUt.X+P/;bF.m)""L;`.fp2AH\S9SQG>=@@e8>*L>[<8KZ<fF*UX^W>OEA?i*f;Wk'-#qkXl@OVG%[CQ508k]\IL2snp;`2umQ9,[,oR6UBc)E-/\"cBM7+FEED+W)iR%!gK9\OmU#:?Lr*YOE4AQ,V"l?ik$e/%Ga3iVs2+Ln#C5Y$ao%$>I!^JZ'-G#s+sZST.R#Hj+^='!@hV;YLh9=YU/mX<>.]nLM_pBiH9'928lff.o'e$>.n6^&^N,E1e>]Q.jOQ=>rS:f@Q[>"/lZ*%Ub[Z(eo*+@MJKAta5`%L$:n2e78b@X,*ii,gD*cmUf;,kH.)o?]BU-?Y7*],;#tb4p_h5g#Vksh5D/tO_Cu#@"lV,5XlB8[lD5d]%"^9/PIc.HfW5</rfPa;_";0<*nmJ.tn*5'p[#pSBX'b<"OIt,MdN5iAgI^Im>"a^nCc55=-u*J&r$,=*/"JUQ8Epol384r3Gt[QM%83.hM3s+WR<gEslR]&F4I5)[>M8g-L:jN66nX>B]r#`+nGE\c#LrtY2LQij#bWO9"6MqD96=,Kng^*Adh5o*1f#h"@#T'Wf*GXYN%f.Rt9J+R4n7UL_\;Cr:@Y2-[e1G4kL,9D^B?=Omf-Q$dVq(T^hWDjLNbq$!!QPM3!U4bM/mjGeXB5)p6='_tt,qK)Ua4)qQfu&[:%P9+;j1o[ZZ>j!Rr:I'7HnqcY.]dc/V:+kgWe*8k>!lKb"Ckm<>:/QO'EG%'&<"T"S`__3P0b!Ns7DB<p%utF?.Fq-:HV7Qg1N@q_%d#o13#>=PHD/lR@=I1WDOXLkpOq-S6]u4\Z`Z#L<G5K=m21oPFf=E8[r.FY\gnZEboMYK?1Th5A<4@D`qAkJPd;#MhmL4dGO4hq!%Kqnjo'k6Y;6fHJYM^f/eU/*4"6'9.,J-1d"*5IU)O9nj^i?;1>@rjoL8RJ5ND\AqmoPq2=ed?MPbjHoFLn9ONEVfF\gPlA/KEd`i%-GP9`94\h#9j-EN#)rGE+.+%)p7SPu@<q,W5dX(F8CY&jD*=1Ue28ToLFV#s9g-;..N>T1E=0ni@W&UUZ;NLl]230N-W,S:R[O\r%A4;U!@pWekc>2,nnn\LU0lIo-AgcWd&!l/F_WbWdRUe&bad#kI\BeBK;TT)RJt*XK\:XPTV+.*$NL[\XeKXHt.V;?>`<2s!&FiSp%h$_40F\?2?iN*iaaHOQ&*(2XRRS`EBWF@:C,j.pF\/u-qAT]sPJq4DI\Nb2crRmLeH2ZAIc2.-tm6mWHYCFp[]/LGd8@=Ql=p3&0%1Y))-2nIn]HKoD?i1.W3bs'[7/KY>Min0QG0u^PB5MJqn(Q+Q3$U<P<)aiR=R@`8G'q2U,b]jT+(BMRhC6-Gl.LqsWk.R%g_uiY,%cfi6rX*TtOM8MS0iBgPRGqh3ON-H5i"Lm\f$=a[hLNa%BLHqol2C@;Cle,aPqp#aH5.=onZ]!l<5AZ1sJT;I(dY10oK*Y@fQ&Wu_%AD0a2-s`(9BsPor07Qe,JYc%-bFEh2LJP_)H9tt'pBb+rPl*6p-<sIE&4`hrf<$$Khm_N41RqYZAAsDLpeZ:2OVliX\31Zqoc*Wc%2%!s+GcMsXJ,R9a[,Q*jDjmFF?>17$%,GDq>N/24e)RshV)4Ai>&J-?rBJpHNs`@\d"9'72?*Ip7F+PQ@?p0%O//CX5Fk7BWB*h"%&\%WS.:B@8o:Gn6H_7A_[!AVKq/mY]*tI'lUN<;,P#mWVI>[;0M>%_Cfc.ed^5U;WLb\FuZ:NU7aGl>G4aJ!;%ah3dhJsQD3M>$M%m-]+$G6H-cTeSd``":<%libXJTOB7)Fj_(YkuX2/Ze=GDA]EEc1XW82g_\P#@"<3VMih2]qRp.ZDd8!Z2J8SAl=,+*G]c$NWaUE%%38OU*I6/ii_2K3oot+d?OSBBWZrp<>S3s*Y;"P#A$i85Shq<S$lFk33Qs@3IId0OUei?s6("[lRT!-R2E+sMA0s@BfZ)LphK;U;(%","=JocGD5Huejf#:bAb"-/!Zd7@$O5&KF*4o\&=&/!%m2F,S:VGe`ds%k)E8&aY,fuZ1QF%Cu&;p2$&.[rfW!<W@`VA!6+_HB#J%j*2_1[\,FCkFkVpAEA%1_2juM=3d--`5P]/SJXp8O5_RT`4jpmp%H3dKTM;?Sn%Y]OWX&%Rr!QHS%^Jap3q(6ag<:P8e1TY?EoXd%RjR9W^P,-g-$^HerQeFa)mhGK$?<$n`<;#BDjL!;`h4ct9p6QG^:o95)<VCka\(JMA%6$T%pFc!@lBg[H9'QucI\Ph91F-!_qke2%dd)!UJ`cGDTIDJ?)9t%;)3)R[#gdU@#>a(UKmmsQBX@N#2U3D^AGhD(fu8M[j<#qhB,pJB;;i:-Q*O"W:Q[%qU&7l[@n#mrZX8t(%CLX0*YmjhE`2p<LOZ!\bJfE8&lkt/5"d9_\IE>A>&opWVmG^?NKj-R`B)22Aj>,cIGs0@$[en<kH?E;#bT`!HMPl&uaii4.@(H74%k@W6g5GqacrPn_k+:A;i^lhVQQ-lPig(XLdgK7CeRH78o7!Ko%Dt:>n!gEsfHbl":K46#!#=i4OagHfR;+JAi16RT`J)U2rn<lm7%+N'ZS<oX!h>r\*4'OeVmAP##nd,05pf?neMDg=2M>b&'>oNTKKl//06YHu+ZEDHT][j1$:0e&d(2m/K:F:@uMG@$0D=GR.8jeg"n%1f,)"8^cn#V-d,7'"0Pi!:9^N+$s0[M^QK3i00J!f_C7l_+Rtu8YnucU)%B6+^X;RUV0.mpH(`NdXf_bG"sfH.+ZJRoO?oZ@7<8&%E$ZIMmh/n$[=c070&'=k5lD>kU2QDoEk3Mr!f]C;j+P7*KoqD+6!JA:)mB6LduaY[>MX0CKUt4h5?NN`*K['Pm<%@`M)'"h1P>5m%8Q[Dl-;]TY`L7AgpIYk8TA!5)SKoe#@hmC;B3'PFbUZG;-:=Z*a7/dEZceT(5[(&BKm6=feS>9DdiF@sp)fcref&;-/:OF,E7^&g%f_?#,j!aeiA,`@2K4(('@YL?#W7b@_IC\Z&L)5R>oScJ\8(o67>]Vs2G-dcSrpiDR@#0Ho\Q+-W-i.$mX)]u/80[LuneFmR+bb8^%mGMM-j7#J\^u3',54QAJjX7\b3,6AXRQ,fDS9AfBkH@3sJoom$".q&f531+n*:l_^:[q*a`r!R^4P!b^mCC313CU!b@2Q,S_@okm%VUP)W!I3-B#Oh6j)=NSP=uP.&KL7aC!AV4bZKO!qCAUrEMOhui`Ila)\8#i;3acsci^INcQ\jY%^85uJJ4h0o*^:;cD"H/d(A3V2%dYgI:I_:9F(M)u,L!/VZ%s:nuc;1ipLOh3:UUrF0?,!puo`;Q7C&*Le_iJ1Ni4?#5"Qpe9`n\gseEa[Y>(4r&_FAYS1U(FgT%TNi%+AbTA)$o3h4$t^T'(XX9-DB=k\/;%j_Mh+RZ%C^^dtl?`'[lCK&]pm%P:!-8"<\6j;JG3V/:CVX4H4Yb1("\rjk=53!pb1KL'TSS%@/-XZ99/a7X/hF'7"^Q\4%F6M]d7Ni?&15a8ZO!`rYp)?%^t@[-q,(DW^ZG<UD(daMVP0RXd:,Lls4-jN*6*RS+g*=JO'T'o4!JQ%mOEY/jVSF4oD^K0>]qC%bp`Jmo+&*pAH7i*Dp'CsJ,fe:75e9PK?:n8i3n9CiP9B(3o;s!m]K`NV34B+ioU3d"dk9gh_hf'\.:>Q%>be5&5;jq5BLal*!PPdt[Pidq4LIQk>hEr(#(5ahY.DNeCDQooY2-!OYf;mJBt4<6U7e1E(E(^hZ1.%t])/-INIgPed52XSB_;7*%d/4YbkWJelRJrr]WQ2s$\a4UY?S&=^Wm&pBohJMD+?d-)LGGqb"AuY$gqX<-$q:@ia#W>6%Ir;lc;9*:cBU:#1)1R%eNnh(=geG]%]a=bmMEG+Gr5VHd,9X`ObZtPY%t:P7h@;7@MdTi5h@:P\"C]WQ(CN5pTKn4)^h-@IH%S1ma%-"FhF8n236fNs@tE')s$eQWqf].V%B(t_dD=\%$l"UeQ<U3uK'RWcV.?`ktkBM<h'Nd;Ngs_4>qs?UhV\Y#4U%/E(N>ihM>=Xc75!CX@K>JU>e%hS2G%a5Sp%-occ`r\-%ZJ_5EY9"7YSF[FV;@KtP9o8)KPjJ>O-*G*)Fr-,[8Pi".$6bZUXG@Rm>,YA&$kmS!N^d&>\1F]6^%5o]h]![/YT%Z7lPZ#1;F"Da%UEV9Il+f:c6al%gEPE'kGm;C?j'MN1BbJ"gk=HM_#[Q-RM;=W\6h/]`U/'J6JU6\TI?ikCD!]kF`0'UQ&n<CIf=:CD#\[jPLgYT'%NT;p#Q@)Gk3#6ST!(VCZ>AI4t]A.#/qUD0+O'%@*R41f5VM7i9W1X2Y?_)qM.tE9;I$s^9Dg#?QQIsPan/5)Seo?!@R\*TAoa((5%AScIKnhGg"!#[;LktmJl2H?)ZjA,F,:m!ps/mNd4NG&h3U5dR#>*iZ?0.MOOE[tSfC;IfiAl0<aCO:Tf]q934>%r]af9/uGf2<cI%QEYt$04<A:Jj\@h3AdpLadD95Wb4'L8Z5kJp"o^f3SQfTnFk:QI/@:n>Hu)H"K*N1g-OBm-FN7_5u%"u]H\`@\(iX,=-/`Ij`GX*%)9QC:d/glP!QaN5D,=O_f#aO(p<ks)BrD+POQhFG46'\!B^2!F/f6WNAoJt"R7\ln:G#1lFeY+I)L+Mt2*,3Ed1\)5S&/.3TRpF!%Ld'Z%h<4.&@(q=%Nd]qk,J_DR<p-R>"@NI?l*>-giQj8o@!=G_DT%jASrSl41*ohj-ndeC-M^@+Xn"8"co]TM'U5tnZn@`I7KOTo%i^e]6h5`W![6jgla*4<c#sYRrn436"(kO!6cG.TRPrl$IRhB]DC8aju;SJJ6qX_@49.pAbB(/AT#j</#emg4DfsN\C,D5j`!L66p%e>=j,-2Ad9#81/X[>nsT(2dnKOGXb?i_SBf,'6a/UJ@k;F:6o7U=rn+FH8hcfIcDbl7o50AV!_T^(VnKf;;CaX+[MHb'lH1-Z(^9%W,/A:4UFpdd`Nt57NY/3WT.c)dHkBi`*d6!QCV5-J=2=H]:$g&OJSf_Me],>21Z3,G7hEKOkFj)?jlgH7%DOIp@t:p&7sF8@'/#<%@d=f<ChEDq37ZqlkUd@;]![nZ3hr?9*9q)!d>k>g'-=@n;W_LA/!10;[,T%fGmNe0<*sVN=XN'b'/9d>1;Xm!d;5J+[>3A\pN(M"%?%F(_prga^2hk33ruTQ$U:$G+qhF'C_X&Eqe`j3>F2fLmNs)_5p$,O7U3+JjUIM3c0<D2q-ip';atiSuQdS!o55Ei^d]&0X'>&`:%,,Wg/U_F*CF#-UHOr?=84j<t5ES[<a?`]$i2\9l;LHES36bT.2$!l%6Aj-@\#?5g+lX?+0L$&I9@Egae3_4l/kUt*6q7s'U[9B4c%O%fsl`O&G3:WI%fMD7"@5n4Vh&Kde;^==%RZ!XDJ,&l%3,g[4?O`KPZ7lOtT]-,r[!,l*bmUQhkKXti*W;E4f^e09!<0&pS73XA2%JBJ*A!M3JZB%h<0)qKnLRc7=<5[CXN=)\N>,5BNbEE:@!jE3Kj7OD>dSpi'8%hIQPmVj/'ArgJi:C/Y/60sJrPhIt?gu_/"obL+f%e$tnZLPKqb:CRZPMU=_U!<#;J5S[o,W$2BSGn#XK*Q@>A&5#8E*Q:9G=.*%?;8(GPfs(ciIANk^gnCK("Mpk<6-E.(;$sACZT1>h%"3!0'5[;EU/peoZ.n;#!a85]F\BOHJpMEMi=dq-b?)Yd9XX-?^iqADtM%dGJ#^dD`[P[<)L*<"D^kptd4k^K]Vmm?4LI(GUs63ap%L:XEg:h-X6$2&6I4G]SCV[\n*ZIXW$DqZdP;4:`2Rm]>.oEWc*0g95pS*7%XKVR0T:r$Hn,Ep2XfO)l3H(O^#a,EMVZunM;`%!Hr%mdAl@RPAn65cOm"PD(bZI_WPm6"D,^&FlmqO-u,lJD4!q!q@Ps.!O\U(C*=%gR8Yfj)2)ucBblCE\OM1f?n\d"JDX%0-d7XZkJdR%QLtT<a_\HCULPh.Fk]*=4;!ep(,l?s,L9Fcf=I[/+Z`!NM+j?!i<&TA[NJK`)8@73ObO_oGRQ+Zq7YHi@gGiX?Zdfnp'/NY6n]MT%2\1up-::;iEO\V_oh!V`AlZ]Gg23\q@32i<gcu(g!/;!hcMC9fF6CsF;b7QRB0=8,(??\.RhX=,J%d,]<\VM`&t9KLkM)Fe3d.T$%0W)/XKWLQ8kF8CcSV-5D#Gh"YAUHrsPiM2HfW4SI6I(NQ`f[cr-p3=V*/Vf40.:un%Q=8-qhL%<X<#_fF2GWl1q99nnNr(A7cL6O%D#l'ir[qI`2rY\@*12VA!@-gg)P5RD2P1nJ1s\E%=,_:t#LT"U?NNZW2#-;B/&utV\qa_>EYLZSe,C7dfB!@Y[@7*8]4O=YkhF*e%\<"D'aQ=)D,'MN^g>"!CKVKp/-oRi/#c#F`TK='gCKOfUZ`G/$Y=chU/u1$N&J^!$W=QAVjV*fQ(sY8]NY;-ira]tqM<u<b).'i#%fV\q-FlU`ET^-crL[9%a=d5p9rC0<ohLUM-T"J$!O^(`qq]8T=1`VO8)AOH'&M<2ng/Wqr@$OUF#n9[D"h3BR`5@GtN4H-4G0S1'%Q5Uhao8:[>FgK@,\u<*sql)lN>K$)8mPX%YX;e3/&3Nef/bq*5)HZR86mURk$F6-5f4-o[k8*oNEKPJu/R+DGcqBf-?jWhb;C*PQ%Y$&m[!qF&BO46S$U"ibVWCF+aX7DlkF3)DQKNMaea4ip%ZN#i?N,L.rgZdj3RG5n4XTBQI$BEA<2[=KZ.U3dpnA$k.>rOeX`'Wb]%p7JW.Ro*!`!SC"M=-/<E".uSc+neH(n\*%bNc"Qh(+;QHe0NbYq9sA"BgCcM>lTiHcUPr;o:n>6`IhQma?X1V4kuC!j`QnlUW^nN%CFtB6&9h-*/Zm(EAl003@^.%3(Y/Y;PUoOi[U&9B%S:Nf7K]Zn_X)at4SR@$o[kHFNXTp/KSI7p"_H7,=:o\51I*8rE'?+%'#Tr>%RmJ6F,(;$n6c?Qm1'+^B4e5EKkX6HFY./ZD%N_W;'iD3(AQpUCi+-Iom<&i:[!:+^R_df9!7ih"#L<S_gr\44YYQu_@72tGa2P-l%Hta8@N_ZP$'nZGKJW_,Yr5,mt7;4.b"(1_N8YT!j-Jpb57P/OL`$j1@nO4b*[?WgM>$%RpTbru[*<@/DEEA@det'=0p_btb>S7a1%%]A1h(ZGt`S5l9`h$ELY":-F02udMha8',o<<_NLPrBU%NQ4MA6V8CcEc`%>jc&l19)MlF`q2gfbTQ<W98V$8iBWSfJRUB\Lgjts%7im-#LbXk#8E('!=s`B>D)V+H^s&nD"7(PO%nBV^GL]!s5Do#hjt-f]*ZL5r&NZBVctF94_.'AtWc`?'`N"(5h.N%i.eK;uHVc_r%et#RQAkBDWS28>p=TcM4)0gAipiP,C7%u2H`ghT'Km\7CN687.hTom55;lt,S,#7GWBdPe(k@@WQWcC`>TD4K0$-E+IAYt6XF#8a%XS?3nEIl79d,Wi3lXQ*YojUUApb>M?d__s1_2>D%f24:[/"k\)ee7%L-&O;Em)4=TkfE#.\kgZT\#qgj.F65`>!_ZY\oVNY6"Fea%%Lj%SUIog'mk<661T>Kd<i3FnVcS3pd9_5j9mXbOH7&5G'$o0LH2U6LH93K^M2I;]l!#XgTjrGACHPSkE(3Z66ul=32qijoh6N(.%:?#\]l67W<KEAKK_g7ekN76q1:eYPO9h,o<'k>D]Iq[n0of^>Xfu*,nT3t=*'jU/4r,3ln_B<:mg?=:W\8D8ng[\%Yg8jH4bU>pD%;9Ncu*fX[/1e)=!7,-*GI\,b4*;H0.%Rn++iT#fSq&W.0hkBQL6.T@G6'ceb.W]rU4QdShD.Mm(R/9!kn^Z.>,VF``E@g=?TpqE4%ZLH5;XDLGF9p.P@5tbWXH`!(IPnF6&dF8nAfo2-IWg7^paYg6'OKl[>=tsL;B,];bJ&hs;>\NZ4:@[9b5>]_p"[?ZV7d=pl@2K?h%5]H9/,<J,a)pUgtqG,ZD%=I!a:Q5J1K]&m[0)XMY<AR3rePM;GGL"#B<^1gGH5MZSJhtkZn1W9q=^juK0fR!iS;p98O\5CLWSsX?%bW?IQHjq!O%MOA0OG'?q7lm4QpL`!*4_fC$SPWBa$:_*boj6J'IX,lOM;rieJi;U>-Cc,>rcdbFfsTs0a(PQ6C1(CV'BrHpWfsk\%^hWAl=sI_bd6'#`RAEBK&QjuPePZV"RScO"cfp-i$q/Hb<JQhroO)cfhQLm$aa@+S)NDr1a-ALA\;UH9hhE_nc[&2]rQ`2V6tg4L%jniJa'M7tmkFr%.$me_C"0"])*Gm^(_^Tt;]j&$Qa,2tE\.b>\P3A!2MZ.,9qsLrqQYeq;;GHn.\<A,njYe,B2FhK^=EnSA)qdBn%S;r$4\4!A+%3?=Z*K7.5d]jdPSR&UYRf9&Na#nQ6\4;PMN:k]&!5/J4NgBE'qGo8.JRiu[@;_C-$Ig*+F0GD#Kg3nS>`A%9g`+Uq%p<YsL[LUL>a;7IUgIM8k$KI#bC;eX@Hc>>e*r#(9#t4E83l)H4U^t4XNR@%8]#TY,Pm2]WWTCK!DUo6UK^psUZZ]H:o&CLihK4Jn%&LutWHGR3EYPtsJBpuM/H"SsncoWOD-AOn2K4.]-hN"@)"*ISY`[G,P$g?VFcWZ:/J>d,q/@go8Jf9@&hJgmOptW"/lLJGSDprPm%,\21>djpcll<Oe+#:\^8KjL$7YluT/,6_.?=3@^>qg-N:37&\42sbl*[N$?iHO\L"0-<bFCFlr+`oX%p#5cJJ@f&##bt4>'!:[TQ%$k?>B[!M:8r>uSeWZ;Zg?!"Wp[/df2A!?W,BAgR>;e:H,^p#FAmtuO9EYqU4pntP[nU85aQ0>=%Liu($:-_/`>i)<p<M8:(+!7gE%mZlT1$>^&TA`PWp9WgIJ@t3XBoKg;NT2W/-<195jlskZk/"6^3`nYEA-_rjVoTpfl]p;J&M0mWj"G=%/_3*8\S$?(+j;%JD7`ld*%e>.AV;:h?>F3P^QmbZI&8G50q/J=7(6enEeh3Hdq:opgZY$R2dU]]Jf773)+,=.I@oh'%2MifMN$P](&:aAmE.UFS*5^"gV&he.-%#iD4BXG&0ahVOPL-aNZbHWdc,Gk&tNA>Gg8>?#Xt#rPNU=Luuk[?k-UE^s+Cibd!<pm\-pBGC<4%2k1>o2K/mZtB-aU1/`NK#K%I%>:i`RQ#I]tFS3mDkM7/I!D1im3)N@H#>a7`&E<5fCs*[>9Ble5is#H!W@^th?A=tH)3qRE\HE>#8cj,;q'"u5[<_H-BhOO<SV3NN%gB'5.grWgN@L8h:'$3YG?QdaqY<n24(dWh9Pq^UUUJ$0,G,LZ2^qb3Gp_>U;G)<nL`d3-[]kL*/l+#n+UI1JPiVlgD[hQ<@;4BaX%O]K/#HdlD;`sBsVjB2N\C6-9cYF)k`CZ@:[fX+h$$+4EYb+i.>P-I+^f8Dml78m=X"*p$'DpV,SQ+%],'s?MQWUFCSb::2KLGt,i%UiepVGM_J1#M@ULAA%>qYk]+*/_.]E-d4EZ9-sXbJR0a,%b]MVO2ZikH)mUcB.P7-e1@Mi+2[VY&e`Lk3"eecL4egc\:;JOKups\%.:L$=0[UZABtWZd=.KOE(!P4b1l0(Qc7Hu00(1"UIRN7bIe%rE%0"s`BNiW\(*WEmmcSGB5k8*s#^0r+$(3U:2`0&-5skuhM;I:J%(gqJ*^M@n5hH/OMa3fKfgRpG5_gQqM/aK1`#M'!\]Kat#e,gBbf7slo5UmOf?BKt?fdjbMaO\$"^;')?Mct4g?MfE<9u.ZQqor'q%\(q&3L(c`"DT2Y@-tZb3/@q/V_+YW:e\,dO;'G_;2rE!\ibuR]fG^g'4_mN?m.E]WADb[9nLf0je77&/JN@ms2E(^q%8nf^b7"pE%@Npc,1-FVJ.A9!<$?2RQO=!GK=SrY@&"'ubbfi"E%'T^Xfdg7(eR3Qdr:a(gp:.K3':@QR6UY4a.*hJ45<d\)YNWS_I/*@2^U/Li%l,S:%p\D;%hgY=3&"c&amIU'Zs8MEWIt%1hmDJZ_J,]-,a3R!LpsUmgJ,/rugFjY`s7Z-K?[hkFp#FBuronn^\c$*3roqn(rqbdg%rs(A(:h'~>%AI9_PrivateDataEnd