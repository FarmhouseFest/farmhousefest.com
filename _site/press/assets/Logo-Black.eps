%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Logo Black.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Dave Shea
%%CreationDate: 2017-01-16
%%BoundingBox: 0 0 248 305
%%HiResBoundingBox: 0 0 247.9023 304.9121
%%CropBox: 0 0 247.9023 304.9121
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 104 128 8%%BeginData: 17104 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD33FFA8A8FD66FFA884FD66FFA8A8FD66FFA8A8FD66FF7D7EFD66%FF7D7DFD66FF7D7DFD66FF7D53FD66FF527DFD66FF5252FD66FF5252FD66%FF5252FD66FF5252FD4DFF84A8FD17FF2727FD17FF52FD36FF53FD17FFF8%27FD16FF52FD37FFA827FD16FF27F8FD15FF7D53FD38FF7D52FD15FF2027%FD14FFA827FD39FFA8527DFD14FF27F8FD13FFA8527DFD3AFF7D27A8FD13%FF2727FD13FF5327FD3CFF2727A8FD09FFA8FD07FFA827F8FD07FF7DFD0A%FF7DF8A8FD3DFF2752FD0AFF7DFD06FFA82727A8FD06FF7DFD09FFA82752%FD3EFF7DF87DFD09FF27FD06FF8427F8A8FD05FFA852FD09FF2727A8FD3E%FFA82727A8FD08FF52A8FD05FFA8F827A8FD05FF537DFD08FF52277DFD40%FF7D2727FD08FF5252FD05FFA827F8A8FD05FF2753FD07FF532727FD42FF%522752FD07FF7D27FD05FFA82027A8FD04FFA820A8FD06FFA82727A8FD42%FFA8F82759FD06FF7DF8A8FD04FFA827F8A8FD04FF5227A8FD05FFA827F8%52FD38FFA8FD0BFF7D2727A8FD05FFA82752FD04FFA82727A8FD04FF2727%FD06FF7D2727A8FD0BFFA8FD2CFFA8527DFD09FFA827F827A8FD05FFF827%A8FFFFFF7D27F8A8FFFFFFA8F852FD05FF7DF8277DFD09FFA87D52FD2FFF%7D27A8FD08FFA827207DFD05FF2720A8FFFFFFA82727A8FFFFFF522752FD%04FFAF272727FD09FF7D277DFD31FF7EF8527DFD07FF5227F8A8FD04FF52%2752FFFFFF8427F8A8FFFFFF27F87DFD04FF2727F8A8FD07FFA827277DFD%33FFA8272752A8FD06FF272727FD04FF7D2727FFFFFFA8F827A8FFFFFF27%277DFFFFFF7D27277DFD06FFA852F852A8FD36FF5227F852A8FD04FF7DF8%2752FFFFFF7D27F8A8FFFFA827F8A8FFFF5327F8A8FFFFA827F852A8FD04%FFA82727F853A8FD38FF7D2720277DFD04FF522027A8FFFFFF27277DFFFF%A82027A8FFFF522727FFFFFF522027A8FD04FF7D202727A8FD3BFFA852F8%2727A8FFFFA827F852A8FFFF27F852FFFFA827F8A8FFFFF82752FFFFA8F8%2752FFFFFF7D27F82727FD3FFF7DF8272753A8FFA827F87DFFFF522727FF%FFFF2727FFFFA827F8A8FFFF272752FFFFFF5227F8277DFD41FFA82727F8%27A8FF7D2727FFFFA8F827FFFFFF2727FFFFA8F827A8FF7D2727FFFFA827%27F852A8FD44FF7D272027FFFF7D7DFFFFFF7D7DFFFFFF7D7DFFFFFF7D7D%FFFFA852FFFFFF2027277EFD47FFA87D7DFD19FFA87D7DFDFCFFFD84FFA8%84A8A87E597D7D7D597D7DFD0A527D7D7D59FD047DFD04A8FD33FFFD06A8%FD09FF5252F8272727F8272727F8272727F8272727F8272727F8272727F8%272727F8272727F8272727F8272752A8FD09FFFD05A8FD15FFA8537D5252%2752F827F827F827F827F827277DA8FD05FFA852F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%27FD07FF5227F827F827F827F827F827275227527D7D7DFD09FFA8202727%272027272720272727202727272027272759FD06FF522027272720272727%202727272027272720272727202727272027272720272727202727272027%52FD06FF7D27272027272720272727202727272027272720277DFD08FF27%27F827F827F827F827F827F827F827F827F827F82752FD05FFA852F827F8%27F827F827F8272727F827F827F827F827F827F827F827F827F827F827F8%27F82727FD06FF59F827F827F827F827F827F827F827F827F827F827F827%FD07FFA8272727F8272727F8272727F8272727F8272727F82727277DFD05%FFA827F8272727F8272727F8272727F8272727F8272727F8272727F82727%27F8272727F82727A8FD05FF842727F8272727F8272727F8272727F82727%27F8272727F8A8FD06FF7DF827F827F827F827F827F827F827F827F827F8%27F827F827A8FD05FF2727F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F852FD06FF2727F827F827F827F827F827%F827F827F827F827F827F82752FD06FFFD04272027272720272727202727%27202727272027272720A8FD05FF7D202727272027272720272727202727%272027272720272727202727272027272720277DFD05FF7E272727202727%27202727272027272720272727202727272027FD05FFA827F827F827F827%F827F827F827F827F827F827F827F827F82752FD05FF7D27F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F87DFD05%FF7DF827F827F827F827F827F827F827F827F827F827F827F827F8A8FD04%FF7D2727F8272727F8272727F8272727F8272727F8272727F8272752FD05%FFA82727F8272727F8272727F8272727F8272727F8272727F8272727F827%2727F82727277DFD05FF7D27F8272727F8272727F8272727F8272727F827%2727F827272752FD04FF2727F827F827F827F827F827F827F827F827F827%F827F827F82752FD05FF7D27F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F87DFD05FF7DF827F827F827F827F827%F827F827F827F827F827F827F827F827FFFFFFA827272720272727202727%272027272720272727202727272027277DFD05FFA8272720272727202727%272027272720272727202727272027272720272727202727277DFD05FF7D%2720272727202727272027272720272727202727272027272720A8FFFF7D%F827F827F827F827F827F827F827F827F827F827F827F827F8277DFD05FF%5927F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F87DFD05FFA8F827F827F827F827F827F8272727F827F827F827%F827F827F82752FFFF2727F8272727F8272727F8272727F8272727F82727%27F8FD0427FD06FF52F8272727F8272727F8272727F8272727F8272727F8%272727F8272727F8272727F82752FD06FF522727F8FD0727F8272727F827%2727F8272727F8272727FFA827F827F827F827F827F827F827F827F827F8%27F827F827F827F87DFD06FFF827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827FD06FF7D27F827F827F827F8%27F827F827F827F827F827F827F827F827F8A87D27272027272720272727%20272727202727272027272720272727FD07FF272027272728FD19522727%202727FD07FF272720272727202727272027272720272727202727272027%2727522727F827F827F827F827F827F827F827F827F827F827F827F8277D%FD32FFA8F827F827F827F827F827F827F827F827F827F827F827F827F827%27F8272727F8272727F8272727F8272727F8272727F8FD0427FD34FF5227%27F8272727F8272727F8272727F8272727F8272727F8FD0427F827F827F8%27F827F827F827F827F827F827F827F827F87DFD34FF7D27F827F827F827%F827F827F827F827F827F827F827F827F827AF2827275228272727202727%27202727272027272720272752FD08FF7DA8A8FD20FFFD04A8FD07FF5227%20272727202727272027272720272727205252272052A8FD06FF5227F827%F827F827F827F827F827F827F8277DFD05FFA87DF827F827F827F82727FD%08527D597D7D7D59FD085227F827F827F827F82727FD06FFA8F827F827F8%27F827F827F827F827F827F852FD0CFF52F8272727F8272727F8272727F8%FD0427FD06FF7DF8272727F8272727F8272727F8272727F8272727F82727%27F8272727F8272727F8272727F8272727F8277DFD06FF522727F8272727%F8272727F8272727F82727FD0CFFF827F827F827F852A8A8F827F827F827%F87DFD06FF2727F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827A8FD05FF7D27F827F827F8%277DFF5227F827F827F827A8FD0AFFA82720272727207DFFFFFF27272720%272727A8FD05FF7D27202727272027272720272727202752272027272720%272727202727272027272720272727202727272027277DFD06FF27272027%272720FFFFFF52272727202727A8FD0AFF7DF827F827F8277DFFFFAFF827%F827F82727FD06FF27F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F82727FD06FF52F827%F827F827A8FFFFA8F827F827F82752FD0AFF52272727F82727FFFFFFA827%F8272727F87DFD05FFA8F8272727F8272727F8272727F8272727F8272727%F8272727F8272727F8272727F8272727F8272727F8272727F8277DFD05FF%7D272727F827277DFFFFFF27F8272727F852FD0AFF27F827F827F852FFFF%FF7DF827F827F8277DFD05FF5227F827F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F852%FD05FFA8F827F827F82752FFFFFF5227F827F827F8FD0AFF202727272027%52FFFFFF52272027272720FD06FF52202727272027272720272727202727%272027272720272727202727272027272720272727202727272027272720%2727FD06FF27272720272752FFFFFF7D202727272027A8FD08FFA827F827%F827F87DFFFFFF52F827F827F852FD06FFF827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827A8FD05FF5227F827F827F8FFFFFF7D27F827F827F8A8FD08FF%A82727F82727277DFFFFFFF8272727F82752FD05FFA8272727F8272727F8%272727F8272727F8272727F8272727F8272727F8272727F8272727F82727%27F8272727F8272727F8A8FD05FF7DF8272727F827FFFFFF7D2727F82727%277DFD08FF5327F827F827F87DFFFFFF27F827F827F87DFD05FF7DF827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F82753FD05FF7D27F827F827F8A8FFFF7D%27F827F827F87DFD08FF7D27272027272752FFFF522027272720277DFD05%FF7D27272720272727202727272027272720272727202727272027272720%27272720272727202727272027272720272727207DFD05FF7D2027272720%2752FFFF7D27272027272752FD08FF5227F827F827F8272752F827F827F8%27F87DFD05FF59F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F82752FD05FFA8%27F827F827F8272752F827F827F827F852FD08FF52F8272727F8272727F8%272727F8272727A8FD05FF5227F8272727F8272727F8272727F8272727F8%272727F8272727F8272727F8272727F8272727F8272727F8272727F82727%52FD05FFA82727F8272727F8272727F8272727F82752FD08FF5227F827F8%27F827F827F827F827F827F8A8FD05FF52F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F82752FD05FF7D27F827F827F827F827F827F827F827F852FD08FF%5220272727202727272027272720272727A8FD05FF522720272727202727%272027272720272727202727272027272720272727202727272027272720%2727272027272720272752FD05FFA8272720272727202727272027272720%2752FD08FF5227F827F827F827F827F827F827F827F87EFD05FF52F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F82752FD05FF8427F827F827F827F827F8%27F827F827F852FD08FF522727F8272727F8272727F8272727F8277DFD05%FF52272727F8272727F8272727F8272727F8272727F8272727F8272727F8%272727F8272727F8272727F8272727F8272727F852FD05FFA8F8272727F8%272727F8272727F827272752FD08FF5327F827F827F827F827F827F827F8%27F87DFD05FF7DF827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F82752FD05FF7D%27F827F827F827F827F827F827F827F852FD08FF7D272720272727202727%2720272727202752FD05FF7D272727202727272027272720272727202727%272027272720272727202727272027272720272727202727272027272720%A8FD05FF7D202727272027272720272727202727277DFD08FF7D27F827F8%27F827F827F827F827F827F852FD05FFA8F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F82784FD05FF5227F827F827F827F827F827F827F827F87DFD08FF%A8F8272727F8FD0727F8272727F8FD06FF27F8272727F8272727F8272727%F8272727F8272727F8272727F8272727F8272727F8272727F8272727F827%2727F82727FD06FF272727F8FD0727F8272727F827A8FD08FFA827F827F8%27F82727FFA852F827F827F8277DFD05FF5227F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F852FD05FFA8F827F827F82727A8A827F827F827F827F8A8FD09FF%202727272027277DFFFFA82720272727207DFD05FFA82027272720272727%202727272027272720272727202727272027272720272727202727272027%27272027272720277DFD05FF7D272727202727A8FFFFA827202727272027%FD0AFF52F827F827F8277DFFFFFF2727F827F82727FD06FF27F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F827F8%27F827F827F827F827F8FD06FF52F827F827F827A8FFFF7DF827F827F827%27FD0AFF7D27F8272727F87DFFFFFF7D2727F8272727A8FD05FF7D52F827%2727F8272727F8272727F8272727F8272727F8272727F8272727F8272727%F8272727F8272727F827277DFD06FF2727F827272752FFFFFF52272727F8%27277DFD0AFFA8F827F827F82727FFFFFF7D27F827F827F853FD06FF2727%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F827F827A8FD05FF5227F827F827F87DFFFFFF27F827%F827F8277DFD0BFF27202727272027A8FFFFFF272720FD0427FD06FF7D20%272727202727272027272720272727202727272027272720272727202727%27202727272027272720277DFD06FF27272720272727FFFFFFAF20272727%202727FD0CFF2727F827F827F87DFFFFFF7DF827F827F82759FD05FFA827%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F827F82727FD06FF7EF827F827F82752FFFFFF5227F827F8%27F852FD0CFF7D2727F8272727F8FFFFFFA8272727F8272727A8FD05FFA8%27F8272727F8272727F8272727F8272727F8272727F8272727F8272727F8%272727F8272727F82727A8FD06FF2727F8FD0427FFFFFFA8272727F82727%2753FD0CFFA827F827F827F82753FFFFFFF827F827F827F87DFD06FF7D27%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827%F827F827F827F87DFD06FF5327F827F827F827FFFFFF7DF827F827F827F8%A8FD0DFF522720272727202752FF592727272027272720FD07FF52272727%202727272027272720272727202727272027272720272727202727272027%27272052FD06FFA827272720272727207DFF7D2027272720272752FD0EFF%7DF827F827F827F827F827F827F827F827F82727FD07FF2727F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F852A8%FD06FF52F827F827F827F827F827F827F827F827F8277DFD0EFFA8272727%F8272727F8272727F8272727F82727277DFD07FF52272727F8272727F827%2727F8272727F8272727F8272727F8272727F8272727F852FD07FF842727%F8272727F8272727F8272727F8272727F8FD10FF5227F827F827F827F827%F827F827F827F827F8277DFD07FF5227F827F827F827F827F827F827F827%F827F827F827F827F827F827F827F853FD07FFA8F827F827F827F827F827%F827F827F827F827F853FD11FF2727202727272027272720272727202727%272027A8FD07FFA827202727272027272720272727202727272027272720%272727202727A8FD07FFAFFD042720272727202727272027272720272727%A8FD11FF7DF827F827F827F827F827F827F827F827F827F827A8FD07FFA8%59F827F827F827F827F827F827F827F827F827F827F827F82752FD08FFA8%2727F827F827F827F827F827F827F827F827F82752FD12FFA8272727F827%2727F8272727F8272727F8272727F827A8FD09FF52272727F8272727F827%2727F8272727F8272727F852A8FD08FFA8FD0427F8272727F8272727F827%2727F8272727F8A8FD13FF5227F827F827F827F827F827F827F827F827F8%27F827A8FD09FFA87D2727F827F827F827F827F827F827F82752A8FD09FF%A82727F827F827F827F827F827F827F827F827F827F852FD15FF27272027%272720FD0427A87D2720272727202727277DFD0BFF522727272027272720%2727272052A8FD0AFFA82727202727272027277D7D522727202727272027%2727A8FD15FF7DF827F827F827F827F852FFFFA827F827F827F827F82752%FD0BFF2727F827F827F827F827F827A8FD09FFA852F827F827F827F827F8%A8FFFF5227F827F827F827F8277DFD17FF522727F8272727F82752FFFFFF%A827F8272727F8FD04277DFD09FFA8F8272727F8272727F827A8FD09FF7D%272727F8272727F82727A8FFFFFF52F8272727F8FD0427FD18FFA827F827%F827F827F827A8FFFFFF7D27F827F827F827F827F8527DFD08FF53F827F8%27F827F82752FD08FFA82727F827F827F827F82727A8FD04FF2727F827F8%27F827F8A8FD19FF7D272027272720272752FD04FFA85227272027272720%FD0427A8FD06FFA82727272027272720A8FD06FFA85227272027272720FD%0427FD05FF5227202727272027277DFD1BFF5227F827F827F827F852A8FF%FFFFA852F827F827F827F827F827F852A8FD05FF5227F827F827F827FD06%FF5227F827F827F827F827F82727FD05FF5227F827F827F827F852FD1DFF%5227F8272727F8272752A8FFFFFF7D272727F8272727F8272727F852FD05%FF7DF8272727F8277DFD05FF52272727F8272727F8272727F8A8FD04FF52%27F8272727F8272752A8FD1EFF2727F827F827F827F8277DFFFF7DF827F8%27F827F827F827F827F87DFD04FFA827F827F827F8A8FD04FF7D27F827F8%27F827F827F827F8277DFFFFA82727F827F827F827F827A8FD1FFFAFFD04%27202727272027527DFD04272027272720272727202727FD05FF20272727%2027A8FD04FF5220272727202727272027272720277D7D20272727202727%272027A8FD21FFA82727F827F827F827F827F827F827F827F827F827F827%F827F827A8FD04FF52F827F827F8FD04FFA8F827F827F827F827F827F827%F827F827F827F827F827F827F827A8FD23FFA8FD0427F8272727F8272727%F8272727F8272727F8272727F87DFD04FF5227F8272752FD04FF7D272727%F8272727F8272727F8272727F8272727F8272727F827A8FD25FFA82752F8%27F827F827F827F827F827F827F827F827F827F82753FD04FF52F827F827%52FD04FF7DF827F827F827F827F827F827F827F827F827F827F827F827A8%FD28FF52272027272720272727202727272027272720272727207DFD04FF%522720272752FD04FF7D2727272027272720272727202727272027272720%272752A8FD2AFF5227F827F827F827F827F827F827F827F827F827F8277D%FD04FF52F827F82752FD04FFA8F827F827F827F827F827F827F827F827F8%27F827F852A8FD2CFF7D27F8272727F8272727F8272727F8272727F82727%FD05FF52272727F852FD05FF27F8272727F8272727F8272727F8272727F8%27277DFD2FFFA827F827F827F827F827F827F827F827F827F852FD05FF52%F827F82727FD05FF5227F827F827F827F827F827F827F827F82727A8FD32%FF7D27272027272720272727202727272027A8FD05FFFD04272027FD06FF%FD042720272727202727272027272752FD35FFA85227F827F827F827F827%F827F8277DFD05FFA827F827F827F8A8FD05FFA82727F827F827F827F827%F827F852A8FD38FF7D52F8272727F8272727F852A8FD06FFA82727F82727%277DFD06FFA8FD0427F8272727F82727A8FD3CFFA85252F827F827527DFD%08FF2727F827F827F827A8FD07FF7D522727F82727537DFD4EFF52272727%202727272052FD5DFF5227F827F827F827F827F852A8FD59FF7DFD0427F8%272727F8272727F8277DFD54FFA87D5227F827F827F827F827F827F827F8%27F827F8527DA8FD4BFFA8A8595227272027272720272727202727272027%27272027272720272727527D7DAFFD45FF5227F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F852FD44FFA8522727%27F8272727F8272727F8272727F8272727F8272727F8272727F8FD042752%A8FD48FFA87D535252522727F827F827F827F827F827F827F8272752527D%7DA8A8FD24FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">fhf2016-logo</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2017-01-16T15:11:10-08:00</xmp:CreateDate>
         <xmp:ModifyDate>2017-01-16T15:11:10-08:00</xmp:ModifyDate>
         <xmp:MetadataDate>2017-01-16T15:11:10-08:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>208</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADQAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FUDr0xg0PUZgATFazPQ9PhjJxVvRJvX0awmpT1baF6HenKMHFUbirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSD8wrj6v5B8y3HHl6OlX0nGtK8bZzSu/&#xA;hirfkG4Fz5E8uXIrSbS7KQcuvx26Hf78VT7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;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&#xA;irsVdirsVdirsVdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:338bbfdc-306d-4379-832b-15a82ffd7a92</stEvt:instanceID>
                  <stEvt:when>2017-01-14T04:21:10-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EF7F11740720681192B0C40E9CFC0D50</stEvt:instanceID>
                  <stEvt:when>2017-01-16T15:11:10-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:9f24cc99-5ccb-1749-8434-5d153d2eb252</stRef:instanceID>
            <stRef:documentID>xmp.did:338bbfdc-306d-4379-832b-15a82ffd7a92</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:EF7F11740720681192B0C40E9CFC0D50</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:EF7F11740720681192B0C40E9CFC0D50</xmpMM:InstanceID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>4.000000</stDim:w>
            <stDim:h>5.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -304.912 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 304.912 li
247.902 304.912 li
247.902 0 li
cp
clp
[1 0 0 1 0 0 ]ct
98.7095 120.35 mo
98.7817 120.426 98.8535 120.5 98.9248 120.577 cv
98.8315 120.625 98.7427 120.685 98.6445 120.713 cv
98.6147 120.722 98.5166 120.618 98.5225 120.606 cv
98.5757 120.516 98.6445 120.434 98.7095 120.35 cv
102.017 124.135 mo
102.224 124.204 102.42 124.302 102.708 124.434 cv
102.526 124.676 102.431 124.805 102.333 124.934 cv
102.177 124.77 102 124.619 101.875 124.433 cv
101.843 124.383 102.001 124.128 102.017 124.135 cv
103.251 105.165 mo
103.315 105.243 103.378 105.321 103.441 105.399 cv
103.354 105.451 103.271 105.508 103.179 105.546 cv
103.166 105.551 103.076 105.445 103.086 105.417 cv
103.126 105.327 103.195 105.248 103.251 105.165 cv
104.321 126.781 mo
104.363 126.888 104.404 126.996 104.446 127.103 cv
104.35 127.156 104.238 127.266 104.161 127.246 cv
104.066 127.222 104.002 127.085 103.927 126.999 cv
104.058 126.926 104.188 126.854 104.321 126.781 cv
104.166 106.913 mo
105.423 107.86 106.638 108.774 108.059 109.846 cv
108.336 109.723 108.586 109.612 108.831 109.505 cv
108.882 109.588 108.934 109.671 108.984 109.753 cv
108.833 109.875 108.696 110.069 108.529 110.097 cv
108.42 110.115 108.3 110.063 108.164 110.001 cv
104.163 109.375 103.5 108.851 104.166 106.913 cv
109.14 133.855 mo
109.121 133.95 109.076 134.04 109.04 134.132 cv
108.952 134.081 108.864 134.029 108.775 133.978 cv
108.851 133.908 108.919 133.829 109.004 133.774 cv
109.026 133.761 109.144 133.836 109.14 133.855 cv
115.035 105.694 mo
115.236 105.913 115.423 106.053 115.504 106.239 cv
115.533 106.303 115.259 106.606 115.186 106.585 cv
114.987 106.528 114.822 106.354 114.644 106.227 cv
114.746 106.088 114.848 105.949 115.035 105.694 cv
116.471 124.717 mo
116.71 124.995 116.951 125.271 117.19 125.55 cv
117.086 125.639 116.983 125.728 116.879 125.816 cv
116.637 125.542 116.393 125.268 116.149 124.993 cv
116.257 124.901 116.364 124.809 116.471 124.717 cv
119.46 129.5 mo
119.707 129.613 119.875 129.895 120.219 130.258 cv
119.813 130.406 119.512 130.61 119.403 130.535 cv
119.174 130.378 119.046 130.075 118.877 129.832 cv
119.077 129.711 119.342 129.446 119.46 129.5 cv
122.514 115.423 mo
122.6 115.478 122.686 115.534 122.771 115.59 cv
122.704 115.667 122.643 115.75 122.564 115.814 cv
122.55 115.827 122.427 115.757 122.43 115.735 cv
122.442 115.628 122.482 115.527 122.514 115.423 cv
122.909 108.324 mo
122.995 108.38 123.08 108.436 123.165 108.492 cv
123.098 108.568 123.037 108.652 122.959 108.716 cv
122.945 108.729 122.821 108.659 122.824 108.636 cv
122.837 108.531 122.877 108.428 122.909 108.324 cv
107.354 115.788 mo
107.212 115.636 107.029 115.502 106.952 115.323 cv
106.926 115.262 107.161 115.005 107.295 114.987 cv
107.408 114.973 107.548 115.18 107.71 115.32 cv
107.567 115.509 107.46 115.647 107.354 115.788 cv
106.322 133.105 mo
106.275 132.937 106.205 132.768 106.201 132.597 cv
106.199 132.549 106.394 132.496 106.559 132.416 cv
106.586 132.61 106.642 132.786 106.621 132.952 cv
106.613 133.015 106.427 133.056 106.322 133.105 cv
127.278 131.953 mo
127.295 131.945 127.489 132.182 127.465 132.222 cv
127.379 132.361 127.234 132.464 127.104 132.588 cv
126.991 132.43 126.921 132.333 126.852 132.236 cv
126.992 132.137 127.125 132.027 127.278 131.953 cv
136.342 118.961 mo
136.827 118.472 137.249 118.708 137.608 119.111 cv
137.597 119.292 137.585 119.475 137.575 119.657 cv
136.27 119.657 li
136.289 119.419 136.213 119.091 136.342 118.961 cv
137.493 132.529 mo
137.349 132.479 137.218 132.389 137.083 132.312 cv
137.141 132.215 137.204 132.034 137.256 132.037 cv
137.4 132.046 137.542 132.131 137.699 132.19 cv
137.603 132.351 137.515 132.537 137.493 132.529 cv
138.013 116.27 mo
138.162 116.268 138.312 116.336 138.472 116.381 cv
138.397 116.553 138.354 116.657 138.309 116.761 cv
138.166 116.696 138.014 116.644 137.888 116.554 cv
137.868 116.54 137.968 116.27 138.013 116.27 cv
140.108 111.829 mo
140.248 111.842 140.37 112.046 140.543 112.208 cv
140.395 112.374 140.281 112.501 140.167 112.628 cv
140.017 112.464 139.867 112.299 139.717 112.134 cv
139.848 112.023 139.989 111.818 140.108 111.829 cv
145.195 122.057 mo
145.371 122.085 145.504 122.363 145.761 122.645 cv
145.421 122.823 145.122 123.063 145.04 123.005 cv
144.836 122.856 144.732 122.573 144.588 122.343 cv
144.792 122.238 145.014 122.027 145.195 122.057 cv
150.681 132.281 mo
150.771 132.351 150.862 132.419 151.212 132.691 cv
151.004 132.762 150.843 132.847 150.678 132.856 cv
150.593 132.862 150.414 132.695 150.425 132.667 cv
150.484 132.528 150.591 132.408 150.681 132.281 cv
154.361 109.762 mo
154.377 109.751 154.509 109.923 154.639 110.068 cv
154.489 110.165 154.357 110.281 154.205 110.33 cv
154.16 110.344 154.054 110.171 153.976 110.083 cv
154.102 109.972 154.221 109.85 154.361 109.762 cv
156.461 111.84 mo
156.48 111.831 156.674 112.069 156.649 112.108 cv
156.563 112.248 156.417 112.351 156.287 112.475 cv
156.174 112.316 156.104 112.22 156.034 112.122 cv
156.175 112.022 156.309 111.913 156.461 111.84 cv
157.403 129.676 mo
157.504 129.848 157.425 130.128 157.425 130.362 cv
157.291 130.404 157.157 130.446 157.022 130.488 cv
156.873 130.146 156.723 129.804 156.572 129.461 cv
156.647 129.392 156.725 129.321 156.801 129.25 cv
157.009 129.388 157.289 129.482 157.403 129.676 cv
158.843 133.003 mo
158.979 132.944 159.231 133.141 159.573 133.281 cv
159.296 133.604 159.167 133.885 158.979 133.933 cv
158.841 133.968 158.49 133.707 158.478 133.559 cv
158.463 133.375 158.663 133.083 158.843 133.003 cv
160.851 109.883 mo
160.913 109.748 161.106 109.674 161.245 109.574 cv
161.312 109.714 161.458 109.876 161.426 109.988 cv
161.387 110.125 161.199 110.218 160.994 110.403 cv
160.921 110.167 160.803 109.986 160.851 109.883 cv
73.5396 101.627 mo
73.5747 102.021 73.8984 103.177 76.8008 105.548 cv
81.4297 109.33 84.3467 115.482 82.3398 128.34 cv
82.0557 130.154 81.6567 131.813 81.1675 133.362 cv
80.8525 134.363 81.5337 136.02 84.2896 135.713 cv
90.6577 135 113.851 134.63 123.962 134.63 cv
134.076 134.63 156.459 134.933 163.051 135.647 cv
166.191 135.989 166.982 134.114 166.638 132.97 cv
166.204 131.533 165.847 130.001 165.586 128.34 cv
163.579 115.482 166.497 109.33 171.125 105.548 cv
174.028 103.177 174.352 102.021 174.387 101.627 cv
174.387 101.357 174.268 101.342 173.918 101.249 cv
170.37 100.309 149.37 98.7637 123.962 98.7607 cv
110.863 98.7627 98.9385 99.1665 89.9697 99.6904 cv
89.8667 99.8057 89.7744 99.9087 89.6865 100.006 cv
89.6006 99.9116 89.5146 99.8164 89.4287 99.7227 cv
80.9985 100.226 75.2808 100.833 73.8374 101.299 cv
73.6006 101.375 73.5396 101.49 73.5396 101.627 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
244.174 134.855 mo
243.971 134.578 243.768 134.3 243.565 134.021 cv
243.569 134.019 243.573 134.015 243.577 134.012 cv
243.366 133.833 243.156 133.657 242.945 133.479 cv
243.05 133.388 243.154 133.297 243.259 133.206 cv
243.411 133.436 243.563 133.665 243.715 133.895 cv
243.723 133.889 243.73 133.882 243.738 133.875 cv
243.977 134.122 244.216 134.369 244.454 134.615 cv
244.361 134.695 244.268 134.776 244.174 134.855 cv
235.481 142.803 mo
235.459 142.706 235.426 142.611 235.422 142.514 cv
235.421 142.491 235.548 142.431 235.566 142.446 cv
235.645 142.513 235.705 142.601 235.772 142.682 cv
235.675 142.723 235.578 142.763 235.481 142.803 cv
234.791 119.901 mo
234.297 120.295 233.785 120.667 233.038 121.229 cv
233.04 120.092 233.858 118.661 234.454 118.469 cv
234.611 118.418 234.94 118.465 234.977 118.554 cv
235.09 118.828 235.147 119.147 235.129 119.443 cv
235.119 119.604 234.938 119.783 234.791 119.901 cv
233.188 125.792 mo
233.077 125.664 232.871 125.529 232.881 125.411 cv
232.893 125.276 233.095 125.157 233.253 124.991 cv
233.424 125.136 233.554 125.246 233.685 125.356 cv
233.519 125.501 233.353 125.646 233.188 125.792 cv
232.198 109.368 mo
232.17 109.305 232.449 109 232.522 109.021 cv
232.72 109.082 232.884 109.257 233.061 109.387 cv
232.959 109.523 232.857 109.66 232.668 109.91 cv
232.467 109.693 232.279 109.554 232.198 109.368 cv
233.415 117.387 mo
233.469 117.475 233.524 117.562 233.578 117.649 cv
233.486 117.689 233.396 117.737 233.3 117.76 cv
233.284 117.765 233.205 117.647 233.219 117.623 cv
233.27 117.536 233.347 117.465 233.415 117.387 cv
232.191 151.271 mo
232.117 151.341 232.043 151.411 231.968 151.479 cv
231.729 151.25 231.49 151.022 231.25 150.794 cv
231.357 150.707 231.464 150.619 231.571 150.531 cv
231.778 150.778 231.984 151.024 232.191 151.271 cv
232.774 196.875 mo
232.861 196.924 232.933 197.002 233.01 197.068 cv
232.922 197.123 232.835 197.178 232.747 197.231 cv
232.708 197.14 232.661 197.051 232.637 196.955 cv
232.633 196.938 232.75 196.859 232.774 196.875 cv
234.248 160.174 mo
234.299 160.142 234.443 160.258 234.544 160.306 cv
234.469 160.436 234.393 160.565 234.321 160.691 cv
234.152 160.612 234.049 160.564 233.947 160.517 cv
234.045 160.397 234.125 160.252 234.248 160.174 cv
229.654 119.448 mo
230.386 118.869 230.861 118.493 231.337 118.118 cv
231.45 119.271 230.901 119.573 229.654 119.448 cv
230.608 144.216 mo
230.56 144.123 230.501 144.034 230.473 143.936 cv
230.464 143.906 230.568 143.809 230.578 143.814 cv
230.669 143.867 230.75 143.937 230.834 144 cv
230.759 144.073 230.683 144.144 230.608 144.216 cv
229.612 159.2 mo
229.52 159.192 229.439 159.063 229.353 158.986 cv
229.464 158.894 229.576 158.802 229.687 158.709 cv
229.746 158.806 229.805 158.902 229.863 159 cv
229.779 159.072 229.69 159.208 229.612 159.2 cv
229.049 135.333 mo
229.109 135.237 229.17 135.142 229.23 135.047 cv
229.34 135.141 229.451 135.233 229.561 135.328 cv
229.474 135.403 229.39 135.531 229.299 135.536 cv
229.22 135.541 229.133 135.406 229.049 135.333 cv
228.749 143.706 mo
227.671 142.277 227.671 142.277 228.749 141.283 cv
228.749 143.706 li
cp
227.376 135.052 mo
227.581 134.787 227.787 134.522 227.993 134.258 cv
228.185 134.451 228.377 134.644 228.57 134.836 cv
228.337 135.057 228.104 135.278 227.871 135.499 cv
227.706 135.35 227.541 135.201 227.376 135.052 cv
227.432 137.405 mo
227.285 137.32 227.065 137.267 227.011 137.142 cv
226.963 137.031 227.1 136.841 227.155 136.686 cv
227.295 136.793 227.435 136.902 227.559 136.998 cv
227.504 137.173 227.468 137.289 227.432 137.405 cv
226.774 207.945 mo
226.705 207.734 226.619 207.571 226.609 207.404 cv
226.604 207.318 226.773 207.139 226.8 207.149 cv
226.942 207.209 227.062 207.316 227.19 207.407 cv
227.12 207.499 227.05 207.59 226.774 207.945 cv
226.32 172.188 mo
226.317 172.033 226.313 171.879 226.31 171.724 cv
226.421 171.752 226.571 171.747 226.631 171.817 cv
226.686 171.884 226.643 172.03 226.643 172.144 cv
226.541 172.157 226.43 172.173 226.32 172.188 cv
225.565 127.583 mo
225.456 127.422 225.347 127.259 225.238 127.096 cv
225.671 126.739 226.103 126.381 226.536 126.023 cv
226.632 126.998 226.396 127.596 225.565 127.583 cv
226.003 129.52 mo
225.904 129.459 225.714 129.383 225.722 129.341 cv
225.746 129.201 225.842 129.073 225.91 128.94 cv
225.987 129.029 226.064 129.117 226.141 129.205 cv
226.095 129.31 226.049 129.415 226.003 129.52 cv
223.097 145.157 mo
222.954 145.092 222.802 145.039 222.677 144.949 cv
222.657 144.935 222.756 144.665 222.802 144.664 cv
222.951 144.663 223.101 144.731 223.261 144.776 cv
223.187 144.949 223.142 145.053 223.097 145.157 cv
222.734 233.338 mo
222.718 233.351 222.594 233.279 222.597 233.257 cv
222.611 233.15 222.651 233.048 222.682 232.942 cv
222.769 232.999 222.855 233.055 222.941 233.11 cv
222.874 233.188 222.812 233.272 222.734 233.338 cv
221.989 208.319 mo
222.003 208.183 222.207 207.972 222.335 207.966 cv
222.467 207.96 222.697 208.145 222.721 208.275 cv
222.743 208.392 222.54 208.55 222.264 208.919 cv
222.131 208.649 221.973 208.476 221.989 208.319 cv
221.437 130.539 mo
221.426 130.5 221.623 130.335 221.679 130.355 cv
221.822 130.407 221.939 130.53 222.158 130.691 cv
221.931 130.811 221.759 130.969 221.673 130.931 cv
221.555 130.88 221.481 130.686 221.437 130.539 cv
217.461 175.093 mo
217.162 175.152 216.858 175.184 216.556 175.184 cv
214.432 175.184 212.581 173.686 212.129 171.611 cv
212.074 170.874 211.683 165.621 211.216 163.007 cv
210.728 160.276 209.265 154.206 209.212 153.991 cv
208.97 152.793 209.112 151.813 209.632 151.076 cv
210.149 150.344 211.072 149.826 212.304 149.576 cv
212.612 149.514 212.921 149.482 213.225 149.482 cv
215.182 149.482 217.016 150.848 217.887 152.937 cv
217.902 152.975 219.387 156.791 220.099 161.141 cv
220.716 164.907 220.986 169.534 220.989 169.564 cv
221.175 173.842 219.064 174.768 217.461 175.093 cv
220.18 227.888 mo
220.103 227.897 220.008 227.774 219.921 227.712 cv
220.017 227.583 220.105 227.446 220.219 227.337 cv
220.232 227.323 220.383 227.451 220.714 227.69 cv
220.503 227.773 220.346 227.864 220.18 227.888 cv
209.392 201.529 mo
209.409 201.428 209.416 201.322 209.45 201.228 cv
209.457 201.207 209.6 201.197 209.613 201.222 cv
209.661 201.309 209.682 201.412 209.712 201.509 cv
209.605 201.517 209.498 201.522 209.392 201.529 cv
218.797 201.543 mo
218.745 201.511 218.693 201.479 218.642 201.446 cv
218.683 201.885 218.693 202.322 218.646 202.745 cv
218.641 202.785 218.094 206.833 216.605 210.993 cv
215.319 214.588 213.313 218.767 213.3 218.794 cv
212.164 221.071 210.785 222.18 209.084 222.18 cv
208.603 222.18 208.082 222.093 207.536 221.92 cv
206.38 221.554 205.436 220.76 204.877 219.684 cv
204.33 218.629 204.217 217.426 204.558 216.29 cv
204.869 215.618 207.071 210.834 207.93 208.32 cv
208.827 205.69 210.278 200.193 210.324 200.016 cv
210.945 198.055 212.34 196.883 214.057 196.883 cv
214.487 196.883 214.935 196.957 215.391 197.101 cv
216.896 197.576 217.82 198.667 218.293 199.925 cv
218.37 199.88 218.445 199.835 218.507 199.791 cv
218.67 200.115 218.897 200.427 218.973 200.771 cv
219.024 201.004 218.863 201.283 218.797 201.543 cv
216.679 241.627 mo
216.599 241.632 216.51 241.495 216.426 241.421 cv
216.486 241.323 216.547 241.228 216.608 241.131 cv
216.72 241.226 216.831 241.32 216.943 241.415 cv
216.855 241.491 216.771 241.622 216.679 241.627 cv
215.601 239.195 mo
215.531 239.1 215.383 238.971 215.406 238.914 cv
215.466 238.77 215.603 238.657 215.709 238.533 cv
215.779 238.63 215.849 238.727 215.962 238.883 cv
215.845 238.984 215.723 239.09 215.601 239.195 cv
214.477 218.519 mo
214.372 218.428 214.267 218.337 214.162 218.246 cv
214.252 218.167 214.341 218.089 214.431 218.01 cv
214.512 218.083 214.657 218.155 214.656 218.229 cv
214.656 218.325 214.542 218.422 214.477 218.519 cv
213.121 226.334 mo
213.01 226.238 212.899 226.145 212.788 226.051 cv
212.876 225.976 212.96 225.846 213.051 225.841 cv
213.131 225.836 213.218 225.972 213.302 226.046 cv
213.242 226.142 213.181 226.237 213.121 226.334 cv
208.278 255.42 mo
208.26 255.42 208.231 255.101 208.206 254.931 cv
208.564 254.893 208.921 254.854 209.278 254.815 cv
209.296 254.982 209.315 255.149 209.333 255.315 cv
208.982 255.357 208.631 255.407 208.278 255.42 cv
207.296 241.184 mo
207.188 240.985 207.022 240.818 207.052 240.7 cv
207.088 240.564 207.293 240.471 207.425 240.358 cv
207.549 240.527 207.673 240.695 207.797 240.864 cv
207.65 240.958 207.504 241.051 207.296 241.184 cv
205.193 251.214 mo
205.12 251.243 204.809 250.963 204.831 250.894 cv
204.895 250.689 205.071 250.521 205.203 250.338 cv
205.345 250.441 205.486 250.546 205.75 250.738 cv
205.526 250.942 205.383 251.138 205.193 251.214 cv
204.131 207.403 mo
204.126 207.318 204.293 207.141 204.32 207.151 cv
204.46 207.211 204.58 207.317 204.707 207.407 cv
204.638 207.498 204.568 207.588 204.296 207.939 cv
204.226 207.73 204.141 207.569 204.131 207.403 cv
203.939 146.017 mo
203.783 145.983 203.643 145.878 203.497 145.802 cv
203.57 145.714 203.645 145.551 203.715 145.554 cv
203.871 145.559 204.024 145.646 204.206 145.708 cv
204.082 145.856 203.991 146.028 203.939 146.017 cv
203.207 162.398 mo
203.084 162.283 202.848 162.151 202.862 162.057 cv
202.894 161.846 203.051 161.653 203.216 161.342 cv
203.421 161.595 203.638 161.766 203.609 161.847 cv
203.534 162.052 203.348 162.218 203.207 162.398 cv
203.315 210.079 mo
203.223 209.965 203.132 209.85 203.041 209.735 cv
203.139 209.679 203.236 209.622 203.334 209.563 cv
203.406 209.649 203.538 209.741 203.531 209.819 cv
203.522 209.912 203.392 209.992 203.315 210.079 cv
202.964 216.806 mo
202.764 216.812 202.564 216.816 202.365 216.822 cv
202.063 215.934 201.762 215.046 201.45 214.128 cv
201.759 213.404 202.384 213.072 202.997 213.511 cv
203.356 213.767 203.523 214.511 203.503 215.024 cv
203.479 215.625 203.157 216.213 202.964 216.806 cv
202.211 254.566 mo
201.641 255.104 201.102 255.059 200.489 254.292 cv
201.171 253.734 201.688 253.347 202.271 254.047 cv
202.352 254.143 202.312 254.471 202.211 254.566 cv
199.787 150.224 mo
199.848 150.023 200.026 149.86 200.157 149.682 cv
200.294 149.786 200.431 149.89 200.684 150.081 cv
200.463 150.283 200.323 150.473 200.137 150.55 cv
200.07 150.578 199.765 150.297 199.787 150.224 cv
199.687 154.177 mo
199.61 154.089 199.534 154 199.458 153.912 cv
199.593 153.841 199.728 153.769 199.863 153.698 cv
199.902 153.807 199.992 153.931 199.966 154.021 cv
199.946 154.094 199.785 154.126 199.687 154.177 cv
199.739 258.709 mo
199.589 258.635 199.458 258.522 199.321 258.424 cv
199.391 258.326 199.462 258.23 199.738 257.856 cv
199.821 258.087 199.915 258.259 199.932 258.438 cv
199.94 258.525 199.759 258.718 199.739 258.709 cv
198.866 260.128 mo
198.996 260.639 199.125 261.15 199.285 261.783 cv
197.932 261.305 197.932 261.305 198.866 260.128 cv
198.445 264.555 mo
198.346 264.502 198.248 264.448 198.149 264.396 cv
198.284 264.146 198.418 263.898 198.553 263.649 cv
198.65 263.703 198.748 263.756 198.845 263.808 cv
198.712 264.057 198.578 264.306 198.445 264.555 cv
198.562 173.603 mo
198.419 173.469 198.333 173.389 198.247 173.309 cv
198.362 173.186 198.477 173.063 198.591 172.939 cv
198.677 173.02 198.848 173.13 198.833 173.176 cv
198.781 173.326 198.662 173.455 198.562 173.603 cv
198.957 204.309 mo
199.029 204.461 199.126 204.595 199.147 204.74 cv
199.154 204.794 198.979 204.872 198.886 204.938 cv
198.797 204.81 198.695 204.686 198.633 204.545 cv
198.623 204.522 198.804 204.419 198.957 204.309 cv
198.658 136.537 mo
199.439 137.262 199.63 137.899 199.156 138.696 cv
197.806 137.972 197.789 137.909 198.658 136.537 cv
197.626 215.585 mo
197.533 215.56 197.469 215.425 197.392 215.338 cv
197.523 215.265 197.655 215.191 197.786 215.118 cv
197.828 215.227 197.87 215.334 197.911 215.441 cv
197.815 215.495 197.703 215.604 197.626 215.585 cv
196.428 245.991 mo
196.404 246.024 194.015 249.352 190.76 252.322 cv
187.94 254.895 184.209 257.646 184.184 257.666 cv
182.851 258.618 181.626 259.103 180.542 259.103 cv
179.492 259.103 178.539 258.651 177.629 257.726 cv
176.779 256.86 176.316 255.717 176.327 254.505 cv
176.338 253.315 176.802 252.2 177.635 251.357 cv
178.224 250.909 182.412 247.715 184.348 245.896 cv
186.377 243.987 190.239 239.723 190.356 239.591 cv
191.265 238.697 192.346 238.204 193.401 238.204 cv
194.41 238.204 195.377 238.646 196.195 239.479 cv
198.1 241.417 197.677 244.156 196.428 245.991 cv
186.664 264.488 mo
186.574 264.358 186.472 264.234 186.41 264.093 cv
186.401 264.07 186.581 263.967 186.735 263.857 cv
186.807 264.01 186.905 264.145 186.925 264.29 cv
186.932 264.344 186.756 264.422 186.664 264.488 cv
179.984 259.559 mo
180.197 260.36 180.317 260.813 180.454 261.326 cv
179.04 261.125 179.04 261.125 179.984 259.559 cv
179.547 279.03 mo
179.228 278.628 178.995 278.429 178.912 278.18 cv
178.878 278.081 179.204 277.723 179.322 277.743 cv
179.524 277.778 179.782 277.987 179.843 278.18 cv
179.897 278.348 179.713 278.592 179.547 279.03 cv
177.813 266.142 mo
177.678 266.061 177.544 265.979 177.409 265.898 cv
177.468 265.802 177.533 265.62 177.585 265.624 cv
177.73 265.634 177.87 265.721 178.026 265.783 cv
177.929 265.946 177.871 266.044 177.813 266.142 cv
177.35 249.099 mo
177.433 249.317 177.531 249.487 177.55 249.666 cv
177.559 249.753 177.374 249.945 177.355 249.937 cv
177.204 249.86 177.072 249.747 176.935 249.645 cv
177.007 249.55 177.08 249.454 177.35 249.099 cv
179.035 231.458 mo
179.22 231.579 179.558 231.697 179.56 231.82 cv
179.564 232.088 179.395 232.356 179.2 232.891 cv
178.932 232.463 178.719 232.274 178.724 232.093 cv
178.729 231.879 178.923 231.669 179.035 231.458 cv
179.997 236.221 mo
180.857 237.018 180.89 237.482 179.997 238.177 cv
179.997 236.221 li
cp
181.59 243.618 mo
181.68 243.742 181.73 243.896 181.794 244.04 cv
181.688 244.082 181.581 244.124 181.404 244.193 cv
181.363 244.034 181.297 243.886 181.302 243.737 cv
181.304 243.691 181.574 243.597 181.59 243.618 cv
184.526 240.213 mo
184.61 240.209 184.699 240.328 184.786 240.392 cv
184.666 240.5 184.545 240.607 184.413 240.726 cv
184.325 240.571 184.206 240.437 184.233 240.396 cv
184.291 240.305 184.421 240.219 184.526 240.213 cv
185.211 242.067 mo
185.34 242.166 185.468 242.265 185.591 242.358 cv
185.488 242.527 185.425 242.632 185.361 242.735 cv
185.248 242.616 185.101 242.514 185.038 242.374 cv
185.01 242.31 185.148 242.172 185.211 242.067 cv
192.096 218.188 mo
192.104 218.169 192.244 218.159 192.257 218.183 cv
192.304 218.269 192.324 218.37 192.353 218.466 cv
192.248 218.473 192.144 218.479 192.039 218.485 cv
192.056 218.386 192.063 218.282 192.096 218.188 cv
198.558 129.466 mo
199.301 129.772 199.845 129.997 200.39 130.222 cv
200.439 130.417 200.489 130.614 200.538 130.81 cv
200.125 131.091 199.604 131.688 199.319 131.592 cv
198.53 131.325 198.53 130.531 198.558 129.466 cv
200.522 124.549 mo
200.564 124.771 200.606 124.993 200.647 125.215 cv
200.289 125.231 199.93 125.258 199.572 125.25 cv
199.538 125.249 199.468 124.941 199.481 124.936 cv
199.823 124.793 200.173 124.673 200.522 124.549 cv
201.524 251.462 mo
201.268 251.553 201.106 251.64 200.937 251.657 cv
200.85 251.668 200.749 251.557 200.654 251.501 cv
200.749 251.372 200.831 251.229 200.948 251.126 cv
200.974 251.104 201.127 251.227 201.524 251.462 cv
201.183 230.553 mo
201.352 230.584 201.522 230.613 201.692 230.644 cv
201.607 231.034 201.522 231.426 201.39 232.031 cv
200.572 231.334 200.779 230.938 201.183 230.553 cv
201.265 202.563 mo
201.361 202.624 201.456 202.684 201.552 202.745 cv
201.458 202.855 201.364 202.967 201.27 203.078 cv
201.194 202.989 201.065 202.905 201.06 202.813 cv
201.055 202.734 201.191 202.646 201.265 202.563 cv
201.546 137.115 mo
201.711 137.271 201.876 137.427 202.138 137.675 cv
201.858 137.802 201.676 137.954 201.586 137.911 cv
201.442 137.843 201.294 137.653 201.276 137.499 cv
201.262 137.383 201.449 137.244 201.546 137.115 cv
203.621 140.93 mo
203.768 140.994 203.878 141.139 204.085 141.325 cv
203.832 141.437 203.642 141.592 203.54 141.547 cv
203.426 141.497 203.362 141.269 203.339 141.11 cv
203.332 141.06 203.561 140.903 203.621 140.93 cv
205.809 174.573 mo
205.863 174.66 205.917 174.747 205.97 174.835 cv
205.879 174.874 205.791 174.921 205.696 174.943 cv
205.68 174.947 205.602 174.832 205.616 174.808 cv
205.665 174.721 205.742 174.65 205.809 174.573 cv
209.553 119.292 mo
209.63 119.281 209.725 119.405 209.812 119.469 cv
209.716 119.597 209.627 119.732 209.514 119.844 cv
209.501 119.856 209.349 119.728 209.019 119.489 cv
209.229 119.406 209.386 119.313 209.553 119.292 cv
209.566 113.329 mo
209.738 113.351 209.901 113.452 210.317 113.622 cv
209.741 113.841 209.543 113.987 209.443 113.936 cv
209.331 113.88 209.282 113.648 209.264 113.488 cv
209.259 113.443 209.468 113.315 209.566 113.329 cv
210.424 121.768 mo
210.52 121.787 210.61 121.832 210.703 121.868 cv
210.651 121.958 210.599 122.045 210.547 122.135 cv
210.476 122.059 210.397 121.989 210.342 121.904 cv
210.328 121.882 210.404 121.764 210.424 121.768 cv
212.065 126.209 mo
212.241 126.751 212.039 127.461 211.858 128.059 cv
211.751 128.414 211.379 128.688 211.029 129.119 cv
210.648 128.206 210.346 127.524 210.08 126.83 cv
209.854 126.237 210.122 125.681 210.665 125.635 cv
211.137 125.596 211.959 125.884 212.065 126.209 cv
213.677 111.472 mo
213.741 111.551 213.805 111.63 213.87 111.709 cv
213.781 111.762 213.696 111.82 213.602 111.857 cv
213.589 111.863 213.498 111.755 213.509 111.729 cv
213.549 111.636 213.618 111.556 213.677 111.472 cv
216.849 135.956 mo
215.838 136.683 215.48 136.425 215.08 135.329 cv
215.784 135.579 216.184 135.72 216.849 135.956 cv
218.511 111.42 mo
218.782 112.326 218.932 112.826 219.111 113.425 cv
217.56 113.133 217.54 113.083 218.511 111.42 cv
219.799 157.604 mo
219.895 157.666 219.99 157.726 220.085 157.785 cv
219.991 157.896 219.898 158.006 219.805 158.115 cv
219.73 158.029 219.601 157.945 219.596 157.854 cv
219.591 157.775 219.726 157.688 219.799 157.604 cv
220.681 115.851 mo
220.776 115.87 220.866 115.914 220.957 115.951 cv
220.906 116.039 220.855 116.126 220.803 116.215 cv
220.734 116.14 220.655 116.071 220.601 115.986 cv
220.587 115.964 220.662 115.847 220.681 115.851 cv
225.91 119.287 mo
225.965 119.251 226.397 119.589 226.376 119.701 cv
226.328 119.955 226.104 120.174 225.859 120.549 cv
225.609 120.236 225.322 120.006 225.362 119.901 cv
225.455 119.655 225.681 119.432 225.91 119.287 cv
174.831 264.098 mo
174.742 264.107 174.639 263.991 174.542 263.931 cv
174.638 263.819 174.734 263.709 174.831 263.599 cv
174.907 263.687 174.984 263.774 175.061 263.863 cv
174.985 263.946 174.915 264.09 174.831 264.098 cv
174.98 274.284 mo
174.878 274.299 174.768 274.313 174.657 274.329 cv
174.654 274.174 174.651 274.019 174.648 273.863 cv
174.759 273.893 174.909 273.888 174.969 273.959 cv
175.023 274.024 174.98 274.172 174.98 274.284 cv
173.163 238.026 mo
173.109 238.033 173.03 237.858 172.962 237.767 cv
173.093 237.679 173.216 237.574 173.359 237.518 cv
173.387 237.507 173.489 237.686 173.601 237.837 cv
173.447 237.909 173.31 238.007 173.163 238.026 cv
166.087 285.295 mo
166.355 284.616 166.501 284.249 166.643 283.889 cv
166.887 283.965 167.065 283.966 167.11 284.043 cv
167.516 284.742 167.26 285.096 166.087 285.295 cv
165.711 266.54 mo
165.695 266.56 165.428 266.455 165.429 266.408 cv
165.43 266.26 165.501 266.11 165.549 265.95 cv
165.721 266.029 165.825 266.076 165.928 266.124 cv
165.86 266.266 165.804 266.417 165.711 266.54 cv
163.362 266.493 mo
163.311 266.521 163 266.232 163.022 266.181 cv
163.111 265.977 163.266 265.787 163.44 265.644 cv
163.474 265.615 163.698 265.817 163.944 265.99 cv
163.707 266.208 163.556 266.393 163.362 266.493 cv
163.169 270.809 mo
163.122 270.717 163.062 270.627 163.034 270.528 cv
163.025 270.499 163.13 270.4 163.14 270.407 cv
163.231 270.46 163.313 270.529 163.397 270.595 cv
163.321 270.667 163.245 270.737 163.169 270.809 cv
162.211 278.815 mo
162.088 278.696 161.863 278.575 161.866 278.459 cv
161.87 278.254 162.014 278.051 162.135 277.762 cv
162.37 277.945 162.625 278.098 162.608 278.14 cv
162.512 278.38 162.35 278.594 162.211 278.815 cv
160.999 253.24 mo
160.948 253.153 160.89 253.068 160.852 252.977 cv
160.847 252.964 160.954 252.873 160.98 252.885 cv
161.072 252.924 161.152 252.991 161.236 253.051 cv
161.157 253.114 161.078 253.178 160.999 253.24 cv
160.885 273.629 mo
160.743 273.561 160.59 273.507 160.468 273.413 cv
160.446 273.396 160.55 273.128 160.595 273.127 cv
160.744 273.127 160.892 273.196 161.051 273.242 cv
160.975 273.419 160.93 273.523 160.885 273.629 cv
155.947 255.106 mo
155.884 255.104 155.744 254.76 155.799 254.666 cv
155.874 254.538 156.11 254.428 156.263 254.444 cv
156.388 254.458 156.491 254.668 156.731 254.929 cv
156.372 255.021 156.157 255.115 155.947 255.106 cv
166.077 255.165 mo
166.187 255.389 166.356 255.579 166.314 255.69 cv
166.266 255.819 166.016 255.968 165.885 255.943 cv
165.765 255.922 165.591 255.659 165.616 255.539 cv
165.642 255.408 165.872 255.32 166.077 255.165 cv
150.901 262.673 mo
150.756 262.623 150.625 262.531 150.489 262.453 cv
150.547 262.355 150.611 262.173 150.662 262.176 cv
150.809 262.186 150.951 262.271 151.107 262.332 cv
151.011 262.492 150.922 262.681 150.901 262.673 cv
196.844 117.557 mo
196.814 117.564 196.718 117.463 196.724 117.453 cv
196.776 117.364 196.844 117.284 196.908 117.201 cv
196.979 117.274 197.05 117.349 197.12 117.424 cv
197.028 117.471 196.94 117.529 196.844 117.557 cv
196.176 146.865 mo
195.96 146.872 195.738 146.711 195.419 146.586 cv
195.867 145.807 196.282 145.753 197.111 146.469 cv
196.618 146.688 196.4 146.856 196.176 146.865 cv
195.633 149.558 mo
195.578 149.402 195.497 149.259 195.49 149.112 cv
195.488 149.062 195.747 148.943 195.761 148.958 cv
195.86 149.078 195.925 149.224 196.002 149.361 cv
195.901 149.415 195.801 149.468 195.633 149.558 cv
195.429 140.314 mo
195.525 140.32 195.62 140.354 195.715 140.378 cv
195.672 140.475 195.63 140.57 195.587 140.666 cv
195.508 140.598 195.422 140.537 195.357 140.457 cv
195.342 140.438 195.406 140.313 195.429 140.314 cv
193.938 151.029 mo
193.884 151.055 193.575 150.701 193.588 150.684 cv
193.772 150.452 193.979 150.231 194.216 150.058 cv
194.251 150.033 194.474 150.263 194.733 150.477 cv
194.415 150.709 194.195 150.908 193.938 151.029 cv
193.089 146.079 mo
193.083 145.995 193.256 145.814 193.282 145.826 cv
193.422 145.889 193.541 145.998 193.667 146.09 cv
193.597 146.18 193.526 146.269 193.262 146.601 cv
193.191 146.402 193.101 146.243 193.089 146.079 cv
193.608 138.729 mo
193.778 138.852 193.949 138.974 194.119 139.097 cv
194.004 139.61 193.89 140.124 193.775 140.638 cv
193.642 140.679 193.508 140.719 193.375 140.76 cv
193.123 140.39 192.643 139.992 192.684 139.656 cv
192.725 139.315 193.278 139.036 193.608 138.729 cv
192.512 106.781 mo
192.705 106.589 193.273 106.564 193.552 106.709 cv
194.282 107.088 194.945 107.599 195.862 108.207 cv
193.739 109.183 192.893 109.054 192.412 107.828 cv
192.292 107.521 192.315 106.976 192.512 106.781 cv
191.961 117.396 mo
191.913 117.305 191.854 117.216 191.826 117.118 cv
191.817 117.088 191.921 116.991 191.931 116.997 cv
192.022 117.05 192.103 117.119 192.186 117.183 cv
192.111 117.255 192.036 117.326 191.961 117.396 cv
190.946 147.144 mo
190.907 147.054 190.861 146.965 190.838 146.871 cv
190.834 146.854 190.949 146.778 190.973 146.792 cv
191.059 146.841 191.13 146.917 191.206 146.983 cv
191.12 147.037 191.033 147.091 190.946 147.144 cv
187.837 128.839 mo
187.701 128.487 187.564 128.135 187.427 127.783 cv
187.55 127.736 187.673 127.688 187.795 127.641 cv
187.929 127.995 188.062 128.348 188.196 128.701 cv
188.076 128.747 187.957 128.792 187.837 128.839 cv
185.239 123.708 mo
185.199 123.611 185.159 123.514 185.119 123.417 cv
185.215 123.396 185.31 123.363 185.407 123.358 cv
185.429 123.357 185.489 123.483 185.474 123.502 cv
185.408 123.581 185.32 123.642 185.239 123.708 cv
246.732 141.371 mo
246.829 141.489 246.895 141.633 246.971 141.769 cv
246.873 141.823 246.775 141.877 246.612 141.968 cv
246.555 141.813 246.473 141.67 246.465 141.524 cv
246.462 141.475 246.719 141.354 246.732 141.371 cv
247.706 138.411 mo
241.35 119.428 li
241.327 120.107 241.107 120.369 240.215 120.159 cv
240.568 119.788 240.824 119.52 241.236 119.088 cv
238.352 110.474 li
237.087 106.036 235.121 104.11 231.794 103.916 cv
228.467 103.721 211.659 102.194 200.203 102.194 cv
192.676 102.194 186.26 105.461 182.745 110.99 cv
183.758 111.208 183.986 111.932 184.28 112.877 cv
183.41 112.602 182.932 112.164 182.469 111.449 cv
180.809 114.245 179.865 117.583 179.865 121.349 cv
179.861 121.62 179.884 121.896 179.896 122.17 cv
179.941 122.151 179.981 122.137 179.986 122.143 cv
180.084 122.261 180.149 122.406 180.225 122.542 cv
180.139 122.588 180.045 122.638 179.916 122.706 cv
180.521 130.298 186.843 139.134 189.059 143.97 cv
190.98 147.795 192.798 151.875 194.242 156.73 cv
194.28 156.743 194.319 156.75 194.357 156.762 cv
194.333 156.799 194.309 156.834 194.286 156.871 cv
195.221 160.043 195.988 163.563 196.528 167.544 cv
196.533 167.545 196.537 167.547 196.542 167.548 cv
196.538 167.558 196.536 167.563 196.532 167.572 cv
197.063 171.506 197.374 175.887 197.374 180.892 cv
197.374 193.689 194.154 205.982 188.128 216.872 cv
188.217 216.939 188.315 217.019 188.442 217.105 cv
188.113 217.335 187.935 217.459 187.756 217.582 cv
187.751 217.573 187.745 217.564 187.739 217.557 cv
184.459 223.336 180.398 228.718 175.571 233.542 cv
168.75 240.359 160.713 245.417 152.223 249.372 cv
143.67 253.354 138.195 265.982 145.364 277.075 cv
149.552 283.556 160.262 289.34 174.965 282.866 cv
185.386 277.556 194.873 270.693 203.272 262.417 cv
203.347 262.187 203.477 261.962 203.569 261.733 cv
203.653 261.784 203.737 261.837 203.822 261.888 cv
203.836 261.874 203.85 261.86 203.864 261.847 cv
213.774 251.942 221.675 240.484 227.381 227.762 cv
227.325 227.813 227.268 227.864 227.212 227.917 cv
226.933 227.583 226.654 227.248 226.184 226.684 cv
227.139 226.607 227.436 226.905 227.558 227.357 cv
227.836 226.73 228.115 226.104 228.382 225.472 cv
234.363 211.328 237.395 196.329 237.395 180.892 cv
237.395 168.295 235.04 156.953 232.086 146.451 cv
231.669 144.718 232.414 144.086 234.48 144.128 cv
236.546 144.169 237.406 144.599 241.147 144.97 cv
244.888 145.341 248.834 141.943 247.706 138.411 cv
f
150.919 296.368 mo
150.323 296.993 149.679 296.854 148.943 296.378 cv
149.408 295.52 149.978 295.213 150.751 295.571 cv
150.908 295.645 151.032 296.249 150.919 296.368 cv
129.6 285.847 mo
129.374 284.96 129.599 284.414 130.692 284.08 cv
130.51 285.335 130.51 285.335 129.6 285.847 cv
129.131 205.734 mo
129.025 205.692 128.92 205.65 128.814 205.607 cv
128.889 205.479 128.964 205.349 129.038 205.22 cv
129.124 205.296 129.257 205.362 129.279 205.454 cv
129.298 205.531 129.186 205.641 129.131 205.734 cv
127.241 210.847 mo
127.528 209.449 128.302 209.926 128.897 209.95 cv
128.94 210.106 128.982 210.262 129.024 210.417 cv
128.5 210.543 127.977 210.669 127.241 210.847 cv
127.765 253.393 mo
127.645 253.297 127.525 253.203 127.405 253.108 cv
127.601 252.833 127.797 252.559 127.993 252.282 cv
128.081 252.335 128.169 252.389 128.257 252.441 cv
128.093 252.759 127.929 253.075 127.765 253.393 cv
127.845 275.193 mo
127.73 275.211 127.581 275.008 127.406 274.869 cv
127.562 274.678 127.675 274.539 127.787 274.401 cv
127.936 274.549 128.085 274.695 128.234 274.843 cv
128.105 274.968 127.989 275.171 127.845 275.193 cv
127.158 192.706 mo
127.068 192.729 126.948 192.637 126.841 192.595 cv
126.915 192.463 126.989 192.333 127.063 192.202 cv
127.15 192.28 127.237 192.357 127.324 192.436 cv
127.27 192.531 127.232 192.688 127.158 192.706 cv
126.057 248.08 mo
125.912 248.03 125.78 247.939 125.645 247.861 cv
125.703 247.765 125.766 247.582 125.818 247.585 cv
125.964 247.595 126.105 247.68 126.263 247.74 cv
126.168 247.901 126.079 248.088 126.057 248.08 cv
125.028 169.294 mo
124.959 169.085 124.874 168.924 124.864 168.758 cv
124.86 168.672 125.026 168.494 125.054 168.505 cv
125.194 168.564 125.314 168.67 125.441 168.761 cv
125.371 168.851 125.302 168.94 125.028 169.294 cv
124.37 269.895 mo
124.509 269.39 124.647 268.886 124.827 268.23 cv
125.411 269.191 125.411 269.191 124.37 269.895 cv
124.505 211.016 mo
124.622 210.915 124.778 210.862 124.92 210.791 cv
124.953 210.895 124.987 210.997 125.039 211.159 cv
124.891 211.21 124.743 211.262 124.595 211.313 cv
124.562 211.209 124.474 211.042 124.505 211.016 cv
128.334 170.78 mo
128.585 171.057 128.836 171.332 129.086 171.608 cv
129.024 171.699 128.962 171.791 128.9 171.883 cv
128.656 171.78 128.359 171.731 128.186 171.558 cv
128.059 171.431 128.096 171.141 128.059 170.922 cv
128.151 170.875 128.243 170.827 128.334 170.78 cv
128.439 167.479 mo
128.529 167.531 128.609 167.6 128.692 167.663 cv
128.618 167.734 128.543 167.806 128.468 167.875 cv
128.421 167.784 128.362 167.696 128.334 167.599 cv
128.326 167.569 128.429 167.474 128.439 167.479 cv
123.127 241.89 mo
123.002 241.64 122.836 241.455 122.876 241.35 cv
122.92 241.233 123.148 241.159 123.307 241.129 cv
123.359 241.12 123.527 241.341 123.503 241.402 cv
123.444 241.553 123.305 241.671 123.127 241.89 cv
123.097 196.314 mo
123.119 196.314 123.18 196.441 123.164 196.459 cv
123.097 196.538 123.008 196.6 122.927 196.666 cv
122.886 196.568 122.846 196.472 122.806 196.373 cv
122.903 196.352 122.999 196.318 123.097 196.314 cv
119.654 223.181 mo
119.543 223.086 119.432 222.991 119.32 222.897 cv
119.408 222.821 119.493 222.691 119.585 222.687 cv
119.664 222.683 119.752 222.818 119.836 222.893 cv
119.776 222.988 119.715 223.084 119.654 223.181 cv
119.148 241.124 mo
119.024 240.886 118.952 240.743 118.879 240.603 cv
119.018 240.536 119.153 240.438 119.297 240.42 cv
119.352 240.413 119.504 240.615 119.483 240.679 cv
119.436 240.815 119.306 240.925 119.148 241.124 cv
108.967 304.001 mo
108.89 304.012 108.795 303.889 108.709 303.825 cv
108.804 303.697 108.892 303.562 109.005 303.45 cv
109.019 303.438 109.17 303.566 109.5 303.806 cv
109.29 303.888 109.133 303.979 108.967 304.001 cv
104.921 296.493 mo
104.889 296.502 104.741 296.268 104.754 296.254 cv
104.866 296.144 105.004 296.058 105.133 295.964 cv
105.193 296.053 105.254 296.141 105.347 296.276 cv
105.203 296.355 105.069 296.449 104.921 296.493 cv
94.4497 297.438 mo
94.3047 297.304 94.2178 297.223 94.1318 297.142 cv
94.2466 297.019 94.3628 296.895 94.479 296.771 cv
94.5649 296.852 94.7378 296.961 94.7227 297.009 cv
94.6709 297.16 94.5508 297.289 94.4497 297.438 cv
87.7627 298.546 mo
87.6167 298.459 87.4609 298.384 87.3369 298.271 cv
87.3179 298.254 87.458 297.982 87.498 297.988 cv
87.6597 298.015 87.811 298.104 87.9736 298.174 cv
87.8799 298.341 87.8208 298.443 87.7627 298.546 cv
86.0166 298.113 mo
85.9028 298.063 85.8398 297.836 85.8169 297.678 cv
85.8101 297.626 86.0376 297.471 86.0977 297.496 cv
86.2437 297.562 86.354 297.706 86.5601 297.892 cv
86.3076 298.003 86.1177 298.158 86.0166 298.113 cv
116.689 169.85 mo
116.619 169.774 116.54 169.704 116.486 169.619 cv
116.472 169.598 116.548 169.48 116.567 169.484 cv
116.662 169.503 116.752 169.547 116.844 169.584 cv
116.793 169.674 116.741 169.762 116.689 169.85 cv
115.282 194.37 mo
115.084 194.337 114.907 194.182 114.721 194.074 cv
114.844 193.946 114.948 193.748 115.095 193.71 cv
115.226 193.677 115.403 193.818 115.631 193.911 cv
115.481 194.117 115.358 194.384 115.282 194.37 cv
114.144 246.38 mo
114.072 246.245 114.001 246.11 113.93 245.975 cv
114.039 245.935 114.163 245.846 114.253 245.87 cv
114.326 245.892 114.359 246.053 114.41 246.151 cv
114.321 246.228 114.232 246.305 114.144 246.38 cv
113.021 202.705 mo
112.895 202.685 112.799 202.487 112.641 202.315 cv
112.846 202.194 113.058 202.008 113.114 202.046 cv
113.27 202.155 113.361 202.356 113.478 202.521 cv
113.324 202.589 113.159 202.729 113.021 202.705 cv
110.84 150.485 mo
110.678 150.372 110.62 149.792 110.756 149.628 cv
111.411 148.841 111.964 149.266 112.55 149.852 cv
112.144 150.712 111.605 151.026 110.84 150.485 cv
111.559 172.678 mo
111.323 172.568 111.159 172.301 110.966 172.098 cv
111.129 171.943 111.329 171.638 111.448 171.666 cv
111.696 171.727 111.901 171.963 112.264 172.231 cv
111.918 172.46 111.666 172.728 111.559 172.678 cv
110.422 154.714 mo
110.221 155.379 109.335 155.759 108.638 155.416 cv
107.818 155.011 107.101 154.458 107.022 152.921 cv
108.032 152.993 108.872 152.929 109.635 153.145 cv
110.301 153.333 110.649 153.966 110.422 154.714 cv
110.047 203.791 mo
109.975 203.591 109.885 203.431 109.873 203.265 cv
109.867 203.181 110.041 202.998 110.067 203.011 cv
110.208 203.072 110.328 203.183 110.455 203.275 cv
110.384 203.365 110.313 203.455 110.047 203.791 cv
108.919 227.873 mo
108.83 227.881 108.636 227.698 108.646 227.679 cv
108.72 227.526 108.833 227.394 108.934 227.254 cv
109.031 227.326 109.128 227.398 109.507 227.68 cv
109.275 227.762 109.1 227.856 108.919 227.873 cv
107.593 233.801 mo
107.287 232.984 107.622 232.693 108.328 232.453 cv
108.546 233.233 108.309 233.582 107.593 233.801 cv
107.417 175.693 mo
108.943 175.693 li
108.301 176.53 108.301 176.53 107.417 175.693 cv
104.14 196.425 mo
103.661 196.124 103.542 195.581 104.135 194.991 cv
105.663 195.838 107.221 196.702 108.778 197.566 cv
107.037 198.041 105.552 197.31 104.14 196.425 cv
105.15 200.589 mo
105.137 200.596 105.047 200.488 105.058 200.461 cv
105.098 200.37 105.166 200.291 105.224 200.207 cv
105.288 200.286 105.351 200.364 105.415 200.443 cv
105.327 200.495 105.243 200.553 105.15 200.589 cv
103.347 223.108 mo
103.276 222.909 103.185 222.75 103.173 222.586 cv
103.167 222.502 103.34 222.322 103.366 222.333 cv
103.506 222.396 103.625 222.505 103.752 222.599 cv
103.681 222.688 103.61 222.776 103.347 223.108 cv
100.273 180.415 mo
100.151 180.305 100.03 180.194 99.8638 180.043 cv
100.05 179.868 100.179 179.747 100.309 179.626 cv
100.413 179.751 100.615 179.894 100.598 179.999 cv
100.574 180.151 100.389 180.277 100.273 180.415 cv
98.0659 216.003 mo
98.9189 215.261 99.292 215.48 99.9956 216.308 cv
99.1816 216.18 98.7837 216.116 98.0659 216.003 cv
93.6489 173.604 mo
93.4746 173.66 93.1768 173.343 92.936 173.193 cv
93.1641 172.92 93.3457 172.56 93.6367 172.408 cv
93.7988 172.324 94.1416 172.591 94.6118 172.784 cv
94.1807 173.172 93.9517 173.503 93.6489 173.604 cv
92.2368 182.471 mo
92.167 182.396 92.0879 182.325 92.0337 182.24 cv
92.02 182.219 92.0947 182.102 92.1138 182.104 cv
92.21 182.124 92.2998 182.168 92.3916 182.205 cv
92.3398 182.294 92.2891 182.383 92.2368 182.471 cv
89.6938 187.582 mo
89.603 187.606 89.4819 187.513 89.374 187.469 cv
89.4478 187.336 89.5229 187.203 89.5977 187.071 cv
89.686 187.149 89.7739 187.229 89.8618 187.308 cv
89.8066 187.405 89.7676 187.563 89.6938 187.582 cv
85.9937 213.677 mo
85.9629 213.687 85.8149 213.452 85.8286 213.438 cv
85.9399 213.327 86.0767 213.242 86.2061 213.149 cv
86.2656 213.237 86.3257 213.325 86.4189 213.461 cv
86.2749 213.539 86.1416 213.633 85.9937 213.677 cv
83.4956 204.23 mo
83.1118 203.444 83.2397 202.962 83.979 202.499 cv
84.3721 203.281 84.228 203.76 83.4956 204.23 cv
89.5986 166.566 mo
89.686 166.645 89.7729 166.723 89.8599 166.801 cv
89.8057 166.897 89.7676 167.055 89.6938 167.072 cv
89.603 167.096 89.4839 167.002 89.377 166.96 cv
89.4507 166.829 89.5249 166.698 89.5986 166.566 cv
94.0908 156.927 mo
94.124 157.067 94.1567 157.208 94.1899 157.349 cv
93.8999 157.442 93.6108 157.535 93.3208 157.628 cv
93.2798 157.524 93.2388 157.419 93.1968 157.314 cv
93.4946 157.186 93.793 157.056 94.0908 156.927 cv
105.565 148.548 mo
105.655 148.601 105.735 148.668 105.817 148.732 cv
105.743 148.803 105.669 148.875 105.595 148.944 cv
105.548 148.854 105.489 148.765 105.462 148.668 cv
105.453 148.638 105.556 148.542 105.565 148.548 cv
81.4316 209.063 mo
81.3438 209.013 81.2559 208.96 81.168 208.909 cv
81.2427 208.839 81.312 208.761 81.397 208.706 cv
81.4189 208.692 81.5356 208.769 81.5317 208.787 cv
81.5127 208.883 81.4688 208.972 81.4316 209.063 cv
79.4697 151.361 mo
79.3569 151.263 79.2437 151.167 79.1309 151.069 cv
79.2246 150.987 79.3179 150.905 79.4116 150.823 cv
79.498 150.9 79.6509 150.976 79.6538 151.055 cv
79.6567 151.154 79.5366 151.258 79.4697 151.361 cv
77.999 172.254 mo
77.854 172.164 77.6987 172.084 77.5737 171.972 cv
77.5557 171.955 77.6987 171.685 77.7407 171.691 cv
77.9019 171.718 78.0527 171.81 78.2158 171.88 cv
78.1187 172.047 78.0586 172.15 77.999 172.254 cv
76.3447 166.443 mo
76.0127 165.444 76.5229 165.188 77.229 165.11 cv
77.3159 164.843 77.4028 164.574 77.4897 164.307 cv
77.5889 164.364 77.687 164.42 77.7856 164.478 cv
77.6006 164.689 77.416 164.901 77.231 165.112 cv
76.936 165.557 76.6396 165.999 76.3447 166.443 cv
76.021 197.823 mo
75.8916 197.747 75.7637 197.671 75.6348 197.596 cv
75.7139 197.511 75.7798 197.378 75.874 197.355 cv
75.9497 197.337 76.0576 197.45 76.1519 197.505 cv
76.1079 197.611 76.0649 197.718 76.021 197.823 cv
74.542 195.274 mo
74.3696 195.161 74.2607 194.951 74.127 194.78 cv
74.2856 194.707 74.4458 194.574 74.6021 194.579 cv
74.7759 194.585 74.9448 194.719 75.2637 194.862 cv
74.8188 195.124 74.604 195.315 74.542 195.274 cv
73.9419 171.058 mo
74.1118 170.939 74.2817 170.82 74.4526 170.701 cv
74.5439 170.855 74.6357 171.01 74.7666 171.228 cv
74.5659 171.328 74.3867 171.493 74.2749 171.456 cv
74.1357 171.411 74.0508 171.198 73.9419 171.058 cv
70.814 169.125 mo
70.687 169.03 70.5518 168.943 70.4429 168.83 cv
70.4297 168.817 70.5566 168.667 70.793 168.341 cv
70.875 168.549 70.9658 168.704 70.9888 168.869 cv
71 168.945 70.877 169.039 70.814 169.125 cv
68.3257 176.66 mo
68.1836 176.424 68.0098 176.263 68.0288 176.127 cv
68.0469 175.993 68.2578 175.886 68.3848 175.766 cv
68.4927 175.904 68.6816 176.041 68.686 176.183 cv
68.689 176.313 68.4937 176.45 68.3257 176.66 cv
65.8721 181.525 mo
65.8018 181.313 65.7158 181.149 65.7061 180.981 cv
65.7007 180.896 65.8696 180.713 65.8979 180.726 cv
66.04 180.785 66.1606 180.894 66.29 180.984 cv
66.2197 181.076 66.1489 181.167 65.8721 181.525 cv
131.95 155.42 mo
132.148 155.477 132.312 155.649 132.49 155.776 cv
132.387 155.915 132.285 156.052 132.097 156.304 cv
131.898 156.088 131.712 155.948 131.63 155.763 cv
131.602 155.701 131.875 155.399 131.95 155.42 cv
133.83 152.104 mo
133.92 152.174 134.01 152.244 134.331 152.497 cv
134.136 152.57 133.981 152.664 133.818 152.677 cv
133.735 152.686 133.553 152.511 133.564 152.488 cv
133.629 152.349 133.736 152.229 133.83 152.104 cv
136.218 181.556 mo
136.356 181.629 136.45 181.784 136.636 181.985 cv
136.376 182.074 136.168 182.214 136.078 182.159 cv
135.966 182.092 135.927 181.863 135.915 181.701 cv
135.912 181.655 136.155 181.522 136.218 181.556 cv
138.095 203.352 mo
138.231 203.559 138.367 203.767 138.503 203.975 cv
138.42 204.028 138.337 204.082 138.254 204.137 cv
138.122 203.95 137.98 203.77 137.871 203.571 cv
137.857 203.546 138.016 203.427 138.095 203.352 cv
139.046 160.42 mo
139.071 160.41 139.176 160.587 139.288 160.738 cv
139.136 160.812 139.002 160.909 138.856 160.931 cv
138.803 160.938 138.723 160.767 138.655 160.676 cv
138.783 160.585 138.905 160.48 139.046 160.42 cv
140.133 199.456 mo
140.282 199.642 140.529 199.816 140.55 200.016 cv
140.571 200.206 140.357 200.422 140.128 200.844 cv
139.904 200.42 139.692 200.203 139.713 200.013 cv
139.736 199.813 139.984 199.641 140.133 199.456 cv
141.757 150.719 mo
141.832 150.835 141.906 150.95 141.98 151.066 cv
141.621 151.336 141.262 151.606 140.903 151.876 cv
140.791 151.723 140.679 151.569 140.567 151.417 cv
140.964 151.185 141.361 150.952 141.757 150.719 cv
142.43 153.165 mo
142.114 153.304 141.914 153.456 141.711 153.458 cv
141.597 153.46 141.479 153.218 141.363 153.085 cv
141.544 152.956 141.712 152.771 141.914 152.718 cv
142.007 152.694 142.168 152.928 142.43 153.165 cv
143.132 164.457 mo
143.504 165.141 143.77 165.629 144.177 166.377 cv
142.611 165.853 142.611 165.853 143.132 164.457 cv
144.478 176.983 mo
144.653 177.141 144.828 177.296 145.107 177.544 cv
144.823 177.786 144.645 177.938 144.467 178.091 cv
144.32 177.904 144.056 177.718 144.058 177.531 cv
144.059 177.349 144.327 177.166 144.478 176.983 cv
146.588 150.754 mo
146.699 150.974 146.878 151.203 146.832 151.263 cv
146.708 151.429 146.489 151.524 146.308 151.647 cv
146.248 151.481 146.113 151.296 146.148 151.153 cv
146.183 151.015 146.392 150.921 146.588 150.754 cv
149.67 175.104 mo
147.025 174.146 146.102 173.301 146.549 171.514 cv
148.847 171.304 150.269 172.86 149.67 175.104 cv
149.507 150.753 mo
149.514 150.732 149.652 150.724 149.665 150.748 cv
149.711 150.832 149.731 150.93 149.76 151.024 cv
149.656 151.031 149.553 151.037 149.45 151.043 cv
149.466 150.945 149.473 150.844 149.507 150.753 cv
153.544 155.918 mo
153.637 156.053 153.743 156.175 153.798 156.316 cv
153.812 156.351 153.598 156.52 153.586 156.509 cv
153.466 156.409 153.366 156.285 153.261 156.168 cv
153.339 156.098 153.418 156.029 153.544 155.918 cv
154.572 146.168 mo
154.982 146.337 155.321 146.681 155.956 147.168 cv
155.304 147.555 154.899 147.979 154.639 147.903 cv
154.33 147.813 154.001 147.313 153.958 146.956 cv
153.928 146.707 154.476 146.128 154.572 146.168 cv
157.034 157.379 mo
156.781 157.644 156.528 157.906 156.276 158.17 cv
156.165 158.039 156.055 157.909 155.944 157.778 cv
156.229 157.558 156.514 157.336 156.798 157.115 cv
156.877 157.203 156.955 157.292 157.034 157.379 cv
157.227 185.225 mo
157.317 185.276 157.397 185.345 157.48 185.408 cv
157.405 185.479 157.331 185.551 157.257 185.62 cv
157.21 185.529 157.151 185.44 157.123 185.345 cv
157.115 185.314 157.218 185.219 157.227 185.225 cv
158.202 180.437 mo
158.343 180.539 158.483 180.644 158.738 180.831 cv
158.52 181.032 158.378 181.222 158.19 181.304 cv
158.127 181.331 157.821 181.056 157.843 180.98 cv
157.899 180.781 158.074 180.615 158.202 180.437 cv
158.711 161.86 mo
158.939 162.037 159.156 162.237 159.324 162.471 cv
159.35 162.508 159.117 162.731 158.899 162.997 cv
158.68 162.677 158.49 162.451 158.377 162.193 cv
158.352 162.139 158.693 161.847 158.711 161.86 cv
159.552 147.795 mo
159.647 147.814 159.737 147.858 159.829 147.896 cv
159.778 147.983 159.726 148.071 159.674 148.159 cv
159.605 148.084 159.525 148.015 159.471 147.93 cv
159.458 147.908 159.533 147.792 159.552 147.795 cv
159.98 171.815 mo
160.065 171.87 160.15 171.927 160.235 171.981 cv
160.169 172.059 160.108 172.143 160.031 172.206 cv
160.016 172.219 159.893 172.148 159.896 172.126 cv
159.909 172.021 159.949 171.918 159.98 171.815 cv
161.364 149.684 mo
161.505 149.682 161.648 149.872 161.839 150.014 cv
161.706 150.198 161.605 150.338 161.504 150.478 cv
161.34 150.331 161.176 150.182 161.013 150.034 cv
161.13 149.909 161.246 149.685 161.364 149.684 cv
161.558 211.641 mo
161.448 211.546 161.337 211.453 161.226 211.36 cv
161.313 211.284 161.399 211.208 161.486 211.133 cv
161.569 211.205 161.71 211.271 161.719 211.353 cv
161.729 211.441 161.617 211.543 161.558 211.641 cv
158.916 216.753 mo
158.697 216.565 158.529 216.421 158.362 216.277 cv
158.502 216.119 158.664 215.816 158.776 215.834 cv
158.964 215.864 159.152 216.077 159.269 216.26 cv
159.302 216.311 159.087 216.521 158.916 216.753 cv
156.207 200.255 mo
156.163 200.274 156.041 200.109 155.954 200.029 cv
156.069 199.906 156.177 199.773 156.309 199.674 cv
156.325 199.66 156.472 199.82 156.616 199.952 cv
156.475 200.063 156.355 200.192 156.207 200.255 cv
154.332 197.977 mo
154.207 197.862 154.129 197.792 154.051 197.722 cv
154.158 197.605 154.258 197.482 154.379 197.385 cv
154.392 197.374 154.604 197.546 154.591 197.579 cv
154.534 197.721 154.427 197.839 154.332 197.977 cv
148.783 206.967 mo
148.659 206.851 148.419 206.717 148.434 206.623 cv
148.467 206.41 148.626 206.219 148.793 205.907 cv
148.999 206.16 149.219 206.332 149.189 206.413 cv
149.113 206.619 148.926 206.784 148.783 206.967 cv
147.603 185.017 mo
147.545 184.933 147.483 184.851 147.437 184.761 cv
147.432 184.75 147.533 184.655 147.563 184.665 cv
147.656 184.696 147.74 184.759 147.827 184.81 cv
147.752 184.879 147.678 184.947 147.603 185.017 cv
144.712 222.695 mo
144.633 222.627 144.546 222.565 144.481 222.485 cv
144.466 222.468 144.53 222.342 144.553 222.344 cv
144.65 222.349 144.745 222.384 144.84 222.407 cv
144.798 222.503 144.755 222.6 144.712 222.695 cv
140.357 232.56 mo
141.093 231.592 141.632 231.859 142.139 232.56 cv
140.357 232.56 li
cp
163.445 151.739 mo
163.528 152.11 163.61 152.482 163.692 152.854 cv
163.562 152.893 163.432 152.931 163.302 152.97 cv
163.171 152.601 163.04 152.23 162.909 151.861 cv
163.088 151.82 163.267 151.779 163.445 151.739 cv
165.916 153.194 mo
165.988 153.214 166.021 153.375 166.072 153.473 cv
165.983 153.549 165.895 153.625 165.807 153.701 cv
165.736 153.566 165.665 153.432 165.594 153.297 cv
165.703 153.257 165.826 153.168 165.916 153.194 cv
168.835 207.302 mo
168.927 207.416 169.019 207.53 169.112 207.645 cv
169.013 207.702 168.914 207.762 168.814 207.819 cv
168.742 207.733 168.608 207.641 168.616 207.564 cv
168.627 207.47 168.757 207.389 168.835 207.302 cv
171.19 178.425 mo
171.385 178.602 171.604 178.708 171.617 178.835 cv
171.632 178.978 171.458 179.139 171.366 179.29 cv
171.222 179.192 170.99 179.116 170.957 178.988 cv
170.923 178.855 171.078 178.672 171.19 178.425 cv
171.294 170.635 mo
171.384 170.705 171.475 170.776 171.795 171.026 cv
171.6 171.102 171.445 171.195 171.282 171.209 cv
171.199 171.218 171.016 171.043 171.027 171.021 cv
171.093 170.881 171.2 170.762 171.294 170.635 cv
174.501 162.568 mo
172.922 162.052 172.02 161.289 171.51 160.073 cv
172.897 160.296 173.753 161.102 174.501 162.568 cv
173.161 179.354 mo
173.116 179.372 172.994 179.206 172.907 179.125 cv
173.022 179.002 173.13 178.868 173.263 178.769 cv
173.28 178.755 173.428 178.916 173.572 179.05 cv
173.43 179.161 173.309 179.29 173.161 179.354 cv
172.936 207.736 mo
172.84 207.705 172.733 207.594 172.708 207.496 cv
172.689 207.422 172.79 207.317 172.837 207.227 cv
172.962 207.319 173.087 207.411 173.227 207.515 cv
173.092 207.622 172.99 207.753 172.936 207.736 cv
176.057 184.733 mo
176.116 184.832 176.174 184.932 176.232 185.03 cv
176.145 185.103 176.053 185.237 175.974 185.23 cv
175.88 185.222 175.799 185.088 175.713 185.01 cv
175.827 184.917 175.942 184.825 176.057 184.733 cv
176.169 174.662 mo
176.301 174.734 176.411 174.955 176.417 175.117 cv
176.422 175.281 176.29 175.45 176.057 175.986 cv
175.841 175.255 175.737 175.044 175.74 174.834 cv
175.741 174.768 176.077 174.612 176.169 174.662 cv
177.033 164.147 mo
177.185 164.176 177.365 164.336 177.425 164.483 cv
177.46 164.569 177.285 164.741 177.126 165.003 cv
176.902 164.729 176.76 164.554 176.618 164.379 cv
176.758 164.294 176.913 164.125 177.033 164.147 cv
178.466 175.799 mo
177.948 174.957 177.614 174.415 177.194 173.734 cv
178.551 173.983 178.551 173.983 178.466 175.799 cv
178.85 194.158 mo
178.979 194.346 179.155 194.52 179.214 194.727 cv
179.24 194.818 179.026 194.978 178.822 195.229 cv
178.669 194.903 178.522 194.702 178.498 194.488 cv
178.488 194.393 178.725 194.269 178.85 194.158 cv
178.863 180.147 mo
178.96 180.153 179.055 180.188 179.151 180.212 cv
179.108 180.31 179.065 180.405 179.022 180.501 cv
178.943 180.434 178.856 180.371 178.791 180.291 cv
178.776 180.272 178.84 180.146 178.863 180.147 cv
179.459 171.272 mo
179.604 171.282 179.745 171.367 179.902 171.43 cv
179.804 171.592 179.713 171.778 179.692 171.771 cv
179.548 171.718 179.418 171.625 179.283 171.545 cv
179.342 171.448 179.407 171.269 179.459 171.272 cv
164.524 298.16 mo
155.98 295.348 137.162 295.766 131.736 282.275 cv
130.786 279.557 130.402 276.434 130.242 272.848 cv
130.151 270.792 130.151 268.738 130.213 266.549 cv
130.853 243.866 141.464 237.627 143.497 236.91 cv
166.287 228.872 182.618 207.159 182.618 181.584 cv
182.618 170.841 181.058 163.357 178.87 157.493 cv
178.796 157.457 178.726 157.417 178.671 157.362 cv
178.544 157.234 178.58 156.945 178.543 156.728 cv
178.552 156.723 178.562 156.718 178.571 156.713 cv
177.555 154.119 176.419 151.841 175.248 149.731 cv
175.138 149.776 175.032 149.815 174.929 149.822 cv
174.845 149.829 174.663 149.654 174.675 149.627 cv
174.737 149.485 174.848 149.364 174.941 149.237 cv
174.958 149.25 174.977 149.265 174.995 149.28 cv
174.546 148.482 174.093 147.706 173.64 146.944 cv
173.408 146.554 172.905 146.05 172.265 145.608 cv
172.246 145.798 172.227 145.988 172.209 146.178 cv
172.017 146.149 171.825 146.12 171.634 146.091 cv
171.689 145.832 171.745 145.57 171.8 145.311 cv
170.963 144.833 169.958 144.508 168.979 144.656 cv
167.616 144.863 165.317 145.075 162.411 145.279 cv
162.64 145.99 162.856 146.66 163.089 147.382 cv
162.036 146.902 161.45 146.152 161.44 145.346 cv
151.494 146.008 135.328 146.569 123.963 146.569 cv
108.749 146.569 85.3916 145.619 79.2349 144.699 cv
77.0518 144.375 74.8916 145.928 74.3496 146.838 cv
69.8789 154.345 65.3086 163.189 65.3086 181.584 cv
65.3086 190.938 67.5029 199.771 71.3887 207.61 cv
70.9736 205.678 72.7998 205.286 73.5259 204.143 cv
74.4487 205.932 74.1079 206.562 71.5 207.834 cv
78.48 221.766 90.833 232.525 105.851 237.392 cv
107.431 237.903 117.618 246.309 117.714 266.549 cv
117.724 268.661 117.775 270.818 117.684 272.848 cv
117.522 276.434 117.141 279.557 116.19 282.275 cv
110.765 295.766 91.9468 295.348 83.4019 298.16 cv
80.5088 299.113 81.6006 300.87 83.4409 301.308 cv
84.1108 301.466 86.2817 301.989 90.0088 302.591 cv
89.9507 302.275 90.0039 301.928 90.1807 301.532 cv
91.1367 302.071 91.4058 302.248 91.2046 302.778 cv
95.0527 303.361 100.316 303.987 107.06 304.409 cv
107.085 304.37 107.134 304.321 107.141 304.325 cv
107.188 304.354 107.229 304.39 107.272 304.422 cv
112.084 304.72 117.639 304.912 123.963 304.912 cv
149.078 304.912 162.385 301.681 164.219 301.246 cv
166.06 300.811 167.418 299.113 164.524 298.16 cv
f
85.0542 277.898 mo
85.5054 277.862 85.9565 277.826 86.6934 277.768 cv
86.1143 278.747 85.6523 278.732 85.1255 278.402 cv
85.1016 278.234 85.0781 278.066 85.0542 277.898 cv
84.6675 283.021 mo
84.5161 282.851 84.3462 282.692 84.2285 282.502 cv
84.1973 282.452 84.3652 282.207 84.3804 282.212 cv
84.5854 282.29 84.7793 282.397 85.0615 282.539 cv
84.8711 282.771 84.7695 282.896 84.6675 283.021 cv
82.9912 259.047 mo
82.8691 258.947 82.7686 258.822 82.6621 258.704 cv
82.7412 258.634 82.8213 258.563 82.9492 258.45 cv
83.0425 258.587 83.1504 258.71 83.2065 258.853 cv
83.2192 258.887 83.0044 259.058 82.9912 259.047 cv
75.4932 260.308 mo
75.4063 260.316 75.2114 260.13 75.2212 260.111 cv
75.2983 259.959 75.4121 259.827 75.5142 259.688 cv
75.6104 259.762 75.7065 259.834 76.0635 260.105 cv
75.8433 260.188 75.6724 260.287 75.4932 260.308 cv
74.7964 257.051 mo
74.7534 256.929 75.0322 256.692 75.1655 256.509 cv
75.3843 256.68 75.6675 256.814 75.7974 257.038 cv
75.8604 257.147 75.6382 257.422 75.4644 257.799 cv
75.1445 257.46 74.8804 257.287 74.7964 257.051 cv
85.1411 253.419 mo
85.1831 253.533 85.2241 253.647 85.2925 253.831 cv
85.1245 253.881 84.9644 253.949 84.7993 253.96 cv
84.7651 253.962 84.6572 253.674 84.6865 253.65 cv
84.8174 253.546 84.9863 253.491 85.1411 253.419 cv
85.5425 269.614 mo
85.5894 269.706 85.6484 269.794 85.6763 269.893 cv
85.6841 269.921 85.5815 270.019 85.5713 270.013 cv
85.4824 269.959 85.4014 269.892 85.3184 269.827 cv
85.3936 269.756 85.4683 269.686 85.5425 269.614 cv
71.2173 263.227 mo
71.1621 263.35 70.4775 263.196 69.7012 263.145 cv
70.2583 262.305 70.6094 261.774 70.9604 261.244 cv
71.1763 261.332 71.3921 261.42 71.6094 261.509 cv
71.4951 262.088 71.4492 262.698 71.2173 263.227 cv
67.4453 268.584 mo
67.3955 268.586 67.3354 268.404 67.2793 268.307 cv
67.4155 268.229 67.5483 268.141 67.6943 268.092 cv
67.7144 268.085 67.8003 268.274 67.8936 268.438 cv
67.7363 268.495 67.5923 268.576 67.4453 268.584 cv
64.4092 258.771 mo
64.3193 258.644 64.2144 258.522 64.1533 258.381 cv
64.1436 258.357 64.3164 258.254 64.4644 258.144 cv
64.2183 257.996 63.9712 257.848 63.7173 257.665 cv
63.6924 257.647 59.9624 254.895 57.1411 252.322 cv
56.1323 251.401 55.2075 250.446 54.4092 249.566 cv
54.2695 249.606 54.1353 249.655 54.0034 249.651 cv
53.9575 249.65 53.8613 249.376 53.8823 249.361 cv
53.9541 249.311 54.0342 249.273 54.1162 249.238 cv
52.5103 247.433 51.4893 246.014 51.4731 245.991 cv
50.2241 244.156 49.8013 241.416 51.7065 239.479 cv
52.5244 238.646 53.4912 238.204 54.5005 238.204 cv
55.5552 238.204 56.6372 238.697 57.5464 239.591 cv
57.5513 239.598 57.5723 239.62 57.5942 239.645 cv
57.8003 239.254 58.2065 239.04 59.1895 239.307 cv
58.7744 239.703 58.4595 240.005 58.1724 240.28 cv
59.3672 241.588 61.9961 244.433 63.5532 245.896 cv
65.4893 247.714 69.6772 250.909 70.2661 251.357 cv
71.0991 252.2 71.5645 253.316 71.5742 254.504 cv
71.5854 255.717 71.1221 256.86 70.2734 257.726 cv
69.3633 258.651 68.4092 259.103 67.3604 259.103 cv
67.3594 259.103 li
66.4873 259.103 65.5195 258.773 64.4805 258.153 cv
64.5542 258.3 64.6465 258.431 64.6685 258.571 cv
64.6763 258.623 64.5015 258.704 64.4092 258.771 cv
59.6963 255.198 mo
59.6821 255.177 59.7573 255.06 59.7764 255.063 cv
59.8711 255.083 59.9604 255.127 60.0513 255.163 cv
60.0005 255.252 59.9492 255.341 59.8984 255.428 cv
59.8281 255.353 59.7505 255.283 59.6963 255.198 cv
59.9131 267.451 mo
59.7251 267.435 59.5581 267.188 59.3813 267.041 cv
59.5054 266.908 59.6226 266.676 59.7544 266.666 cv
59.9634 266.651 60.1831 266.786 60.6411 266.94 cv
60.2632 267.221 60.0762 267.466 59.9131 267.451 cv
58.3203 265.682 mo
58.2515 265.606 58.1724 265.537 58.1182 265.452 cv
58.1055 265.432 58.1802 265.314 58.1992 265.318 cv
58.2935 265.337 58.3833 265.383 58.4741 265.418 cv
58.4233 265.506 58.3711 265.594 58.3203 265.682 cv
54.4741 255.928 mo
54.4092 255.779 54.3335 255.638 54.2983 255.486 cv
54.2925 255.463 54.5425 255.336 54.5625 255.358 cv
54.6675 255.475 54.7363 255.622 54.8184 255.761 cv
54.7222 255.808 54.6255 255.854 54.4741 255.928 cv
52.4863 266.927 mo
50.7983 266.657 50.2344 266.138 50.1411 264.789 cv
50.0781 263.871 50.2964 263.119 51.4092 263.063 cv
52.6802 265.267 52.6802 265.267 52.4863 266.927 cv
50.5063 231.523 mo
50.5571 231.63 50.6084 231.738 50.6592 231.846 cv
50.5752 231.913 50.4663 232.052 50.4131 232.031 cv
50.3193 231.997 50.2593 231.869 50.1855 231.78 cv
50.2925 231.694 50.3994 231.609 50.5063 231.523 cv
50.5762 217.776 mo
50.6621 217.826 50.7334 217.903 50.8105 217.971 cv
50.7231 218.024 50.6362 218.078 50.5493 218.133 cv
50.5093 218.041 50.4634 217.951 50.4404 217.857 cv
50.4365 217.841 50.5522 217.763 50.5762 217.776 cv
51.5742 209.603 mo
51.6821 209.549 51.9995 209.913 52.4292 210.25 cv
51.9253 210.598 51.5952 210.823 51.2661 211.05 cv
51.1084 210.812 50.7686 210.496 50.8291 210.353 cv
50.9624 210.043 51.2686 209.755 51.5742 209.603 cv
51.7104 201.401 mo
51.7881 201.383 51.8984 201.495 51.9932 201.551 cv
51.9502 201.657 51.9082 201.765 51.8652 201.87 cv
51.7344 201.795 51.6045 201.721 51.4731 201.645 cv
51.5513 201.559 51.6172 201.424 51.7104 201.401 cv
54.9551 219.539 mo
55.0464 219.609 55.1372 219.681 55.4585 219.931 cv
55.2622 220.006 55.1074 220.101 54.9443 220.114 cv
54.8604 220.122 54.6772 219.947 54.6885 219.926 cv
54.7544 219.785 54.8613 219.665 54.9551 219.539 cv
63.9175 238.761 mo
64.0083 238.831 64.0991 238.901 64.4512 239.175 cv
64.2422 239.244 64.0791 239.332 63.9121 239.343 cv
63.8271 239.349 63.6455 239.179 63.6572 239.151 cv
63.7173 239.011 63.8252 238.889 63.9175 238.761 cv
66.0034 226.849 mo
66.0942 226.824 66.2563 227.066 66.5171 227.312 cv
66.1982 227.449 65.9951 227.602 65.7935 227.601 cv
65.6743 227.6 65.5562 227.355 65.4385 227.222 cv
65.6245 227.089 65.7964 226.903 66.0034 226.849 cv
46.5635 229.872 mo
46.4785 229.877 46.2993 229.71 46.3115 229.683 cv
46.3701 229.541 46.4775 229.42 46.5674 229.293 cv
46.6572 229.363 46.7476 229.434 47.1035 229.709 cv
46.8936 229.778 46.7305 229.863 46.5635 229.872 cv
46.6724 259.422 mo
46.6191 259.43 46.5415 259.255 46.4741 259.163 cv
46.6035 259.074 46.7275 258.973 46.8682 258.911 cv
46.8901 258.901 46.9932 259.081 47.1025 259.233 cv
46.9521 259.307 46.8174 259.402 46.6724 259.422 cv
46.4102 141.449 mo
46.5005 141.501 46.5815 141.57 46.6655 141.635 cv
46.5903 141.707 46.5151 141.777 46.4395 141.848 cv
46.3921 141.756 46.3335 141.667 46.3052 141.57 cv
46.2964 141.541 46.3994 141.443 46.4102 141.449 cv
44.7383 197.13 mo
44.6753 197.127 44.5352 196.785 44.5903 196.694 cv
44.6665 196.567 44.8994 196.458 45.0513 196.475 cv
45.1753 196.487 45.2783 196.695 45.5186 196.953 cv
45.1602 197.045 44.9473 197.14 44.7383 197.13 cv
44.6582 235.346 mo
44.6094 235.372 44.2915 235.084 44.3135 235.033 cv
44.4023 234.825 44.5581 234.634 44.7324 234.487 cv
44.7671 234.458 44.9932 234.658 45.2412 234.827 cv
45.0034 235.052 44.8535 235.239 44.6582 235.346 cv
44.3633 189.455 mo
44.4434 189.45 44.5313 189.586 44.6162 189.66 cv
44.5552 189.758 44.4932 189.854 44.4321 189.95 cv
44.3203 189.856 44.2095 189.762 44.0972 189.666 cv
44.1865 189.591 44.2705 189.461 44.3633 189.455 cv
43.9512 186.326 mo
43.9653 186.221 44.0044 186.119 44.0352 186.016 cv
44.1211 186.071 44.2051 186.126 44.2905 186.183 cv
44.2241 186.259 44.1631 186.343 44.0864 186.405 cv
44.0713 186.418 43.9482 186.349 43.9512 186.326 cv
43.2295 141.505 mo
43.1064 141.39 42.9834 141.275 42.8594 141.16 cv
42.9404 141.074 43.0493 140.902 43.0952 140.918 cv
43.2461 140.97 43.3755 141.089 43.5234 141.189 cv
43.3892 141.333 43.3091 141.419 43.2295 141.505 cv
43.0244 219.684 mo
42.4653 220.76 41.5215 221.554 40.3652 221.919 cv
39.8193 222.093 39.2993 222.18 38.8184 222.18 cv
37.1162 222.18 35.7373 221.072 34.6025 218.794 cv
34.5884 218.767 32.5825 214.587 31.2964 210.993 cv
29.8071 206.832 29.2603 202.786 29.2554 202.745 cv
29.0103 200.538 29.9204 197.92 32.5112 197.101 cv
32.9663 196.956 33.4146 196.884 33.8452 196.884 cv
35.5615 196.884 36.9565 198.055 37.5771 200.016 cv
37.6235 200.194 39.0742 205.69 39.9712 208.32 cv
40.8301 210.834 43.0322 215.618 43.3433 216.29 cv
43.6855 217.427 43.5713 218.628 43.0244 219.684 cv
43.2095 229.072 mo
43.0815 228.977 42.9443 228.889 42.8345 228.774 cv
42.8213 228.762 42.9502 228.61 43.1885 228.28 cv
43.2715 228.49 43.3623 228.647 43.3853 228.814 cv
43.3965 228.891 43.2725 228.985 43.2095 229.072 cv
42.4331 254.557 mo
42.3174 254.679 42.0942 254.699 41.7104 254.545 cv
41.9565 254.286 42.2021 254.026 42.4482 253.767 cv
42.5425 253.832 42.6362 253.898 42.7305 253.963 cv
42.6353 254.164 42.5781 254.401 42.4331 254.557 cv
31.3901 213.743 mo
31.4492 213.647 31.5142 213.469 31.5654 213.473 cv
31.7104 213.483 31.8501 213.568 32.0063 213.63 cv
31.9092 213.79 31.8184 213.976 31.7974 213.969 cv
31.6533 213.915 31.5244 213.823 31.3901 213.743 cv
32.0103 221.614 mo
31.9312 221.62 31.8423 221.483 31.7583 221.409 cv
31.8193 221.313 31.8804 221.217 31.9414 221.119 cv
32.0532 221.214 32.1646 221.309 32.2764 221.403 cv
32.1885 221.479 32.1035 221.608 32.0103 221.614 cv
29.6523 242.135 mo
29.5801 242.003 29.5093 241.871 29.4375 241.74 cv
29.5444 241.699 29.6646 241.609 29.7524 241.634 cv
29.8252 241.654 29.8604 241.811 29.9111 241.907 cv
29.8252 241.983 29.7383 242.06 29.6523 242.135 cv
28.7661 218.852 mo
28.7153 218.753 28.6094 218.641 28.6304 218.563 cv
28.6553 218.47 28.7905 218.405 28.8784 218.329 cv
28.9492 218.463 29.0205 218.597 29.0913 218.729 cv
28.9834 218.771 28.8755 218.811 28.7661 218.852 cv
32.4063 176.236 mo
32.3291 176.39 32.2695 176.557 32.1631 176.686 cv
32.1401 176.713 31.8535 176.596 31.8564 176.563 cv
31.8745 176.396 31.9482 176.237 32.0044 176.07 cv
32.1831 176.145 32.2944 176.19 32.4063 176.236 cv
26.9131 169.565 mo
26.9155 169.534 27.1855 164.907 27.8022 161.141 cv
28.5142 156.791 29.9995 152.974 30.0142 152.937 cv
30.8853 150.847 32.7202 149.482 34.6763 149.482 cv
34.9805 149.482 35.2896 149.514 35.5972 149.576 cv
36.8291 149.825 37.7524 150.343 38.2695 151.075 cv
38.7896 151.813 38.9312 152.794 38.6904 153.99 cv
38.6372 154.206 37.1733 160.276 36.6855 163.006 cv
36.2183 165.621 35.8271 170.874 35.7734 171.611 cv
35.3213 173.686 33.4692 175.184 31.3452 175.184 cv
31.0444 175.184 30.7393 175.152 30.4404 175.093 cv
28.8374 174.769 26.7275 173.843 26.9131 169.565 cv
26.4912 229.258 mo
26.1982 227.945 26.4873 227.321 27.4585 227.188 cv
27.6392 227.162 28.0234 227.412 28.0371 227.563 cv
28.1353 228.619 27.2192 228.669 26.4912 229.258 cv
27.0581 139.542 mo
27.2075 139.398 27.8184 139.434 27.8755 139.551 cv
28.0142 139.842 28.1074 140.398 27.9453 140.543 cv
27.5615 140.889 27.0186 141.06 26.5405 141.3 cv
26.3984 141.144 26.2563 140.987 26.1143 140.832 cv
26.4204 140.394 26.6802 139.906 27.0581 139.542 cv
25.4224 105.549 mo
25.3755 105.487 25.6504 105.025 25.7603 105.032 cv
26.0161 105.047 26.2612 105.236 26.6621 105.428 cv
26.3862 105.721 26.1953 106.042 26.0864 106.016 cv
25.8354 105.957 25.5815 105.76 25.4224 105.549 cv
22.3862 192.852 mo
22.2603 192.846 22.0654 192.633 22.0474 192.492 cv
22.0254 192.322 22.1582 192.134 22.2754 191.813 cv
22.6016 192.27 22.8003 192.431 22.7764 192.545 cv
22.7495 192.678 22.5195 192.858 22.3862 192.852 cv
20.8052 109.508 mo
20.7583 109.417 20.6992 109.328 20.6724 109.232 cv
20.6631 109.202 20.7661 109.106 20.7764 109.112 cv
20.8652 109.165 20.9453 109.232 21.0283 109.296 cv
20.9531 109.367 20.8794 109.438 20.8052 109.508 cv
20.6753 206.147 mo
20.2065 205.957 19.8882 205.928 19.7661 205.756 cv
19.5352 205.435 19.3872 205.039 19.2861 204.652 cv
19.2705 204.594 19.7803 204.267 19.8872 204.329 cv
20.2266 204.533 20.5444 204.828 20.7612 205.159 cv
20.8672 205.32 20.7305 205.64 20.6753 206.147 cv
19.2896 170.628 mo
19.3364 170.72 19.3955 170.809 19.4224 170.905 cv
19.4312 170.936 19.3281 171.031 19.3184 171.025 cv
19.2285 170.974 19.1484 170.904 19.0654 170.841 cv
19.1401 170.77 19.2153 170.698 19.2896 170.628 cv
18.0073 163.997 mo
17.8726 163.937 17.8081 163.716 17.7134 163.563 cv
17.8623 163.486 18.0361 163.321 18.1533 163.355 cv
18.2925 163.395 18.3833 163.604 18.5581 163.817 cv
18.3154 163.905 18.1182 164.047 18.0073 163.997 cv
18.4053 166.629 mo
17.4473 166.982 17.4473 166.982 16.4375 166.099 cv
17.3423 166.141 17.8853 166.165 18.4292 166.19 cv
18.4214 166.336 18.4131 166.482 18.4053 166.629 cv
16.9604 195.912 mo
16.9131 195.928 16.8071 195.751 16.7285 195.663 cv
16.8555 195.551 16.9766 195.428 17.1182 195.34 cv
17.1353 195.328 17.2686 195.502 17.3994 195.649 cv
17.2476 195.746 17.1143 195.864 16.9604 195.912 cv
17.5063 145.019 mo
17.6055 145.135 17.6704 145.28 17.7451 145.417 cv
17.6465 145.469 17.5464 145.522 17.3804 145.611 cv
17.3242 145.457 17.2441 145.314 17.2373 145.169 cv
17.2354 145.119 17.4922 145.001 17.5063 145.019 cv
19.7793 174.381 mo
19.9263 173.499 20.0171 172.951 20.1084 172.403 cv
20.2661 172.42 20.4243 172.438 20.5825 172.455 cv
20.8711 173.098 20.9233 173.688 19.7793 174.381 cv
20.4033 175.9 mo
20.5283 176.148 20.6523 176.396 20.7773 176.646 cv
20.6284 176.703 20.4795 176.762 20.3301 176.819 cv
20.2583 176.553 20.1865 176.286 20.1143 176.02 cv
20.2104 175.979 20.3071 175.939 20.4033 175.9 cv
20.1421 116.48 mo
20.9922 116.682 20.8813 117.344 20.5762 118.138 cv
19.7524 118.082 19.0923 117.927 19.1704 117.095 cv
19.1934 116.847 19.8652 116.416 20.1421 116.48 cv
26.8574 193.149 mo
26.9985 193.212 27.1182 193.321 27.2461 193.415 cv
27.1743 193.505 27.1035 193.596 26.8374 193.931 cv
26.7651 193.729 26.6753 193.569 26.6621 193.403 cv
26.6563 193.319 26.8315 193.138 26.8574 193.149 cv
26.7935 155.967 mo
26.9663 155.792 27.1123 155.549 27.3223 155.46 cv
27.5063 155.383 27.7642 155.479 27.9893 155.497 cv
28.0103 155.646 28.0322 155.793 28.0532 155.941 cv
27.6885 156.032 27.3223 156.124 26.9565 156.214 cv
26.9023 156.131 26.8472 156.049 26.7935 155.967 cv
28.9043 130.461 mo
29.0195 130.448 29.1602 130.651 29.3301 130.792 cv
29.1733 130.976 29.0605 131.107 28.9463 131.24 cv
28.8022 131.092 28.6592 130.944 28.5151 130.796 cv
28.6445 130.676 28.7632 130.478 28.9043 130.461 cv
31.4243 107.21 mo
30.9414 106.841 30.4585 106.472 29.7373 105.921 cv
30.9595 105.71 31.4653 106.072 31.4243 107.21 cv
31.9883 125.984 mo
31.8301 126.096 31.7324 126.166 31.6343 126.234 cv
31.5352 126.094 31.4253 125.96 31.3525 125.809 cv
31.3433 125.79 31.5825 125.596 31.6201 125.62 cv
31.7603 125.708 31.8633 125.854 31.9883 125.984 cv
33.6465 107.754 mo
33.5605 107.813 33.4751 107.877 33.3833 107.924 cv
33.3735 107.929 33.2754 107.826 33.2852 107.795 cv
33.3174 107.7 33.3813 107.615 33.4341 107.526 cv
33.5054 107.603 33.5752 107.678 33.6465 107.754 cv
33.0713 104.336 mo
35.3223 105.486 35.4751 105.726 34.6104 107.191 cv
34.0405 106.096 32.6831 105.769 33.0713 104.336 cv
39.7715 189.707 mo
39.9014 190.125 40.0581 190.363 40.0122 190.553 cv
39.9634 190.753 39.7222 190.907 39.5654 191.081 cv
39.4312 190.837 39.2163 190.602 39.1924 190.347 cv
39.1782 190.199 39.4712 190.022 39.7715 189.707 cv
39.2935 173.514 mo
39.1943 173.612 38.8662 173.631 38.7583 173.544 cv
38.1563 173.063 38.5845 172.654 38.8901 172.066 cv
39.5991 172.602 39.7803 173.027 39.2935 173.514 cv
41.4624 178.104 mo
41.3843 178.275 41.3364 178.379 41.2896 178.483 cv
41.1475 178.415 40.9961 178.359 40.8735 178.267 cv
40.8535 178.25 40.9585 177.983 41.0044 177.983 cv
41.1533 177.984 41.3022 178.057 41.4624 178.104 cv
40.6934 104.957 mo
40.9814 105.2 41.2695 105.444 41.5571 105.689 cv
41.4282 105.829 41.2983 105.969 41.1694 106.109 cv
40.9121 105.836 40.6553 105.564 40.3984 105.292 cv
40.4961 105.179 40.5952 105.067 40.6934 104.957 cv
41.9082 161.707 mo
41.8691 161.8 41.8003 161.878 41.7422 161.963 cv
41.6782 161.885 41.6152 161.806 41.5513 161.726 cv
41.6392 161.675 41.7231 161.616 41.8164 161.578 cv
41.8291 161.573 41.9204 161.681 41.9082 161.707 cv
44.2134 175.98 mo
44.3105 176.023 44.4063 176.066 44.5024 176.109 cv
44.4331 176.188 44.3726 176.276 44.2925 176.342 cv
44.2734 176.356 44.1475 176.292 44.1494 176.269 cv
44.1543 176.171 44.1895 176.076 44.2134 175.98 cv
44.5635 146.503 mo
44.7192 146.536 44.8765 146.57 45.0322 146.604 cv
44.9653 146.988 44.8975 147.373 44.8291 147.756 cv
44.6294 147.718 44.4302 147.68 44.2305 147.643 cv
44.3413 147.262 44.4521 146.883 44.5635 146.503 cv
45.1313 105.179 mo
45.2051 105.2 45.2402 105.357 45.2915 105.454 cv
45.2041 105.531 45.1172 105.607 45.0303 105.684 cv
44.9585 105.551 44.8862 105.419 44.8145 105.287 cv
44.9214 105.247 45.0425 105.155 45.1313 105.179 cv
46.9692 205.925 mo
46.8813 206 46.7935 206.075 46.7051 206.151 cv
46.6353 206.018 46.5654 205.884 46.4941 205.749 cv
46.6025 205.71 46.7251 205.621 46.8145 205.646 cv
46.8862 205.666 46.9194 205.826 46.9692 205.925 cv
15.5933 176.429 mo
15.4263 176.591 14.9595 176.653 14.7632 176.537 cv
14.1084 176.148 14.1821 175.395 14.9121 174.237 cv
15.9092 175.215 16.1445 175.892 15.5933 176.429 cv
14.6104 180.9 mo
14.6821 181.497 14.7544 182.094 14.8726 183.071 cv
13.7476 182.249 13.5713 181.668 14.6104 180.9 cv
13.3452 163.098 mo
13.4082 162.913 13.6904 162.806 13.8774 162.663 cv
14.0024 162.858 14.2183 163.05 14.2295 163.25 cv
14.2412 163.484 14.0752 163.729 13.9863 163.969 cv
13.8433 163.885 13.7002 163.8 13.5571 163.716 cv
13.4775 163.506 13.2896 163.26 13.3452 163.098 cv
12.3042 176.269 mo
12.1802 176.147 11.9653 176.034 11.9521 175.902 cv
11.9341 175.71 12.0615 175.504 12.2012 175.072 cv
12.4751 175.448 12.7031 175.625 12.6992 175.796 cv
12.6953 175.957 12.4453 176.111 12.3042 176.269 cv
51.3232 104.256 mo
51.6812 104.339 52.0396 104.421 52.3965 104.503 cv
52.3994 104.614 52.4014 104.726 52.4033 104.836 cv
52.1445 104.897 51.8711 105.035 51.6304 104.992 cv
51.4575 104.962 51.3262 104.691 51.1763 104.527 cv
51.2251 104.438 51.2744 104.347 51.3232 104.256 cv
51.5654 114.241 mo
51.5171 114.149 51.4585 114.062 51.4302 113.963 cv
51.4214 113.934 51.5254 113.836 51.5352 113.842 cv
51.6265 113.896 51.7065 113.963 51.7905 114.028 cv
51.7153 114.099 51.6401 114.17 51.5654 114.241 cv
59.7295 107.56 mo
59.8203 107.685 59.8691 107.837 59.9331 107.981 cv
59.8271 108.023 59.7202 108.066 59.5435 108.137 cv
59.5024 107.978 59.4365 107.827 59.4414 107.679 cv
59.4434 107.632 59.7134 107.537 59.7295 107.56 cv
64.3911 121.992 mo
64.6162 122.185 64.9072 122.34 65.0396 122.583 cv
65.1055 122.704 64.8833 122.983 64.7012 123.394 cv
64.3672 123.01 64.0962 122.818 64.0205 122.567 cv
63.9785 122.425 64.2573 122.188 64.3911 121.992 cv
65.3774 130.006 mo
65.4482 130.082 65.5186 130.157 65.5884 130.233 cv
65.5024 130.292 65.4185 130.354 65.3271 130.401 cv
65.3174 130.406 65.2192 130.304 65.2305 130.274 cv
65.2622 130.179 65.3252 130.094 65.3774 130.006 cv
89.1885 277.074 mo
89.2861 277.097 89.3843 277.118 89.4824 277.141 cv
89.4414 277.403 89.4004 277.666 89.3594 277.93 cv
89.2075 277.892 89.0552 277.854 88.9033 277.815 cv
88.9985 277.568 89.0933 277.321 89.1885 277.074 cv
90.1831 265.672 mo
90.2734 265.726 90.3555 265.794 90.4395 265.859 cv
90.3633 265.932 90.2881 266.002 90.2124 266.073 cv
90.1655 265.981 90.1055 265.893 90.0771 265.793 cv
90.0693 265.765 90.1724 265.666 90.1831 265.672 cv
90.3555 256.599 mo
90.4473 256.712 90.5381 256.826 90.6304 256.939 cv
90.5313 256.997 90.4331 257.056 90.3345 257.113 cv
90.2632 257.028 90.1294 256.937 90.1372 256.859 cv
90.1475 256.766 90.2773 256.685 90.3555 256.599 cv
95.3374 273.418 mo
95.4111 273.571 95.5093 273.707 95.5303 273.854 cv
95.5381 273.908 95.3643 273.988 95.2734 274.058 cv
95.1831 273.928 95.0771 273.805 95.0171 273.662 cv
95.0063 273.638 95.1855 273.531 95.3374 273.418 cv
102.537 277.075 mo
109.707 265.982 104.231 253.354 95.6792 249.371 cv
93.3154 248.271 90.9922 247.073 88.7144 245.787 cv
88.6611 245.977 88.6113 246.166 88.5562 246.355 cv
88.4072 246.305 88.2573 246.253 88.1084 246.202 cv
88.1963 245.998 88.2896 245.796 88.3794 245.594 cv
82.6035 242.299 77.1582 238.367 72.3301 233.541 cv
61.0205 222.237 53.8081 207.926 51.4155 192.402 cv
51.4146 192.402 51.4131 192.402 51.4131 192.402 cv
51.4111 192.401 51.4131 192.394 51.4131 192.391 cv
50.8325 188.619 50.5273 184.779 50.5273 180.892 cv
50.5273 162.945 54.4121 152.789 58.8433 143.969 cv
61.1914 138.842 68.1631 129.218 68.0361 121.348 cv
68.0361 109.763 59.1543 102.193 47.6982 102.193 cv
36.2432 102.193 19.4341 103.721 16.1074 103.916 cv
12.7803 104.109 10.8145 106.035 9.54932 110.473 cv
.196289 138.411 li
-.932617 141.943 3.01318 145.34 6.75439 144.969 cv
10.4951 144.598 11.3555 144.169 13.4224 144.128 cv
15.4873 144.087 16.2324 144.718 15.8154 146.45 cv
12.8613 156.953 10.5063 168.294 10.5063 180.892 cv
10.5063 196.329 13.5381 211.327 19.5195 225.472 cv
25.2871 239.112 33.5361 251.352 44.0371 261.847 cv
52.5781 270.385 62.2725 277.433 72.9365 282.866 cv
87.6392 289.339 98.3491 283.557 102.537 277.075 cv
f
84.6387 80.7041 mo
83.2803 79.8345 81.7676 78.9102 80.1597 77.9595 cv
80.0215 78.1523 79.8774 78.2783 79.7773 78.2783 cv
79.6577 78.2783 79.5776 78.1001 79.5776 77.832 cv
79.5776 77.7632 79.5947 77.7002 79.6216 77.6431 cv
68.3535 71.0254 52.8506 63.269 52.8506 63.269 cv
52.8506 63.269 70.3413 77.4131 81.2495 84.4043 cv
90.0977 90.0742 91.4175 89.6055 92.3535 88.5845 cv
93.2896 87.5625 93.4873 86.374 84.6387 80.7041 cv
f
87.5293 62.2813 mo
87.5132 62.3423 87.416 62.4272 87.2021 62.5625 cv
86.4902 63.0112 84.9312 62.6802 84.9312 62.0791 cv
84.9312 61.8291 85.2432 61.7515 85.644 61.9014 cv
86.0322 62.0474 86.6909 62.1685 87.0923 62.1685 cv
87.3042 62.1685 87.416 62.1865 87.481 62.2153 cv
76.728 47.415 63.2881 30.4541 63.2881 30.4541 cv
63.2881 30.4541 79.3589 59.1475 89.8779 74.8125 cv
98.4102 87.5205 100.039 87.8145 101.381 87.1841 cv
102.722 86.5542 103.269 85.2373 94.7373 72.5303 cv
92.6602 69.4385 90.1753 65.9253 87.5293 62.2813 cv
f
112.311 87.1841 mo
113.818 86.9277 114.9 86.1411 112.682 77.0039 cv
109.944 65.7397 102.402 46.394 102.402 46.394 cv
102.402 46.394 104.483 66.668 107.22 77.9321 cv
109.439 87.0688 110.802 87.4399 112.311 87.1841 cv
f
145.22 87.1841 mo
146.561 87.814 148.19 87.52 156.722 74.812 cv
167.241 59.147 183.312 30.4541 183.312 30.4541 cv
183.312 30.4541 162.383 56.8647 151.864 72.5298 cv
143.331 85.2378 143.878 86.5537 145.22 87.1841 cv
f
134.821 87.1841 mo
136.329 87.4399 137.692 87.0688 139.911 77.9321 cv
142.647 66.668 144.729 46.394 144.729 46.394 cv
144.729 46.394 137.187 65.7397 134.45 77.0039 cv
132.231 86.1411 133.313 86.9277 134.821 87.1841 cv
f
123.845 0 mo
123.845 0 121.059 42.3423 121.059 66.4175 cv
121.059 85.9463 122.306 87.1841 123.845 87.1841 cv
125.384 87.1841 126.631 85.9463 126.631 66.4175 cv
126.631 42.3423 123.845 0 123.845 0 cv
f
155.103 88.584 mo
156.039 89.606 157.357 90.0747 166.207 84.4038 cv
177.115 77.4141 194.605 63.269 194.605 63.269 cv
194.605 63.269 173.727 73.7139 162.817 80.7041 cv
153.969 86.375 154.167 87.562 155.103 88.584 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Dave Shea) ()%%Title: (Logo Black.eps)%%CreationDate: 2017-01-16 3:12 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6B7&o)dkH+I!<3(_&3@>J$&!%9OG!bb$_]NdTuOn)pNf"c^\t+@aMs4FcbA<23a(',^lh0^d:et*QJ5]8Y@kc#m&N,G:YNq;%:6olT$-LAq$&@8@)r:'X9oX*K5pnq*0L_mK:*uP>Z\^*/*tP8O3Y!'nkC`GlT<2;6I)%D%V>4XS/CVo(Uc0,PgkC'UbDdi22]&@)%Q'8)^'RWG-h;W`;).'GCI9oH+fm!Q^B"P#;h6QdoVk*$-IU&KS-L2i4!^QQiI0tjuYTV=^TA09Y"Y^.odK#uhj\pe"#!<Y#H!bIb%YL.A:oN%a_m*-o$.EiUWShLAn.I`Bi-36.A0'i#U`MC!&0ekp"SYW'r@LY"N<#T4TN&*jXEG$gp3MX\U/m$-3s#&g9:-36=Do`<R%1'M+:*rQTd.NOLH'`O(bDV#P.\=8IY&1dN(Kh6>G+7^(qMVOemoY*`;!<D4?Y0cD>?i18Tl?oml@no+L;@e<Mc/'OK^f5q,>VGkT%B7>oG%)nt2E6K2t..A2&NfDH3";hrG6sW1o:-(kd^!b>I$lT2!?mPN/[p!12Y(b9TBU0,o!f"KunJ##Xd867I"QN28?YC;8,k4)F%rQ"\bTs%Mp9Z/$W<9[;3!t`4`isn--JBMQ<&YL(;7@c9!F=%#X7DK;;Ec9J1Nt\aj`rF(^r3M!V7=cPHKtlYfpcFam^Iom;.EfTC%?kpW=Dck/f\<Q#]CYUB\LUH,]pamPB[Gl1..j!k5$"bXjl_IF_:($p7eu9@bPtJkrn.Y^/CR%Mr<iH4+Q:eBW<.]6P%[M-?4:YS:%*%^84g]h8In\t:]*cWWF.@%6@_[V+5>&[1)2lm2',`NM)_%FN@YRVWbr!g[u;$+4\@tMJS2`N#V)a_D`_N<`4i,:Smp_Q,J@tK,<%C?#5$/N>BX)qNt-pe7+uLcM=eVBVlMr/Fq?O^m`4mMIn<42bBm,H1nHJ[OG2i,8l-cQF8d0#KILs2%rYI*rF5Wo1=)I.0)m#"OI3%+9'9I_^Fq4X9HWLJ)a\M>_;3tqhI=,49.+&pd^c/N$"oXXG,mcd05RN@h1<7Gi=*+A8/bs%I",KJYSDg'93R2`hUPME.%.6XG-Hh%NXsSA[tVS**B6*8>N0I5m9n)q*\_e24=p#[`,-',bUJnqUidj*.Af2H%T=DBMs1F#QY&W()o`oLP'Y0qEI1rNIk^#0AR]PsF,jse%+`QWMo<5IRE>s[;>-5riP3A_253?a>mhPhSXVDn?<k:'0&s\`-J/CkBKWPu(8@V:e9)W5/\0XjJkQh++;NV`E(^?<TJ+4%K@IQe_%Mgl`7=:@Dkro0P<!e4;Nih'`oInqDf^6@PPTn#e#^\F^/`8?ipprD>GQgkaN0E.qMn9<tIrh8Bp/C3;1_;BKDnTX4:rX6`d6qboE%=,(fJ,R[2H$u&j8-DT!:jdG`i;,1*K-TEp?F'3rAIu:N+;iHj1`IOYUrWHG@T17!DQ]/e1kQJp\#pt3f_(leW@e"XPW'XH!(X!F&%5NrLL$R*G69\:We`8G8:`;nEu5"DG-C^PX.\AG.QHWGF7(*E`,JM9G2.H8?6S.LVlIKjRa#Tiak@3pAWOJi5X)Mb95Q=2;")-%6k%j1('S.5!eYiMSC7@a8"."K;Ot%r3MeYV4KYL2iR&0f6<?q^.s`+n_)r>Z,qjK;1c[;%4iQ5=[/]3?C155s</^;+b[+Sh(p;U^aCG%AMC<E@ng>jEa)0&(XE@5NEj:Vb$`F:L9Zt:QR's.TmVLk.&2A?Y]%_jk]p#D#?_FC(0/a0MJ3<0NdI!`MAQt);KtTu,EdrR1GJ!T%GdX5"-`(a#1_TcF=>6!p'[3Zf>+lSd;+V?Y$IqLc7^Nf%M7B6$M:+Wr^_*8;+F9q>(5Sl&n@?D-fI(VgP)=4<`>B"\jt63-5GM7'%Ku@!u#nL,BD'S;WaCT?d_'CN%P"Z;gIn2F"7AcPFS[cbm8IQ3Q"GF286PS"4`13X7bU8pjDH5"/(s4</cWJ[m;T+/"n\AC!OVgad%_YI5)+El0MjVH;..=#J?V/\fFV7$M-,0fYFaAHnJBr$iBS)_N<AiY^gi7]_-,o@J/#tHsmEBZ7ni&Ob]9B+MNX\]Au>tC-bMW[s4%O*[D>H?d0#)2L`sC?(F)S=olg@pV\u3+C#s/JV"<on6k&9)6[sqk9NJleUNS3X:mK@OYCd<aQ3cU'bj^i$WKpnD'cVK-UWu#[?>3%Kqr-TjDWe&nU);+&32M"qMH"UXTlee64"g=:f6M>s5EmS1kACBJ@Ws(]Do,?<oeuV%Tj3L$Ha!E_D2kP0D]>N=-E3#h2iqU[7+<+%^K;F''&?;%8K19lC@Ap3+/Kk%[[-(0hLDN4V""J>[[JpK7bd*(XD]A`\35mGo<!HcE@96egU/@ZUTLIaC1d?b2kP#FPDnE;Y;*"&%PUK#6VnYj"0h<3n]@I2!%H1<1Bhd;agWC;Nrn4.@k'r(`mICJW?d\kIDVBucnQ8?:@Jb2![=NY[Od^Zeeri13QdaJA2jtV2Xc6r4%BO5N!2dtfccf\3p@f)]s$2IX?bq?+EWu]kF47Kf144%K:>uo&obn^'le^ecg#.JOYVcj&=1)3GG8]TRm-Y>9#,ZR:&(3q3<X$ls!%+i3gNDe]Br00-s#&c^%_M,iGZs.P.Ia*#rk'=JC,kKr'Z@7j.ojZ6UL>YG3'K=c(aMKpmfghBN)]3Iqu,V-kHG&"_PN$3+%\uQSL%hL/:tDN^g.Z"-1:"F4B7VT2Nc$B]^\ESQlO$9\su=0fmm:V[rk7G;Qm"%[coRmKsY`>aI)l?O8q=s5oDR-&);-$*4ACh-Zu8NsId%*jEg>P0?a'"E(@!#%ObU$^s-d[n(JI?Y=Pq)T)3t["eRiG)fDdJeY\WpdXi0V=0R0-XiKa+6GV$CO>W.UlZdg(eTX%.!6j&eQe!:%05tYiQT4-"TXhKAbeHd-;RD7]/&daL&W,md.uNCF[J%)Im7*U\KBm#F9N*B?pd(l2iNHD!*0*p6bQs53)oNo,X(9tmU%FDA_hO_X%NJuir,6$<+K>M8AM,BLIIlgZB9#qjNX:(h;+jl%'2j74)Ar;NpaaWTmptWBe]K;gaZmsphs%=S%d9(u2V%Jf:8a^&dH.G)=BD#>5%)^nUE/5sPR[[-Yq=E86CoccV!q,`?H\__hC^U'U;'X)*NZ_TM1LA=Tho;),p+.q;e8U/jeeek_&Cur>aOq-d@.iu/NNOF_hm5AG]%kAJ9S[4u$"%%BAYj`BfM1["FZ=,D8%RFU/a#@jb_@lQ$aoip13QUkUOqk4d19$Y?5[=PbS,6pqI)m+q@s)8d/S;2Sr1,2C#fr?ni%#'7LW,a6rRg?,U;<MI]iF_c72X?JegELY#,%_G>tojHTZnOGP6:!;_\3j[uAI929]8@tUqQ1](SLRL]e%_53i8KN60YquYADOJhX%&N%q^dGr=(HirUd)4a]s(sn-#Brt@brn,5nVmVk1.%9JJ0>r&j`[L6CC?$n?Q^K*ZNJM%^*S[o\c>?`og/Y#?8l3!_4A?9mQ$n.M%!h2CE5G8NW03S-)fr!gdE<j+Kh-j0Q4-?*bZ9[uqGNEhN<MGK2^jdi;0d2N\XBX?<1Hg3n=mU/(4O_Ri2f#PaSZ0:;V)?-(W/<N4%lLQjR1F?RNgW"QHIuUgd.OHF-Lp7Rf]>eeHNoXu=@n:p=\7LVX[iC^r11_r8?8nSjdb,Ot\TVmi]sFTtp&ZC9GPS:X[udN(jJ]U!%*luc?1#?*e).OCW?8WDem`AmO0#qe9QBoh?_f;G+Q8`Z)3'VB>:<eJbjIPA>h)J]'k>Gi&F4V,sX4F.6[4=3tB88YZYnofgHWQ*B%LphERd`c?&rhC@1.-%YB4NN_Hg@B+B3I-e<T%1`DBhI:^d-"C$\]eoe"$p)[1p4R+WRi&ZZ_m-Vo1:];FoHGP5?*AGH6u,WMq8fa%e%S>Ii!FVR\)gN0;^it,DR%ZFB%3!gRb&gsE#VOepYhoHc;B#2g=?GtXLk%e\[&r7F7+oL0rBJ1jXMu+3tahAZ*0:*G\gj8H@Asn%]9B#P2%cI4I\[)53&94No!r![Y<Wn.:B)#Z\8P2#hNq0>W@.M;'BFHqK[-tPoO8Z#*Iqj!8g-_gjZKCXpPJ';2RlIAB<HprYgM,_%OJ1rAV@*9dBXaG^e14=UL?eC,g=Brg;L84tb*dbHN(a&`l<FItL/Oa_MpL38$)?,nR^8aFI,_Kh`+`h9FeN_fUE8GnPY/,2M3H4g%.na"`lIhIuTI^#7T'T<`pLG`;FmHM9k8WXW>c'%J.gK;7juXX4BmoZc,gP=dE/PLG50"hZ3([1g7]C@AS+9/E+_$t]ZQQPT9_9Bj%:<"3>ToJP!qQJUA(Ah1U-/)M22Nhe`CTNN>CaL@L6KSG_cE(489/K,[o\%A^7J;q&1?+loFI.'GfZIcgHBQ,2Y=&u86IkYMrdL8W%&e!*^?ruYelN'XIOqNWT[>$q9aJA/O]4Y?e30Qst89$OL&<qtWA"]YWs%DjDr_?)4lpank;(Jm[Z(l"g5B>&:/2se^OYi1t>EmeV%POst,$74$6C*[6388:\t`GDTN')b^,=#g:Nmbu8LfPr,RJ=qc[F<jZ@r%X^[YpiVUf0rk*3*S+@dJ':WKjm*@PK:#J;IZM7<8eTM%[]hS(Q*U#Jni>"4M&(+1Cb2u.=_dtS7Uts>6cfkH:%WrjCm9!6fK[!eH8*n-.R@Q=MDSf$S6DQ\KIu0H@,+%1Nu5iZX1L,+_H1%$%:Smk$^63"U]`b)VbU<!8>UFqi-#J+=?Jq/rT^U^;3N,*0_3\stY#%]qgR>30;,s!e(\QJEgu0gnkC)4?&UFOUc$A.Fi<Lm*djmUY%5.0";'d)k'(-YY^gnZ=e:0\&CUT`*QldfYHF"U.Ok4iY%p(or]0*nfQPMU->I-:kECXB1TDq5Slkd_,43Vj,JoDjjbfZGuh5^TPM%B5tf7L.`C2ri1^.T39'I&)^Yi"D:S60>F'Kq0XB=<>Wd(`Q.0kXT.2*7gh2A?-b3U2L?&eBR;37X8fb;5],O&5iI2KoMTT_)1;h)%`V4&=f7?]-g_2<pL9^_Oqt%pC3E>j2Ggbj`X3k=l\,S!\r6u,nUrMS22?\tpKT:ZOI(Fh]]Q1HqHOCn2>^^[lAm5HVlN4mnMS;p.%>UF@E+GEJHqk-u>-N):(C!>^hcd3J@g>RG\;QR@!XPS?MaAm0$4+iPaHSf#YZ&;U1kI!['+k%9U\ogOsB50E%(IM'Fa$8M*"o.Qh%*rYJb3\R$WDj5;KSj)!li%(<=LQ2Y+?5\MS!kJPb&V=CY$@8"JD"T,;===H3<o7?X"tk_[d]r=KY1CD9.a";QYdU65'7_=L[P7tc%@@*sf.9qND&VBh.`5_k>k+Mfp&Qe5I?s#.-,LUciS+,0G!3+?Zro!7+Qd)T,OOl).35,?[:1g.Y"N6KXlE=8OclPJT[3,ags)1.B%!'X7qn3*3K"b)3l0[<30:e!'k^K,jBMM7n`e(M&(=&2q1_"q^HkeQO]<W/sW=\Enro;+ad)-C+QRY]'`p$McUlHJBHh?IC8o>-e9%g7aI)1\gF!X$8ph.\pp?%58$kAZsH'XN*i^51&rj8I=+8'"5eElLcO;*QGRYec1gKHMT;L9-%(3QT5roDm3QNk0nf]P5THLQsTKZ%f`H:;=CQI,nK2*S!13^0<;pf<V9@3"s,4;T^Usu@PL8=gFBQgcd;XtT!%Dg]hSaZ?hu)^(gWo)IC]:q4R#*0,.>hQ8`qB(>\GEWi%/@"3L4"BJ(c5)'/@qS&Vrp@P[f2BYk#4ip@Eol1"$s5d6q:oKtrV6d;"ASl:KjUKhB2k@;rX4rTP'ZNk=r?bm/`ZlBp'3YDhaV%s%YBiQD%./sCC/6sPLLTnl%X/MMiKJL;`l>sr$h]aj-`m19ShP6ri%*!A['MF[6V5L.W7/+P!ok7PkO:@pTH]G%3n)73)/qh'l]q&L%#N!ib`$e1q5R]:@jgXii[p8I?k^QE.af2oU*OghZ;'p"91]sEB]\U/Nj:/G[$BONGC&nl'a+PTYYCtbK\`eTY*W,pTN/#X>k^RiH%==@^gS.T4LQ?D<*dAm"U$2fr&ro0Ihr]_oGAN3ldqP2/GogbT9&L=;*LUPQaP-`i2IB@j']X'J&82I30\IqL7$UN8?E\S@j0-S_\%\/9oW9[fJiQC:=mhJt0mPH6k^^#;e"lpBN2=KglXKPbaHb.6^fGQCL]F?Sk;P=QWj:e_FEgH\'_HNc+U^\A8kl]kqhP`lU;2\8&"%klVlk5;L?Vo[/G_M;OQJ.um0g%sB+j)J>88N34upV;CRBhQe_og&#g3%nGq7_6,KgHoDuRJ2iWYK\l'Qn)XdB67fE_.Y/;&,1qKf%I`aMO7.AQ1r*T\QY2>`@Aco/ae21<!r&=Y6(D\^?\hn=ZR#Deg8tc(W+2HB5?pn0&dBim?AhohFcK.ZcO*R4[=("%E,c%2D0JS5K%*>e"rH8:TgG0^OhJ-@?d3"Re*?nMl`iT?SJ7]tl(<A@4Rj_V(2_E"'YJ^0TqYJXm3M0WX%JG[URNYj^T>CuJuM=eG,l'YB/$*K0;%;reuqDc&C*Uu]P'X$U_aK)>b\@^.?5LeO)$`Jp=Jp2G3`2F8TZgW5fd['S1qgSFqRCeTN,]%8-]Zq5EbBn`V@-5Nbu/[]OJCN<Q3%T5%.o,8DD[FVt38E5Ehb.Pd_APP(6B8U-%7+s,mc2;pCt&"AFK'beP]S&K=RMC14781fS)J`@<5gd7l%=`:PV_BX;P9m?`@FB]J]%F&?#YBu[f_TK(AVPXSmE.[V>4J9Cm`Iss"q1H\OBDb[VKMZ1isJ>167f;uGq!GO'YM=$5(K$bR[($D3a$#eZVWn1JK8#p?B@9s]#%&N#D4YP)?JKEq)d&ABZ.R4QTub!NZMDb(M]T?s\l%)[,e0(#56!heO#O@.oHiI=6od@_9'#UCslBnX/$*%/EgptKDo^Pm/:HqhXi%i&q(`hVS)p%IaEsk0m'E0PRT89'1XX'@Z&i=;<B$.#<_qN$7HoYXCsecacJ%J_7cHW/?PNISX(7Xa+"\OGk95ojfKo<0_#<@A>Fu%->_0Y"\%4N3k@pVNO=bgMJ0?!942V32Mni5pe[#k^#X`a<eOgSf(%p>'cp*c_WQ;Y[bM\B0XS]I$sB%*`A.j4-F>%2TIQYA2er>)%&Jh_t$/#H-28AJ`02PH/?&II<7jb&R2MR27$:A7$?LbDZ/>6gAot3,Dmt5=V1A(n$5@Y?]W)T:j^*WYB1%7)Ia&9paB4rNG,3UZ7%%Qbd-5-Xa,.prLnHJ8t^X]M.d0?1j1Jp7mM8Pe)l3m`U!btM(ae?;n$_`FO.@VI;'im5P6+G95k@.F?/3HXup36MBm?NghJ%,*39%QAKUT'#[8:"g=(iRj<ZP;#J7tc@@r^Kq#6R<p&:A#mt%jMA"G7Mf=7?CFoe)#qs-#XCn8LEM^WbnAg3m;4YO>BgtusB/Q->!BGT(%\V*JQ/F">qCS_sR8It$YN5_r78p'AMf6q@4XM238n:0sA;h<^G6-%$Qb)HAc.7"q@"TSt[R<b>0%FmjB6<SftTp#2*=%Dh=XOOAK%eftJa;\04UD2:V^hufIs<--8"!u&QX<EP[u*E<rZ[u!%XR[Ys<XCBbeJLuG'CA2<r.CPV+j.%ft;NN@hTj+UXq+2(18L+WH.<Hd7%PYnQCXHBUe5pl$FA7DDB;*A=J!l=\D_@Eg(E]dM*Y@V=?K4-V</1tAQ6hCM&J.d</^sp*ZQ<Fi%)kd?9&3VHNVOl:qGorUget5i&%'q-#:%"gU`A.`t<]ta>8TSl<u$"$L>dPAI5T1mhWV3hY9_hM>;m]A7rPp5uk:G@_<i0JZs*6]MHdRMj2PTZ[3C!6+_BD?Sp`XW6K%-\VsIUFUa#rOF1Uj&SlIMN-F/c%ag0f!`.mpQU(6o79qrhOe)oWG\aWVA[7TV'3Q"m4RS.q;>JE:O/dDKgbbiL07aJGb_.CJe3m]%)n"5*mbI)RI8\g8'S,1.A$FnjSdXSU\K>S=Y%Zqb)Rd;dE)6u_FsQBdHY"VA'SG#1*!`Y^8RPq-f\WJN@aEd%2RZh4m?"G.JZN#o%Dsu=lXLlqk7s5YuakH3cn5\);bnre>5Xua`FDF&XR2P6eZPN6Vd5C.AFr&e0!eKMOoRQCFLZ#?%#0bUO!;]%s7B@"#XO64P9[-d`%DhA%93^Sr4Acdbjque!_GSRau)%66?fEq+ci?j*rBi'"H*Z5S2_FN&G30[9*1Ohf1P;=pdr<BHm=8$4-oRn9Jbdu0b(8[-RB!@[A%0a$ZjX.tJSa##WPW`iA?8f03KTN(2KGh+#$/(O%nUZl>c(dIL*JPR"5:%RkTWp[!7N'`GY3KKl6\,7%>dpVmEYbi,EZsJ^Y<Gsbu%VPl@B@02D39Rb0%E&79pI8'i-$nJf<?OucTn>L9!P-H5h0OFqTC/'pJ^BCDedU&_KZ8?odA16>;(1@8eM"<c6M-_o(ma'H>Ri'_A%WOJsB2RJq\RBE;)l0`p$IHQ9?fW/rI.>A\1?ojsmY]TmCc-Mp'hHphRhTSRf/l:%ZHV=-99VF%ZnmS]*'?EuU')Yc4q_MS@(Vg)k%!b6i&?4#m8KDXqnB(2#ed8A6s3g6&Y!8fh=EsQ6j4%JL*7*dmXrIG3oHA_ro?u2bmf7S!t?@>jDgQDm\gtN7=pGKa(ri(!(=ut9A%1!IuQgRa(L0No$#&U%'^ef"kaf4)QH#F`FaC^68:hb^]#&h2fg%Kg!Fk;>SFku;2>Uc=MWe3^cHY:!gk*o[S9UZ^7,07gHbX=)JD%$sp09f:cY[W(t+V?Sg:;k6cMuV,8nY4GhtG.e2P@riV^%N1Qr:YF`qMYT>("$?MVWe'[A674l\Ijf]eLP0^drrV<eX@[UR]R#&YN%cSSpZ<9[jlr2SR0o4Lq7>oI9qK5rs<q:b&43ICo,--D`>STq<?b!0g`k]8.SR*M0oi01@Y"1e3sRO^m(*f</qc\',@rhM1C]"h&R%WR&N]c-'mr;[VD$G=pFZ^ZEe]gfltU$r6ueTR4q/X2@_g)\J#*!4,l.I!\Bu-i(koqQot1.X`\9Bb`Wl:<NaNq3sT1pH2hC!9IeV%rTekA5+V\=lbg<7(eXdt'\]8@)91X?2dAH"W?6%d:`72h]VY(12fi#=Z_rB6<U_5p06uuq'#4/'mOsU81P7u3$pT^QQ-\SOm[9pr%]nA(#q+-S'08@H&qqMht!jCoVZ[MZXnb;-$(Z2=3*RENUjU8DGB,\itAg3)rCNbq57$aH]5oA,9^c5'3&-q<TjZO_j_S[`B=DF3E%Pp/@F^[u*g)[c/T8YS)],C!t7o;2<:nO"UiMClZWe6h4U\O:02*]UbR^8.1rnJ_P!S%6@cEcM+6S<B666i:O#l'*]YIIWE?ReO]H%7DBjMQ6X)L;pH,&(18e8=R_?DTILF1eN^'(dH<cT3tjiL4]E?0H7;tl^qc<bV@H`&OUC/iPos!hs2p4<*jTFHiQp%9RRnB*!:RK9%'70bFMAJ#LD[HQQ2gYo_nPSp0jsl\/Lt"\)S4DVcnXi+@;uR)f59l0F9!@D<.E;7/2eTO=2co3j%p"D8al'JO@9>5\KuD`p0k`@j%Xuq0'Y@S>TY#VakqcElbS:lTb1gs2Onn5Qi7.^UiHbMc53:hZ5#XW^E.pY2T?]70TE-XbE^5JjA+3r7B-"A/C%OTLD$l%m(G:b8o%""3=cd0WT""QaT8!njuJ.o5@QFV.9!?WCioiT0"sGs9\[*>LUOX7[eg2)@hN?(1OY_$-HRJ/nFqNs]&OX`%-#k<3,G9&K0nk=V@-%o9X_g#Z?%#Run<!jH,5GX;8A`1ubsMcj'eWC*Quds!2o8mGeLI[XY37_Y&9GOt1re,Up=P+*+4:oEbh"SN3Va-h6PU!^",2AtP!h%c>cm;K>S/&i31>SZ'tu(h4-b;_c!,kL\W:*g3Nkj.CcB1Nr#_S+;;H::aAtHc9FssjX:V8Aa#u0pl=YtAQ0O2I6%N^q:5f(lS=R8%GeT8#rH\WfN!6'GVSB_-%]>$Sa$i!Db'H&Vi6tV_(HRoSYP`gHhW$*-Rn&82/3m3AATB=O_>+h`S]9->@*[B'b$b-o.Wp7WaJ=Rp%oBD12$,g?);n/ALr+*L1?4D]T:Gd(gm11!O:[ORf9o*bf]US@8:9R=8h[Zbd)?/+UB>O2BdK-fsfCc\gd4g*pSag)Z`VQ$$EV<i:%=J]_fepa8[X7Jrf1WTVIhE6=BrHJsrA`G<k/[U0+=_T_()8`)X@$OKtdAVc/ZV&Gs9&Wmdr%hTkF.%4g-Po`!cIIiY4ql'0O[#;L%mme"mg>spBJ%mM<Vll3jj#_N>dFD,N%mT.UMpkgdn#+LrTXT"q5Kc(Bl8H.!H3V,"Thm;6L?NEch.1D2Bbn+B4".pX71?28(?,t3%;#-FA4teCiar-;_YW@/.QFeW`8ll?>g^EIE%3dGMT9EJi:_ed\$_`5m!+Q%K$5aL;9KZ^='VnJ/50G'V8hUI'Q:)9q]hZsVO^\l2%>>7f@-3Hog0[:D2ilVfm9Z>[dk!g[`)pqUPjbt%713kn/WO4l$RV?`N2%tPq5[l1Hd4c-&eE"]F;(5ia.(SN@JqLtCT$*WFbF)*3%7N$W;7tj$)^1&/4AIKMo!@p+j;(8T@j]O\]6XjWs8C>SBaH9KB$nG]N&QQ/8*H%9u=j8X3R\\IVcILR3Pd[Mie#>;[b.8fW7Q%5,%KkjOs8;VrD;TZus[Ue?JR1t^96Zb_(m?3pR_3A:<ahd=23m+[JH3+We9jX:CYp#PI9X-Ca",,]O4A#FQd3hV:H)-;lIJ=H]n/k]\%H`=l`E;TI]!+oePThuY\c@'3Bj_9&-E*(lG/tbe[)^fHcoo8j-l`N;JI"lCH!gWZ'R\\(m-\OKG=9Vk]M6$qA)*.uSHiY]V5e(EJ%$90Sr@b_&Z5MqBm2jMHH2n8uO5.Nq-J9jH]j<-G;anZ+*W.]bpd;n:F2bNdAm.,kb=o5AK?Ibs=5VqD"QVP&<b.Wn,MHc_4I,PS#%0:h";FfF#F2N2<T9iZiI*[nD4e0?8uNC7AtG?[VN?JLi""TO5uJ3p@2<\H9NDLe9/@WpoU=-qOO+I[c(GS-nAf<FU'K["oMF3akj%(R"4eJL(qQDg\>XH*_<W7]dJ72HP?#f\U5.UDIuaaNtZB\4L=(iD;KjlsW*oY.=,L6anoKM+9=n;th*4DuDMc8a[gc\/ij<EZrCc%'$])&j@oXY3*?CXJ!4LWpWN)W>koo243&AsYdk9PW*OaBhgq\'A<b97`OSmq8`bkh!S`Ai`=W;pN1>N$%?V`Sar\IY5nik&aIEAW%7S^p:%eI6:!*Zc:n15:N?Z#`TLo/1>UBCcX$ud<E>cM%W8pg\a]Y[K=20u5*HfO\1C7H!^@hkutO.5_'?(_Pc1fn::_[9_$aA[dR%+GC!Nqq:5dBO)popG`+,=.-0T(jB_`'PIFsGS59n-3h_Qi_:p6`ptt"&fpoCPIkdTe\:4h^7eN!0`1d48rVC#(=d6n(Q+9TNB&]=%@k]R4moNROOK3Q:&nen3_$l&;`URL>R.dXXA^.)\Uuf9LB!O%c5Rmonl/?_N5p^OTWVrnd4+PALe+]P_`g5$f\TAYHS&"iJmoSeI%PK7AT:Ii3Kr-#&J?PhGHi=D<BXMEoc>U_K7BEkd!28_eIqa:TQNh(YQf4^=G2aF<n?J^#/6t]Ze0'IaJF6<iC5r'cF3Qc`P><dhe%?1/)AOIf;(CRt^^e3^H_ecmfJmaQoZIi<;8/_B>[X-Ws$F7lhL7+$D\;G=`B>4+oV[cQd#&:pnV$ZIlaCJ?Qh3VLZ"E_gWQ9o(^?%Hie,J=M;[cpD_KnbY'R;YqCfMLS9+ll=VZKW)!8HS!Cq=+CMq1icdR97ijI3M4PbPo$+q!5^G%OjJq=C-p\r\0rX6&iq,8:[$]#*%\;D'*fBb:9p$K$tnAda"NMZ+bA>T(CnS^1TIeXpp5&:,#I/8sM6",V0IJ6^uiC4a_/GKp_+kVJ9(2HfSi2<a_@/c`RAU\XT7-6o8%\/@Gac^8aJF*XR'T=CLM4$_2aT2`DOm&g3=.=XD6Q/MR\?&7SM09nh=imX8f@V#&Q4U(sFFd,utY3l[gAf`SB<+ls@1N-S*V:L@O%D<*93H;B!A)1V..Gp1BNXH'Ru^bJPJ0Ml*E\8LFjU@"2erD(0SJ%>-bk6#$>J9/+N,l<M'0O;:$MU0'P"+.+jnf-T$o9<$L7/*0n%7KF[u=,?EIW&U2CT7C:gcgb9:qC/%>V!-'sM=of>J=;>Uc.m5>#usP-L]-,T.aOeDQ$W.C,sFLFFNQbX3(Y/=.44gOb,;F]->:7%%$+%H:BR_3fG^KOMVL2OVmGraUH/j-P)J(Rgq)%:&`R!S*e^@I^r`llAj.^uoS;d_+jndoD<K'*qX,Vsc5B[(h6/?M:Mt:P\p<'L*%,?UJS0OV7W4OZ8=I$VO-hkGu",$Y33d)`D@6<502p;tW(e%M:I:>B-rh.N"%jE[H-]J4$?cKRoilQ2\,_>")8Q1pp$!6$'>kuh:l%qF/0NiD*_afU"q&F6ZXXbB[@tgD$D^,$Qn/&=1&E)DF_LQn&p.J;KYs5Jm0##<OY#Ar*]dN=2"H+d'A78jtt%;_Z9:AQT*cJf]$!%I%a]I,F`>]$gZT?O7R"p`<4JPP8SMC"+i1d4faKMo]bSBQ@4a=ClMCNo2JQ!iE+[T\:+V:O33ttGObSNC;UDrlNG+bZ,aXKGYT\1%dWEo[`VH*/X$Yj'*YP#U)csrJE1.,sHPQT;09GbVj"Ek#@Ndl6pl5q:<SkF)!]P'Us!`Gp/gf\oJ)j?^5D1hq0UWrTE2\Lu_!Jt@%]_#2Qnlfofc6Cn?@rC!DY!RVa\THg(8=Im109H+&83G'1ElGP8&M)I['DI7ZRC%?l2K-'$QA3SBqG@Pi9D&?I$a*]0>b5,A_48jJ%SBE"MJI?f0gS>[jEnCo,%*t+?=Ous6@HTDn8\@]C=*_9$pIuo"L@`uoL",k_eM1-C?+)cf+ps"H"94X!MpG73/W+-OpnSa/BFh;.%BHNQJi.!>.((0q\H\%GWX"[ZR$7]'.br'Z,/k!Cl]8CgcItN?+ee3mE#+s9OJ;"qg1@1jn/2FrcN\1UkF"r>#F/(Gh^@mb^PM&Ps%CbL']VMm/5hd=__!1YR:ghTtuX7#7W'(F(h9iPFV\Ml5>q%I:rTKPn\-cbhFjm_s;)8W_kG]:t(IDIlsK;*8A9&q@5ZSB@q#5@*m%>l<TA*%;bW3+o`pn47QW2gC9\gPb#<kA=0sj<PsV]m2bq"d;9b^\Gb(+qm3;.Sc%f5D5ktY:Y4"<N50ueB7r@ek9OkY$6VRqMs6.%-o%E#T8o4&D&&rK_b$Bq\9+X-/V*0Zfe&lLjfj$35M_JsO\F"EK1^W"$X)!FS3FScH6;gTi\YUH-tnIX#j^OKl4M84LtK2g!$g(N%`^ldiq<W])XSI?sa^)ZE1bo]95D&'\4'aN7@WYlYSdt7s$(i2;R<k&^Jqbe>im1CN?`joX<oj^mQ\4%cFhDWlR.R8s1odWPlRo1"%M`%`Y2iZFdScpX5Z,6#Bnm/J=j6m$Y3LJ6j35/LuW;90[9X>eYYlFl;cq.TXpXe3@4#;RQ`lae8cQk#Pq'%!]iB##$E)Yd5TH##d%jj2DpEI?;=A\%4S*)ZAaH4PIUfi\(al1[F^mKWp&o>:?9/2.@(]gC6/RA]8(7\l-I/m%Pp!&3X%]uU'!pNTYT>eL$$q6Tf?A\sPR%rt,DaqJu\Ua(lrlmU)U?D%56sJ9+_kES]/LLs(/?Nd<K6NYVtf0Toqm!ie7&qG)YAK%9.-ZL_8aG7"lBYLr)1,J@X(--7]@94Kt.%:.YW6Ku8nY+A:TFB>7]FQ!^=?Qg;1C1`2;Rd])!lT[XpIrM.FVEQ2&Sb4B8Z,)7OCPr;b7D%>j.?6L0n+2M&M'o=M1Z.<ujo21Eb%j`LT@9ATZ,_\4M@Zbe$8T,h9YS2gt6#)WWE(D(QQF_@Wmgq_?7"F>,gN;9shOCQ1Mq2:?#@X7-=Up<P']>EsJq%:sOqSo>S$u&u=%S2Dh5[j(>9j31I/c6?]uh>957'[-IO0?X5`rYDTD>cmkP?$mb4.5)bFb0,tn`X/t:J;:Yp\8YA.#H#g-&CHKp,!nkYN\WQM($):!%pg%YP!A!gqaLQ"<n=+?6KB3Km-Uj$q='j8Dqqo^$;@/l*R7M+$bEW*hEMq,iZh!;W/V$/X]('Q5e/+<&3o$^;_i+7Uj4TbuAfi&p%n5KVXU\EhlNU<Ooi'iCd#4L$0Z,glFQ+9A$X5SGj^:lT<h"=FB:mM,5imkpDG8Yt040HbFUShUB[os@Dl&4EsV)!Lb)gqhThb26n%F`XsilkTU,l/<mm^'G_!aIXc[PKKO?*5YVW&'VTZFF&$9-b]uU[51gYq^mrV]SG'l:+=Qo?KVlEfTB"60JDpcJfKN^H4--gk3]==%R+49?q<dJWhJgr8j<G9k+>6ncYl7+)@)+6j[)/A7Rg\=;;V6,\\rXlb7UP[\kinM7\3e0UpMAJD8UW`-!8![K38od;C#jU1JFsQE%%t;^O8SEk.Hd#L\e%d>u*W^?^Y$ZmF;`Du#DbeRe;]g]DUK@&\'77m\7=:g>^2RPAX(bq:6p`$R,/03$V;/2G^'k"5`Pe)G^pGkr%b^n&QP#$01jooe1Ns+rjq[k:j\-r@7]40_H-@0j!B'"U`q%G7!YihQW&\&%qEUENZgB/,gP`nb.5k[,8mIINiX=G"T!$_W&O7AX]%GP.JH"i!R#ki4Jc$EV]n=7Gdclj?UV$l-lJGu=<dm(StQP$))mjN:sd'd#HEQt2CG8ku#+@2ZEsUm+cb/e;1h6-*X7L#CtU,2YpC%F33.h6^X?-8+.tFlSDOik+4V=[ZDNVr^('@p;3EV"A0j;/a0AU2]=:i:mc*s:8$:;XjgS_6>"mOSHS7X,hg8U:bZ*#\^`k74s-Cp%_c%KHI'%o6hPfNRJ=TpME`L^?)E=1Pni.Ul-EGPTDrq:PX\M.IVm<n_=5iQ;ogZ^FC>qCBY.oa74+0?(!fC42XjUp2e>TtO4$@Y1%KdH+%oK-p;YL+RAm8l>k\<UruT&=2$T[VQ&\*&%:k][qnHDEOCJ#V2e&N9iic:R$HGGR6!MX*Bh%6BIj]3FYh_5PfnWd=SjVf[e+%ZHD!(6[;J@++D]cnEWk'/p>t>GVnJm1TSV/FUEAu?W#/6'B%q1k2H_kle@r[n4PTb=UK[SU[npqH9^Eu4,lt;O&elN$7FkOHc#ZZ%qqduED@iFciiI$qbJG36e7f@gD#Wu^f,s>3Oa$%]S-jS5$L85VmIQpa]]jQ2EN)Q*knNcaT%0%u]o^Y12#?i6EGr6hh2raubD^cf%\SpeVl>T\Pi;1T(XRTd2s-:>W(o]#0//PE%fVs@Q]JlA\4HXhnJkcseLKcjkAto&GG5;pDC-%?`S)\kNC#sK]WCH`SVj]9(QsQ[#%p[Y9V]1e0EDrR^"D5W_L@:\#)IbZLi$p&h,;=-3T7%GML=&%UBkd</+K.GbQgYMI[@Ad21[>UbcVblqS?V8h]k:rr/i1oH)])C/$%-?VD`Dpi^E:@G3Fl3)7pE9iIj6/=3H]KrIY^AIY[O+M8I&*JAU?Dg%8_f!*B_Wnsf^opW#mCM?,n+>oAlfYO#k1B"mD&'cNSO3:\%3S%mpE;F7t.7\N!Ia@XJ^!?M.Qbp&(knNcA\ukm`iW]N\em&_e<"jK04'GY7Mrn8H5J0BmVh'grF+'SK]s">>YUYF+=[>.#&-)$R%f]bBWf4^UOlLHEZ3b:E6Db]&%=BL#X*5bN=8uJ<u;*ZtUY1M\n#<L*_2alWj4G>j[pJukao"#1`[0LpP[Rso*aQpGGA89d*cjT%q%Z7-.LkYS"!q?&e?f%NlQdCE'>1jp$<O0j(3FJ#.u:>,6NAeT:oHbj2TITa\e0.kg*[6``OeEPB@lD>%PAN$?j;!?6n!cI^*^U0@2%1AU1;q0J`=^@&PWW;::;APh[6dCj,W=K`F_!#KafM^N(<W[D4irE28!S^=TgK5HW`h[<#@l'9PI`:[=dVC@dC^U@;ll.g>H^NKM)%Q+qdHg_c9Y16).LnP[-/6+o;6bs3D[2COW1YO]63a.Tg0fh*X[6b9,9X(PVaUeFU?@SQ,UT$,JmC&IV+pJT*NPb*0h94nc\9rUgk%B$pWt,)hB`X_Yaj.Gf@#0>/oU5?T)odkADG"WI2LfrYAcarc,1lnZEpPYQ_kTeW1h07A.^`G^)HgfB2>DuLQ@]/Nr<J+"\/W)MDs%A?n_A"D:+WrpbkM*F8:5XZreoDpM5X8@R+IE&50$\us?O8d-Bm]lCR8r/K;9bJTh29X0%p;k1_Q%3Zu2]$mMAbu<1F?%8Z`IeT8r%"-mb#%$YCQrqqD`VmO`$HtNi?j'*WLPtTY&IZX2rC*0R@m$]6m>Vjg7E;:Fjg(c0r5.H4=n%c-n%Qc<3Mf0%h[@mP&EePE;?jf,X%'=_0t4!+Q@g3M2?dW=J)3V*5poPok\*TSMpT#oe07n21G%p4'H(#\LJe8eJI@Q`=E89B#Mk+i@0*OAT??VI`2dm(A`PBrkf2X5WH%mdu<^%iKO_EQ.^\6)X6_i$HY#9NUIZe`kPp8Z,Qibdc,:<HsZg7>F-aDNhKght[%JlEiTL'DRRR1tk,:aa95d,s!'<SfTDQJmL3r%].9^^%=o\3/bD,a5!9d-HGk5/W`?%d(ASFESH<^Bp^V_I:4%_d6>O5+V%(J&//#iqTfmF/7,FTb.CLkYA$)A<AsEi->6B#/5)Bqm%[3"&%GC@\Nf"OGpU[,#)7Qk29*P2Vl!QQ`abE%R&c-cctKAJk5^:_><%mH8OrDuLBOXM``q!.N(T^cSir,kaHi>WIQJpq8fGY>3;%egV/kSsPUrGOMsG&5CJl$h(<pN>dB9Mihqlm"W98jUV3W0UEXD!Vj<lBn,Z.K9]OI64nRT>fBG8!g6Ec\&CTJ;7UiG.od1:/&s7B%b1&l(m7+i51T29&&[Q7u"Q_nOcdi@'&p1>6[D:BmW4CK.e/qjI`^h[=881nXN/l@QoF'+]a(l5#KiLBLi/@C=c*]FVdB?d&-eB6n%3SeB6NR-Q17u2We*m8jcW6??1Ic%]CR_RdWa=km^JipJ%6@`pmDb_k\o2gXfCYKHE"PCCBZTHr#fNfX9p$):#[*)SZ?ca!,3GVCa%:->qd-uVNJLr.8\;ng"'Vn9j*=;oTY'V&l+:Z]!k+?PZTY8082\)hG==6Rf]Z7:K7oa+`;S;Ke(m]*A$?E[&m6*`WZJ%^q0f+$G6%TEj<"'ALO-dUtNrp*A+#DDa8Y(;lqs4gl^1.:,A2LerK&H`)g[j>#2`I&CXWqI9(G\5944MZF\dR*'2)XHG:.10!d(`OE^^C0R7!%VHife(Qh.H-gsNlca<H"85%j]9G8[23FDoi'Rm:f9HOsNFfH9pY0Y>"l`PH]r3`ftbZ>hEj;o[M1766m-&@&-F%+FIfqQe6ktNP4%Pgg?RIu.&7"gN2pUN^fO)tHJZHQL7Cn3WY8r\_KMq.5H0W=/Yj#)ce..ni#NWkG4`34[C0$#"`7R*&UEU8J@cZ'L/$:eXnJUP]kC%<OGdPe<7__jnt.&lg:f%rO!/tn%6f#"ihFa6n*7hU+6t+Cm]=;^[GYWPk*hf[l]4s-ClPq]5*J,c**R%/!J9Xr!B[/@O4e+#M@DP%X-hr/E8(P.j`d*NV:lSQ^l3Meq`u]4h#Sq$QF)!:9J+Z#VO/4R&fHZX5!F\MNb](VQ-/gOZ%=K`o0[n+3=Eqp(ps-[m&O`3?9?p]%#.D7J:t'aMH`YAn)Y:Bi2R[RhnS[dW9Wl[s$>i1,I!b/2GP_AW7,)a73n;g2DA^2t/@hT$'TCV$NG1.hnMH&091]p7.k+j2&Zoo\%'2>Qo]nD4&,6LT]VlQPLO59#C4uqKJPXF6+1F+&VZq5^>L:4eWeTMrM"?#IhLUXjKpb5em^^W@\7*4EE$E5$LJBVNAP5D4#8-"21%SSmc^)ijALI<0*tEedA`QWK'H?n7hBZK0,0+7lr=V@URD?pQsgi<HAjb[[2555A!FqP91DD"+@?H3VPC]1^r+m1I#W8?CGb`*/6H%j!21a/9!#Xk_lhXYM2+LFJ3!u7M-9>=9>^j:X$'u[,3ed,j\)@"q%H%@N-KD$cRR]3-kBT#lrql)r?+.?XF+FCoHG9_Agr3MI2Ac%*,^CrK\ZZ7XDPo>*#;C4p*B;M[7_?(ZCkO8_DX+[UNd6@N`!GYc,kXo<(._TVDLE(9W:bNL=VSi'AqcW@8)T#OM3a3O`lmNL@I"T%PHqKI<O>see7t(FqdNbY_Xu(Rek8B2"*`\poSj6Dir.#*UXAH(SX[#A+GVtT2`+-F-NUGbJ6k)/DE#G"#7DQAWm8DGL"&\1Vh\ee%(>E>6<TirXeE8d+W#j^Ulcsn.WAth%iP"t5@.6=T)=tkNW82\5";\8K?8.G.a'0]@C1!B66?4WlhNM$gXI6"L@ZShRNnTWN!ZP]H%*5U<T"X5@ug6b#HPIH+LV;<HpI2u_\*Q"qCW+penC#nt]lVbT4LY?0%qoB\0ZZG%.ibGjbA%]ipA4/P'Cm'r8594W)s'1k'IN=8g%\%P0cMNE@rE<(j(*,Bc!m9B'@^l14#,[G,*#71HAp:$8Y^dVoYmCW)\oH`-#C]A:!M5D*$5]HF`BQo6bHUVnbL0J;9MI51.&GnEq%,?rd"$-Q/"*jf\J:u=a)D+bHU%rd&?Ia+Q=]*BEoS@NsY2ftk_DomXre.]-."F`Ee$\3(=AC9*i'XLSnm8#r[(\=Qf2sPAND4nZh%#6B/a`Y+<_OP:*]0GXu?hFA\"'O=@NF6D?lNq(7H1s'la'+hB"UOHgd0IXpneCsD#+8]B`Up%O(([gJV5nD.*J]VrV=rRNNG2,ST%?)[<F!3j.H/gW2=r5nqAls]dQQED!MfZ1^-5nS7u?<Z\]cbA"`ic&,=Z)%oSFeL'hH:O=G52&i.$fR6;TV;h5?8g*CluX3RNrDmO%(Fm"Z4?TG[__AG$!+,,Km\l#-BN:Kk/>0=W@8Ya_F=!=`JD"+f2Cr,6.V9Dq0U9%\MTsq"B+dj16]^HYjuPHU4U"IZ`lFD*#6QDn%I@O&jP5ZZES8;\\BbXKJ7kHkAW[5Q-ZCtam027rnK9L)jrr/,T/A2WED(I<tM&.8Sk.Zu6,B"k.l;t#iLj@ZgpBC\'fk+\dMV3h6%)sn'4B+f6jlM.J10EVu`'TSP#^',JW:T0.5&[?nO=]j<eEQK,%Mub@3"$RF%di\C'(@UW^_A3"JBuA0)VCRl>FnINR*:C`*d$\On%D.F(BQpYMX6&3/*rH%2H1[*&g"h2UI1XD^mB++.!6YDuVkAVLiLX&#7:6R9>Et4ad#+`Y[QlJ0Y$p&LAirD)]k4MREdfFLQbVSJ(%.,7!HFQOH_U-3+Z6`3,0Cn+qBd'L/TcbLK4!p+p@6HLY(gH$(N%W5qV?5r]<K[mQpakG=F`JIFgO^:;Nei%0_NVE3O*oiGr>L@.@%b@^@ARGVU3=MRB;7D6`S!\CkUplGYpSN1>4Hss)K@[lSMboCM`N&)P-_I+]=D5POnkie=(F7s.h;ik,4Wj=kC,uAGu'EkUfUVe5C%Q,Dt5iNo;ja[Fkmc.$j%:Yf,"];\RmDAO.SoZOr\@k$)*J(mHY-!;S,m;s%1/M.!39_NU#f@84XJY;(?#-@R."K"A7"anm95eU[F%BmarlbX\-XX*=2LI`-eVH6'#0(iE"qB:*5@<JmcCa(I>bdFu(mo_,QsHV>A>ZORrZ2T$fXWa5bSDECnZUiBkY?5=A=X'h;"p9HG4%-aq.W1OjOum;mHgWo47oo$!@3ZnbBNbH9&C$rA]6V=c&%!%HqanFG)^R_R@/eJ\-6o(ZhZmi"1B,*1&*-cVMk<&qT8YkIE;S>GS"%(h]^^"&,gsp8$?AL"EUF`Jh8m[N;4md<;@R3q/UM2@_dME_DBT[\Erp<O5A,'UQC>gsRHT:+IoT!%7oh0_;P:j'NS&HZadH_hiBc%EV;:W]-bgp_)ij.imZ<>4s45OQEJh+HEYIb)pj73Q.p;52KqWLI3.D_2s[ki9b-287Le)k&qbG4Je^;i/=2h$.o568S_17nRC?`l%XL9A><`u[eA&pLY8':IlD%jA1E0V\AaYZ:Y8*Uq(7-Vt3:A,Mia_`tQ+kpL]FBWtW/m%X$4-.8\.D']Mmc(0J5g$=;`<').EJ>lU%nr[?AgK"n('9q/:[$Y!NS\9i<e`h/p8T?(*C#@`d:1#P0&K19f[BT/blpPC0l,M-MVpm>86tG@A4q"i.HEg767X`kgh=0bq1nBG]%Ek9/;)VXls)4bT[eF0OFKZUdYa@P,=5B!$IN'WsU'#s44^!5UX5b#88::>@=,/;u*1f*#=XNum\0pWW86f]MahpLR6#4+;f3""7s%9Mbs':%./E=sMcn6d,>75:!/S08kReUC3CPA"'/#7bNAoH$.l4A^il:g9>p1cTJC+d;c%O_U\r[:i`,s9<(NX[Wb[]oR-#Q**WZo%]]LTIYbH2@^>JMnq/H*kN($irmsMWNhESGs5+MU$kX4ONm<(bGG!;G8$.T.>_]bG\pBn:MLXUYrW8[Qf?1[$^VkKpR^Vf3Ol+D3S%!]t?bS;ju\*$?>`Ql#<ahgtCXFF5fqD&jHbfl_pBP:sqD1Q^u[Od]>[)r$[%c9uQ?P1XX=hsI%B%u$+iPE;)LbYAAshVj0-1sY\N%fZ<b'K!TBU4bg9,2s[)e\!C]OV?&F=H"V-aRk@(!XZVufAtFgR>(lJ65PgdS#K_e5?9.^<kTsX2`[f(pNYsIeb3RLdl(f55*74Q_%bOB4cOLG683+g@\T(e-#m'-sj-t!YTq5tYFa*9gSs(tqoa/gF<odaXUhM+LOg3?gH*+;)G_h-2c9kcD=R`J$J3(-7$lgFj1;?=#>%AYd'>*Zu\m5)L@),IM`;))R+X0-_4Ifh62qq-peh.Un6oY5>SC7]QF=5a*h*rjb5"5YPLQ]'UXcpdUg]2n6+$dp@rhYSYn(;rJ/H%fKiHpTKQn4U.7Af*E(jTk2ihHE-oPUD5Y6fk?%)?$E&.S;-3N_;W2_m$3s@\1Q%7HoZr'eZm,o7mnYi5Hr;&Jf^=ag>'oW#?nYK3%$"m02f_jQX2?Lr2R/084He:%NV>;LUgMJRAZdDG)Loi6KPG8L>bASUp8+pC:\QOQJ9o^?jUH7[+Mu_\l>N9hY=Yfs&"dt4nQd8(q%RCdD#,HG:[,.qR#fhQfd45?ZAjPlk\b[7a#kCIe(49#T)_5D#UeF]!8a&d0"G]H;cC_NO^0+h!of1C.t3[]!R@)<E-8X,CoNpiTD%AGAc^!gZKG?Cm+=h&[$3cJZrpZq5um\lRRYe+bZ1<;Xogg!(_YDS[68$Equ<lkEd+rFM4Oj\ogEBp.:U0o"mkSH=PKR[-%c-G.)%%1+,O/G#=l'L><Hn$QF7]EK.;j6)X395'QY!r*biVehp*D4,Fo#>.lqF<]]'HO3`5;]'L;WH>>k(X2_h]Va-8B.X.D/<_r2m$`$SX%D0B]E2I`^.>G<tIn9WL5Ud"_@JdmNeoR'Y9<$rOS;cIOg.UJ9.8"l6mcJ2VF\^alfJ?1JtHB5"@j+*?,e=Nc(XW%(AqITXUnVo>+%`^l@GcBF]ho8pZ;KA@fNGE89^4&u!c8T)^"gr<"5G0Yi445?(>Hc4ItqFiQ)ZT-Q\TM+>Sa(KA[S'A:NQ7,nm2.2p;2NC\8hPI[X%rGhP_bM;B2q0L(em9Mti($XO<Rr6h;b]_Z]H@CAWKf`6lSR*q>rqg-taemOF$0nUY4gXDFEp<;=I,&0Mg[M$;cIm:XZ=n<[&!Ted%#KlTH+^8U.krJG12"EQXFF*g@KW[F62P"/,SRuNq!82I?E>J4oi=:uEV\a,M][oM^e![l3l@@Q0HF\._Z_N;sVUJJtB_Dt*9rEc0%p<CVSB@H+iT>S@-H"nRn:2g,R:IFN79t(GOnkS-aZK[<bb<omjD+1_#ZfsA6_0;k!3h("gMJ\\SVrqJK%\?Cm#6<jd+#KH^%tN]u%flVPP,o^LTpWfYbbGE[6YPVt]l(sH?G=E()9rF=NVq!HtB@H)W6ZlVa6*f`kA9&\5RnbW'cK%1'r>i[pDco=8T]U^.0+/H2AqHCC%6[,*53UA%Ufp3E+\iB>1Fa>I(=r09V=(c8RfV=Ylc*f)KQ)US('<g.E/F9W,H)2c7(hPqs,INAk/Q#pAG.FaM8Im+p\ta-fTAD2k%oF=cd8Ji+%nTJ!;.[*Nm&aAXF:G:3I60FWC8S!k.@`B5?D3;0%J'FP\4]h>No'NWk1R9^22YMpn??9bBa^m,fcIP(nc-Ibq(Z"I=%TSk\#fY5HZ2QjTs'2cEprjj2hLn`![GBS"l8nQ]18\&coS-([.$F/c<JRcAJDtT^&7H7d$(?ap$>KO)"8!Lg9db_ZYGnpinB/'C9%b%F6;'Bq'N/$S0^L3T<i!/Yf`B7Cr11(9-QES/N.K7o('j:GJ30_D:)A32_d+W7hY:XkgO.Q[NP6Q,:c^i[!R%MpU.:IDN#G8dK0%aO<t&S#;r2%Q:enFr-c>k+ck`XUkWSn9*Y!pNCM!;gBiG$,P;="X5?5fkls&CjiSs!OGP&27\9DRoh2UU6o%C_pb]tQF?fo5R=Hu%g<.8g[eV(#`n&7N6?a<1nqZsT887+u<tce[>&-=h$#8s'HV'ET-Z40`qJIh4h;kHGKABo@FlgFp2Xfg`M%&.?rT2\_775XoNu@u3%k!WqT/]Bg=<[0TYj`;?qA$tiaia#'N]dIgCMg.&d`&s/jb8jo&HhfT5)*G["R41%\iEeIu.J]8*GMMSm$o`(6g\p!oD/Qj>Z,Y03%GDF7e/-cZ,;kCu!Z$fR-61U1tm^V"t<4]:,hT/?qF4'("2r%QkpDVhG@9MK,BD8Ojn;tdY'"c*B)TLX7rP[FH;:d!.emUeJ[Wg6Q%%2mf;6<0G7#=tqErRK)/htB37(s]S;/A66q!&t3SXG'KHK21RCQo,lDpVN%_CP[1$)Q#5PCmEn\Z_A9$?-s0i87rf(mN'n'mX6m?%Z&Hg6Y`ZlR'f<Xj>)QO\0l:HSflPo)GqjEr+87sX7BFX%>@D8.8PEDUj1FdJ=2I@$]1G]eS\gkJ$W-KP=>4Z)(ugM(Yh_,_>D?Q8%*7>[YYa88?6C6=]%%dq;6Zha*gDni)j1"!:)Kak>O5J<%Qk<rh(>7NK_%bATdC<Zd)1p9G:@;T/Cn0CegfuPH>B'W.*rAU+nn_l#%>>)=Ndl0s7ZC]<]>a<i47C[5+Y<OJ\N%YLS3UOg8HCaZGPJ^[Tk+4WqkDG?SeDd$W;DC9^Q&:\.4N?&\8;bGN;55L.QSeH@h(9s,%HMMLi2bZtn0tHN9-J]kK8X0f&a:,52P42r<IeT7G:<I*i_No30hsuRB7LVAT\5)Q`Y>^2qhnqoqM.o'M0Y?I"PTi.gB8Hr<FC7\Y%0!lGN73B:6)2$_Z,HkNjR]udaFd):p`=RUH1/m2X3DCE`k&ro\870Rrs/(`)#-6#IRs-oJSXqb8n"EUV]O%Ma]l2#nRn#gI;jFDM%W^3Q)Rd0H1D5T=k;aM]NUSTC`J3Jf]R-BU`f<:MqX='UIQMQ&Ig4C17[;\9+9fD#m7]3V4\b0LnmO-ICEF)GqR2qb*i4$mDDD=5D%gH@c5VOLr8l?riU7YJ]>-0a#68iQpi"KAM`_AFRW5rj+]UK&sY_h1tS(p&]f;TkguJnANXoPS8d.;sF;as7!]qrZ#VZdPpMBStt\%D=Q([_jn?1m3uspACCl32/DKY(Y_?eInC*fPKcu+NT7r]Xr!:C>'Z(Qk1NkE\-gP@2Qra)`-n'MR9]I(eU,:'p8(=h(;2Zp+E*7?%^tCqK2UZs6!4t@$BWq<Ra5/<OG]+goF1j0k/`1?W@q8_hG-l:GQdESh5eHi$Q<jq%Apd4o:4,`VBV`tu[99iLUSdjSm7Na0ZTaV7%Ca0p91Dn=RSsdL.$$NJT;\A?DpgmNQ+Zi(HZYO.!Rit`9#ccHo?-q:ML7\1EC8)]W9-d05XRAifSOiIWIF!I"]3FH#=W).XBWQm8%B)[]9b8\1Y^kO^AU9no8Boc4Y[Ck*cjj^s+auC,TYPD,Y=a77HTn>);I9<9=pAu,8JX8F0ec_B%jhKPHbjp3)qh&Dh8MTq#'T3k2%gIN.;ZjrAoZ:bt+h&J]IM=)As`,)rTdT\Sf5Zjm(gWBPMZbLi&TQ^<nEWCq0W]O_lRceX+m#17u"fPiE6P"80*3@Nrm;o$DVV&%S%J>t%QaT:2<YqdTF4u_a=54T1dJAs":@jRTB8rV*9W&3)SesGrEFX,YdQh%+obPJ+hjjT,;*<&i"lPnLeE@E"'OZeJnPMr?cBI@f3%)t8$\PYWq>GPFi,9^bJ8fVNt=n#tO,;Ee)[!@$'Q^)A,:I:k&ff\ffF6bF?FhWoBI9Wj#])f!-7rR=3`-8t71g/drS5P(h8:6*k"%p\JU6;KJnrY4%+nhWneq'f,F"\%L>=@"uU(rJ]SB[I(YV[Q&R$Hi;/aL(KKJ^$bR"Oi_`rHi7n1QVf_Deh;C,lXrDgc20#8]@YC,%<kk2C!7A@/c[8"S-WIRif2$UZbhm0L_nCN]-dE.W"g+Y^h=Mr0j<MP,gZr01F%(k-Gn+esTD>U<>J>[2n6S>#=4c@Eo[`d5l(+8@%DY;c]5/%-[]\C3QcQ!:\r<(j@B>1'+SEShq?9e&"=e1N$SaQ1"hb]GQp!_^AYk,PWS&aI.>Q(@=8irrKM"gb6$T!Q-GO9^[TC+n&%CdMM_C&`PYbR[sZ1K&G3f2%[H[;i8)`d=k3][tK"JC9EnqqgXO]%69l-Qh>S5P*^i/ahZRj"2>;qtTm2HdKOXDu4>\rHnLe[tp#>%gMV5=T=H8/F5HZ+f?a@q^VaTY=e3lX\.<YaTD<rBp(Y?Gp\L<8lF4f^Hs7T=0Y<Ban!E:[\,%-+5!DVHg;_kd2Xg=njsiQSK\>g#%^Pub3eZF:@`mC=OqT8*#H`Q$V=_ZW[3JKZ)jh6+TB$T]qnFmH6YMUMo?EN\hZ^:Etn%F0*'Us<AmrknlG%[t"me,<t).(&-:N\lW%\Z<)[cBHq`IO8tngZi*0"$%]s!?53Ya*[d/%m"RGP]j^kcR:q/C.0lS3DX@m]iDW;]me`3Q+Po=V\35R\,,K5HB>ekc^Z4"2M8YC%p\L9sL@S+!T(i)L-c@JQH,"_)b]!1'Z,_%!f?_YH_D]U]me*o%_sDTNT6_il\,)M)f5>T3T=K!HaPsRTYFi@G&1o3<<>jXi&'_$Z%b#g<5T(p[F=,K.4N?_Qo';8^=MeT\kbn&[3dhXf]//l0$n(sS7QG%K7L:iUUQ7iA,B`_0><0@Z5CJPMXN%gUm`OC#E,+ct3gJ"//%Q't?3@$Ut_s%BkYK\Yfjp>Ic-LrBJ>ms8NYmWiPp1?C`M3I*f/eQ4q9J\-m]4h\nb-gc]LZ?n]L2a.*5,33^`gWeVn@Q\IUji8HE%h[R;j8mT-]Idc%`U@Hq9^)9Z5WfbKtICJM5G.XT$n)l.nF$4@D17sK?F+,FFgKop`YU?TK3BrS7WKZe0n$tHg&#98nhV@SAZjG?u%HWCo8o5r1;J#cneR,[caO;UIX'M"_W.'E0W;:X_&'ihr]qA+b3Gt;%ek<)C5n>[!(mLh<-F2*u*2L4rsVo4;;hPeSFU+7e0/rnnj%]]O>?OuP*C^GNE)Q(PTRPKO`I"6Bk\I#jqupj9&;X9fnaJ)?ds4'BYNi`E:<X%#?mXE^Q,O78#+eG\#\8S0;<GH5#_n9hV/fkB[C%1*2O@6btUm<^MZ*kmq0[!4P)Ml62KJH39ZG'0'o]C:P,0l`!9)T+CZa'jHCSKG\VZ.RR.A%nVQJKZ=*1B?imq&&mH'Ht;=l#?&ru%Uf_&?H1:1k,6)r?\LQ+g+'4"m/:5[=:2Yi`[u98b)C\U4$<6N#7_:.\l@Tn%ncm6&pR:^)l?0]/Sj%5*9;>gHL6FEo%*$%2.e5P/%1#:P;84@j>+fOEsi/*7$C^h(jG!9NamuG6jX<cP]4ieM8,-e'WI0C>.cb\4T!.@:SD7]ZL&+U!d#=.@&kS&;`G4rapI4l&po0*,=%cSSo/^q2lV)PgseEe0i6.(T4q!B`A9']%/(\L:,eHt>P(!fAB3S^bENJh%o].:$d3p#K`d<8$6MeZ8/tJQrm5i)CM,$9jB(.Nrt(%_1\X6?&LWZpm&\"qsSD?p.YNgkq?`FQB%FGTjLOpZZtI-0K3EFBb2p`3&_OtD*0t[?)+SIfYR.eNSG3to#(\UQgHL88io=<b4st1%R4Oo5e-kA"8Q*d.mB-Rj^A!#0\j%?@;G,!J*i?r(eTdVbCd\BTE>Yno!LA`c0@']D)'PT`Md@,2DaQ2O`JTWC\a:"iq<<S^9]sZ3%U%.XATeIDF>7\ae&KZPHe1p&g(>=EPR*V2kF.L;YTKK`EThg3&bEG"WI(FcP8'@L'pj-69'Curk+CZ0UpGia-5)3"D$IbOG-Q]\_%Y&?b]+2175n"(D[a-_q3n4,*g"tKA.2)po94I0VXk<_m8AEd\BDF3:&nj!dHnns%)E]+%q/:%LaSR(;$bJcK)3otLfFfd052#$[#%]FT)?YqlNIJe&;-aNY)<,m$u@qd1I0JmgY%?L[W1#tlN6E*pQte1o[8Y4Y1AE.Y8"5F+1?UNR@?^7@N=l;sL(+DXeo2md"bJL,:h%i+9a6&nb<KJ)7#/FFu;5'"s0-.K@7++!(!$8"er4OWl*ZJhcCW5XtPY+B8Y+k"82$H/[/rEH-"Uj65EJJg]VT/ob5KI>eP$@&ko;%8/O^"=\\eOjBSG&Q2u,kQs&Y<SMpl;pZi_)P+X5!^7p_0Y/91ggYrM*nMOh1(qXUkBm_.IV/md6Xpda?+ZiMg<JZFU)VF@BQ'kOJ%+!pkXoG#"Oi)0XHiRWT_pKPDJVF[kpJT^h5>S'LA4`b2,i4FSZ=4#+$dq%#sgFN-M,!j00S/)63Io/J<eVWa>i;t&nbTP5X(uM]f%JGKjK(a/Ic.&\;;imZbf?[Oaq$G]5naXf,F;1:]pCl^ETQl,i#K>32C$YYbiakrP^G=6+^9a6L_]p_rMiI^@gjOB<*J5,I7+JMB1%i(9L5moAN3d5?ta`&A_C6LbB%@4l2k;fD]sp(afL[&SQAK:(\V.(4:J<hCnRHo[H#5'0qNl<(kl'd(?XHC+t`2P>@&a+m'9BESo5%`b);H0#Jq_0AA5g?I?I:1(i(jf.mpp0CT6^LnI6>2Ljc[MBqDV?Yf@udS#].TNf;*`D^52KT3=.M"chAL.m3Q>PRFF%Zp`nYVITi%nH")!4_E]loiNI@Z_g;,%'D7CpqS-.@j9dRf8VsER=ZQ+d0p#`q/o!]l^@L_!>$dE(N7@ND+/^=m>j/FJ8_.7"@9?S:;^IsO&$pQ%LEORE*<se-fEMTR4n"P`^(40,E@%EJI1T_$2<_,Zo<h<Fa^1,`[fE*%+LuMO$0,%\;@UJQ8)VIRQfLe,&0q`h;CYqN2kACN5>R>Q%&dZ6V$\I<[>o4NPKADtL2'<U91o(3jMlG-'pl_YBgO8mG4>V+CT>H!>eP1(t2_C*dD"3n7W-j>_:X*CH+:NM=%\I5Po-lf1gPY`n%90S3QbWue&[``^aOZ^)40T:8C<R##c=P2!A/l2<97KgLXhph`)C5ok6-2\*ORc>N+j@q06AY36Je/EV!(%8WLQ*T%/)HeT#r4?]S%jS&+.HpeAmB:knrU_b!=Vb@);@/^e0&S#EX[ju`EXZ9Hk/s?>2hE*dnop*F4/WR`-O2@hIi3qm-U:fFjG#nEFf.0<*cj^,N9aq?!%i5lVq;Utp/f<c@JKXHp:[2B]F!#Kf)q7CcANcr'4[GEAZU7"[L:k?ND>uP28\SONF6ha>J=fJ&.;@8fNoA-rV:ld".lq-??+;J/1%6ne#gHiL*K^Kg`.m($:,&d:\LeTr(<ZQG!Y<tmgiJQ;]U"pMImqT>De\^lk+>BpBq(EK.KcSuV>K\XWbOi7`=!(dmM7fcgjjZ3I2%4U=+D4TSpY&6M/gS4Mt"Q"+FqPZmMMlkfmV5R1`U1d3c3_L+nfI"7'75DRCDhUuW>CZ`1fc773`NUm=_[r08t$L(6A\1]1_`LA<,%kcD-M=:J(DK>euP"P.dZ]LaEM>i*ABb4T2o,r5JK,;!nULESuo^.J'$$ENio1'r7PU\1fXa@eQ(MXGQc/g;p!rZal+RrohJoKnH:%U&I-;9@\Sl)!Ucsl-h>D!2)mf/*@\e:I8a`$@I8\8:0?YnI$Y[)8FWU5(1FlhTUiON/&r]nEsbt3<&Ylq<LL[6(p#e<W<$>e\<3:%qVRefOeUKIbaDuT2#%`p>u,_(=r;[IB$R%oj+nE71jq;%c8gI=48aS/jnW:Ij_$)Vg)2?H9D*Td<osYY+n%fP'8_,_j<YHN\QfPe%OZTG?3*6B"oj[_Q<?9\ODmR.J-hW]KU1?ebq:Jjdmf!6rbn\<ZcWn2bkEILl4T\%oT4(f/SSl&kQ]G]ZLq7,i:=7lb8'qLKQt2EN%kP4]F/G-d''+ZWOeEdN.KpU!V$c0g47D=mfk*!-YLG1Z:No!ijf4PH(N"p3"U"-W_e([P6DJ8#1q;4.S=MY8l*aQVZpBj1biR-`r%oo@u*0&Wpl.o]n\@+;+C0&L?*F+n3bYHGY`S:V)K0pGIrCng])5)IjR,3r6u.(ti/.peF2lk>D`_d.:._a>UUbH"6?F#A6"f"C3P%Pjjb@d[bha446VQdSgNGb58LZL29lub70:SWc0V!qP]`WTgQ"B/JY)[KV!i9B2V#:oKm4`6MfcQ0N%>JIa:Xj9gV^@h1MPV1`Y1i%2'3sk.bT$2;cM.++Q+9%1t?2+'O'%&$HelhW7S%n$rV/B]P`u98/$m/\lB7i>68TT\5ZYV0NOO3m,J_+]qqAmTY[fTr;)5cK(Un:%7LnH?$2^M-W&gBh!3,acY/=^%M!$Sl]C3)u*TsS`PN6_H?qE2_E'G'>diPPf%KJWI7eGV!gq,qdUPMoqQVEeRGGgjidW_Fj.!,g&%#IKqeif!gWE&-9K)Ea&@NAXaKY7GZ&qop7W33bWo^C=\4=a;Urn>G-j4d*L?jDC\Ai![qicYO%[oUc+6S^l+8EGGAX0ruY*aYgd?%6UR:HZ^+#<^(>g#nD[5sTf)6mKQ`"qT"Gq'rea<;^p=a&I\`!\6Q#+5!<=).OsFYfk$eNc(as()@Km*609i=M:i<_7XJra^^@RAF%QoWQO)9hV9^1((ELPlTR^U3"T$aEUu(E1^t:npLn<+P*EP+fLNL'r^Y.ea=qnUP;5[n`is3W:kUHf'c0ms5X[+%hnCE]qe16q36<%0Kp49$Dmo=*sS+TPmb:3JUg%h)NoOcJ&-^ud<5N@4"4UV[0d=d$0?o?9S7OG*(qNNBP*OghP@)P^B)Z"2e[6D](d47H5Yti/&+25%BW\o_`"`<sFo2YP#LH"3F)HaXnGY"Z0NU;,Y+3R1S_(^@BCZgb3(Kg^Oh?HjYAs`=["M5',`(BWU&biSSX`c;r@2aNM:Lrn*?F7e%X3tn9gooD5Ek%H+*9U?f;#F0AU&jfZfIFrb7UG*L&n5-g-3MM"jY[]\:GXX\TQ)stcPH`'MmUl1TGR(7q!$P=b9FVJYs<N0U:_I:%h807@'63+7M&TFRHbctHZ:tD0-/K&RMU8fGr_ATnD.f=`pCs-cDj-Q,P+Yl/lGcZf7Pb)K$!mbC09H6OhMELs\:(4:iO_L2E(ED#%oZAiYm5"\J6%\^Vn!r/^ns0GI!jj+][:cGM;m]7q?[$iA@Um$oCraoc-)_).q4p_T2(P)Hn7b/?!2.%!`kOYB21U56H9h(2G=D:Y%45upG6;G2,B9-JS%@8r8r-!f,f`qbP_F3e7<4"XcEVnN"7*oRVFdoN#T\n_b(W?:c-5\Q>@@&3jR&*3.)1k]DTEPq90qDuN*QdB%%9m$_N0;a=$'UAe7gC4:&K9XO$5\j^7Jrr=:O-Sh74K:;3Wd58l;@hV%dF)9E+kI+Si\@c:7I3PcLYEM2BMUgQKF&^SD8f"]1Pj7b%)^))-LI"HOLO6L=0O*KY*<]5j@'*L7/Xj?UDEYj&aMh6r!(JJ]'THpq&r_f;1g1kU)O]9FWL0n27r2jLZe8aQ(cQbRJJ=*f:j2Y4%K*-/kJGYsGiqP<MZd_LQZ1k7]XF9<-g:.sd@I6E(eWsZmlGM>25,o&&kA;9k54h]h,a1.sCENDO[MZL'*7hQB<*Spip!-O;:MJQH%r,!CImK%0[></GVcQ1Aea0MNdgAfq/D)D.9jK=l@"56F)@3]*T7&q=-@(]*g<hYb:IjeX"7&uDuq1ms0!BF>;jd=;;eae32Nf:jb%2j(\:foXuSEk'r`8Xj(h(U-6->NEOgZY&Y:00!Vmr^VNhn96)<Um\$BM8d8s(jt'(41ri6fA'N!oEJftZO)#ADPSDVb+ldf1nXGo%5L)*5oQ]'%X-]Ak-`Z#<X(Rr/J.pH:%7$m'mTjr9Sm;T_/:db]Ill3kru0fm#2cR(P_dH66&A]p3e+r3$h3*[4SmeMF^@+9hC.Ou%2SXC1@UY.k)(3>A_CQF5S5]&.)NTJ?d;Xu?Bd\/@-7Bcp@)Ih'2!%CW_b>Z=JHp:a9sR@R^d1mm3(;5f'pApD.0`V&MM779&jE#,%d:eC<:K[+>#48@"30p:Y4#S'g&hJ8C%jr!H,cV$(#hf:Z1nB5[QuJQ!!#SfuSs&q[R4*I&J7hI/%PS-(7fg7k$kdP>3/S2%F:u!V%)#uf77F+j_.&>hC)2:SA=:/G)7q:L+)l8fITNs)aN^XUYU/iIh!?ao^0_<C7(^_Mrln/T`"3m!Z)KD(_84=Cu.iFAe7,UWtJY1:'%6AZ/LicIe-Q\_o&#](ssCF-hK+t"L4MPV0^KSh'i'fhIcnmW;+&097m`KMi-0e#Am<.[tA+.2)%.MYnE(d:MH/>KEMH4kiI8A'Q/%aj4E&n-hKPYUL>P8V5'9:Y6B@T3)q<6DJ^G3#SQ$X`uf8LefBHklIGHS=B`Wi;[BSc]RR-Jn5C-"ofVd;n,jgB?H9)M(2R,1J4he%^tl?pF3aqFqF\P[XrO/cLDW,tf#(^+n%3LdgkW8kT)\'D>'ML^rRU#"AJ*s+LbGUu_CT%tCYQ3o-P+`k$\YGCZb2MXG%F"<Nh'e.%d`ULIpR1apmciWt3Y(7s1778"Ib)4SGI3rcN:[$1C5;;Kj8JV?]T6)NPkLV;H=,B.4S.6m00A@KO,a!crqh2Y>PS6oIe&s#qgRJ$%^T7:U[,"H'(X;h\?HQAR/2*h0mB`.bb4IK,/2+W%[e8&@<68(?2L6J)q5*GahN(Lj2q>Th6t7+I[/DP:2qMQ^.d]Lc;bQt`N4Nr>%GHDQD`TMRsFnM?_LM-+I5B1$'o54db"`9^>.pTiI@2,=IB/BGJr<@)QG?O5[g$^<Uh0WuKIka)C[i]o\8"nW!^j48Co?1E(5&Ra\%IqJt%pQm_UiB#]-mef3RMCC\/[J,o4Ru,XL8)mOKUXJe>F?]DWs.)/P?Mf6GJuVU+N`^aEB5&O([-.Af4ET`DR+Ta^.DJaJl1rcY%XOX\X2t^'\c106V0Voj$WgAn;r6ed;DR]<j4B2lTf@JAip/7L=4AC!NgMrI92L8P$\!lFKBYID5g#][-q\a+uh"R7ug\H*knP]:b%F>gJ.hJK$_n]S::9e0#]h##Gjmf0V#mS0[WR%i'UZZt3&cmF,(m:l$!b'O,XZ3H)#J(Mf:fuqG'Hu`?%Pd/ZaH=)FV>Zi!5S^XLm%FM%,a[p,=X?"^tKoohK/r#WgODbte0*\WS@ekaCJTJPr2*8[Z<e"_82c1ft'VnT'u^[q?P]XrB&OfG=*]MmKCU<GL.T=J(Zm_/"n%a7o.'UQ4*XZ_6s)r!^d)mDe/@H$B4/hksYHGdaOKSN4%S?KQm@]6dF_csF8U6HdEsXhfU:.A^&nHq@1McP"d=4\]Dhg3FM.G7k!E%l!2^k6!r'bSp;F+mOIP9g@k$3hD7A1n%b8FI<!!.1GW3bgA^3*C8P.'-h*ZiR%Ed4T'EGjMrm0X^EC5\7Ph$iQc#0LF5`rt4IYa<%BR6L.V=)<<=$)H"QhKja6bDlkXdAUM7<?)=_8T>p(<rCnmFcBtM\,!@V($8WVe82]_7O"$%fSnd7nc]R)pdf^Vu*Y>m$[&-p@6qO%gYfWTRtsf6D?AmXH"@?MVZ#r"1>c/:L:?c#K`U?*4uHt2YJ_f7ie#bD7C%4gmmce&mI;q#db`.p>C8&aB;n3Z>kb`VY;GFU]8j'o%4]P8#IbsM+HZMcoD/T*-4a8%2*KZc[]oD0d^V6AcVU#?=B@0AoNW$Ls:7l"Zc=q/T`ae9+]M,YYhj\3Ao8$;"gV"Ek8PbEE^&f,2%XZY-U.kn$_hVUu]1MGh@oY#.Seh6>h5P:W+it"(5q(pXkKf4;(^8RRW05]=]qk+JR^:2WVfdlOY,Jk;R]7*eQUjAtMq^c8M;-(-f%f(TbfeMTZ2Bsq+9cL`l<BDRkTcM-r*/JP!"FWDW(:TaWj_'<9J(LN&Es2gd6I]ns0o;TCc\h6[_>`VoiH1/P:GtS'\J%rj^?f/bi%H!@t#kC2Q+C.5in";iO"1.:An(UUf@^j#fC9E6D'[/Xn[2sj90TfI3LNssZd$i`sAG5=;NSo:BJr+2%/&P*l*Icl=1$QT0%E^]b?%H7A;rDDTl(2@.gF4a,aVnVsOb*"f%5KiRjuM+n,rQm,*#L/RV+k8Ac<[7odt5H&YQUurdns)J=UmtJ,DZ`LV$jQhZRQY!g2X*TPc%o!Pb;$6'dRk,I,"pO=OOV7ajpk+OrU?uJupKi],5<Z(;96*l"4^pdI3C0Dp$[>`\cm*lfmpbpi-`%9)!SSd>.YPIK3@qKr^LD7u'%0'+`W^.hs44TcYEqs"bKhP75g*PRd4K!J]D+5[9&+(k>Jac3?m>4khL255?WLsl0kqC>b%Yi+KI5E@nc2L5\5g>H#<=>SMqm?Gho%HF2/l'`.Y:k.I;Y0fZ>nff`Kb>(OaY3d7eGkValeoHVJflW0[bXeQDmp!c*QW_(cnnn_62n_'.e>sX^<ebRW#6K(S$66jYM@RF:-%#KlNuq$_.R<E!s`*^A2$.-#$8I,iOXCS;0OjRH?Qm(2RWN!lq"M"7,=IUS3<<O4sg&uCpVqnfV=(QF_.9'N2e8c//9VE[Oq-(hPk%j[t$So&u<O=ed/l[Ud!^V]q,;_eDPP4`Ym:)56]c[en(9R=;FcUgE7(LhR;E=l@*rUUK/uRIW0@a"M"qa3)k93JXo=XC>n3WqY?I%PkXE8M=NFpqIoRjD,@RTjPOacD!PMV9R#Q9.%T\oAZ)I&[UrM)j*!VW`=*[@&,'DB/Qnrm,J932HcCnVfiQfk796_gFD0CC4J]Zj%mU$=1[O?"i6apop9!nFIF./(#K&f9r)TTDt0#]TQ7XMR*a&8]nmA]cpE8?a]bFOct614hS-#L=/Ih0NcAo3nMh>BK_1WSsbIB_bE%Z[0S630psafqsUheKc)DCXP`,VHB^E.Bdo8kO:UFd7(*]C:2+LRNsF]-C[C;8a!i+Y)htJ/H3DKb&R;V`mUl%dr.dAoo,&WmqpfA%X.FL#0:S8/oaJR@B;QakKt[V[ja0TeSX;UeL?n#`R<'U_M1Y[*;V(C"Th0<olR@6V;&X?o40YljQVr5:<c:12MlHB?""K<ZVtd-R%j@e**_jZXP%/15?8V3pe)6qL1o`!doQdpoeqYjV><L;87XL\qn]dtnQl9?1a=2j*\7Jl^KqU5(Ym:Vi>DdAdWat^r?p0^g%O/=2V%B\$CW^R%.ZE9@si=;4_#l*`WfddA")m'chH?QF#P:!Xc-I*58:q`Du"XekJAI5elukr+at;^Ko5%YnceG@"88Kf2Op>?SLj*i.J=%?fldSMef9(du+E:V5ngh*m?O:/.ONT^F"V8kV*%DK'2VE3=X\G_p.&amAF9]0N4p!AF>jdUN&>ds&krT]70_5Wc5q/hD9Dg@gsGT%9_$5,S81r3./h8V)3uTuC%C(b81%]@8Y['G<p<[](f(F)\+D^SR_>W1?[@d?dA0tBSM0D+&ScBn=7P`6e_@<][eVZ859A+>QB%is%q&n7-V;L7O$#Src<C^`V9Y4p=hj?4C/XgV*#r)=;Rj@1DOAoFbhFj7/GZL3%7-P:E,n=jc`e1b'lasSFfZW*TmWHa')U6!;W1u@f%6E@\1=dqhKNQb3HX_bXq8OHNg[q_M./YbNI1V8]:P$2D6Z98/YAOADc87!o/gdU0OKn>HMV6o4;pfRNGKN27t8[&n_dui&#oJ>)h%p!TEpo9<Jun&"`[Fk1aM0[5JOI>Os9Ma0'Jo6\f0s$%>6\,VNhch/C2.@kXqhr)/V39Gs>EGA-a.tJ<Ks"C`\9\o?Hn\@k($e,(>%hN@VEk>eV&7B)(!%OPKO#$q@/.[m?lFnElmN.T`)DcP!qY5k<79&>)B!iYr6:04*7*3r_hmFpuM8!BH'nRar8P%rV:htD$&>Pdi]%pC'30\<cPSe-1\o+3N>5VQl.hE1_HQVq"DJ)m178ojhHlrT82aG]MTQGKbU":%_Cj'c[QFegNEk4bFbiK7i;>ZVu5M1(Ibi\iu##%2/+(Qg[FjL@I&8#]enD"(CnO;VV^^NP2_6@Y?[if8=XVYJ$'mb?+;66i[r<#Q\8ZHSl@Z7ntA?Z<)LZ389Hh%NBG,K0&#'jqjP+8%7@C>UCC?g]A1/)MYp,e&[c7XIVH#oXA\)04/BBqtk4u0Eg[:TC/<`$HD'')G/6h:ZZ4@)Y;m5AL,@j=ghX>nYIoE7Djr9hk:r`0B%^&.WqHR\c`\9#+9oK(;E'K:BHqJ")7-d>uZCW-[W<NL@iYG+,r+QtlSXN0,03suX"f)*/Rbq\^$QKp^0Yk?*f,G4BcP[BL*D98h+%[(1XRJq7#</UgQSKRP=dJ(gGU`@3%K$:0DU;d-bu6.!m5F&QAXX&WJ+;)X0-M'q`h7="XtF'G('C2$]qh`!6CWfYF<LY@kFa2ct^%,#:D5U]MG!3?P;oH;CDP$MX#,In\hpFh8f$LhL^.Ml6FCr^W4I@PO_%:ftB,mWe2do2BKo`8Dbg104qHnX84aaN<qo?#%r$ZLrZp%A[?SYO&USA_]rOO]/bR[BUdu'Go,64;<:UqEYchS>$`*0fAVmbI/8-F:Uh^i\^C<6Mlq]gU/d04>CYa/iWOM@f.S/PA+hl0hHRPj%)Y.',]V_aCe*>+AK3-Nf3GSI1EdA-X)VXGM)n"X>lL1X;c+h58^A>IC<qgFf2RpHW[C>e+f]h;ho?;P'0,sXmEV\44ff4f-fZ7he%WV\Z'2rTM\b40A&.O@DO<tsnIjV-(hoL.&3+bFPL_]"I>S+"k`DI10Wf9Xf^_W&0IMd1>_*Y0#E9"raLChO[m,tgKRg)-PT],0R7%<#s-:>(iX2?-!#&C#[MAe,@kZN#_8Va'X\^'aLSW(F`EIbq*:h-\*&%;BO`TP%:W3M"g1]l>bF+1jg>76Kh$3QmhF2HD#)b_+!$T%?GKMoaUuoAEVY`',A[,):6FMpWIIi1qtWUIZL;LW%@g&6%W\,Y")%BjSTg4N-RdEtl/Zeq;i"n8r(D>0CDG4]eLaEBG1:34V_#<`%P8fFoN)KsW+Hj_q>Kt=Rgm:fP88csq3kB8G3gcMe!g(LpYD@9T(pC4mZeP]L,$"%=;SuQYBT8*<:j<F>l]_=Vs!14)W$XX'I0330%;EF9qSKfV?njqeNB%&88ZoZYP^@o*R11`Re:nhXX18bB=g9aOZLTWZf11n@\Nf5(8M/<e(\;cE^%NV,qJ*C]$6;epFkjf0Oej.G_%]NlP,-$%>Eo&<<[#RJ)9/5tWDjEOh^*T8Jk]CS.O(0d9a$6$)9;#9[+R%eY$XcmJQa"RZ-nI5&hIP>E#[:cj&+3`sgQF.uOU2R$s%;gZ(b5K-3es6Qe;QG-/_%bim1P7PN[m&%Ec:$rMU^&06Ue?L#qIEF7ah:;;Hrh"N@:$`"o9A47TlA'7VE8dab]%sBngo'%TK4>3T%daKKN/U@6-T\5%odb%Ss,Y<l6k-Ta7IW]Sl/$[U9S"sFFlX:f4b)q;3goPkA52,nC?">dK6][k.:J'`ZG=>qIC'*5CK\CEIBppE,%+JOo&4WSt6c9/iLV'4.LeW(!_mE.oegT;t6*,/GcLTI[oU%7Tb=H7*9Oh)nS)Od5hD)#@l4k2]J$Z`l)a&P28!\a%>MV[lFXGl%4%>.n+qn/U%R/'2I$&@DIKm4s'tcI_cpiLokj#<'b?nU'qH[EG;(e-&>LU:bNn+":<?eITjp\h9!RhcD?d*(.H2)NKTLUl+@%=P08$%jm+NS*WE!(mll$bqcslsn,rnCMW?ot%'THBS6=FFchc/=An>%bOEXL-GZMjjTRmYV2!=?@_%nu$=^sd5es0T.@R`noacN)S^o%n_%\$PO1Zr,*=]7,J`-'VKD>>SXolpMj7VjfRGV'mXCduKn4UkBt:m^UM\O,,\e[$kQLQdt:An&0-:*\1qZmq*65`G8tBm[`]Ug?h;[%eVW`!b%SL_b;1r,NU?1*n8B?YRh+=s^SggkR'Q*@i[O@I0+D!d?IOb,?tcYHCX)$5CSbRK3NJbjom$EF/6-GorL1H?Fr/01/Jl"T%1&QP4._Sq@CRO4W![gJh"NfC0qOMhqZn#&KWp&L5n+AfjBf;lMY+pGi%gn"]-V@oGOFkG:!GUT!n?#*8PVU;SodWXunjUCCrf]/0%Rk%I=BBmroR<Gl@nXaL=5$.0]80BG.SmJM.WAFucG+.//8Vl;WH?r62O_ctXnbH$n5O6&&aHi)HJPFeFPZI6b]<1R?5s$g,7EX)d%[jg4&1Wu5PA6:"T=,1:">8!$o3-ho&OP$F(mWU(u5jVe%^/IPb(2X56JJA^J2)8YBGNF!\q*O3L/87$O`kZgI_Kt#&eM*k5[%;\M%XVtBb<rb'+8tYMKqSCtKGkO"8)p]1`Hb5X.]Mj<?T;oo"kX.I]VY*eN;r?9]e],0b>CFI%^dWo-5Ad-XEPPt$BeDOsP'&/1Sc/"6%4aC1I7Vl5Ch8$hmiG0uGOT_06]<<G4MW-Er)Z6/DX$Pk@S'.[a:Z&KcMFGGS5PJZ)mp$nP)/UM.WM=ucO>S.ClWQu@W+S_`qsL;*%r7q,Jn9.*WI-+K8IPmI?0o\5%=1=7q<`"O.-2X?GFhnAAL^4C]Q"Sr:MS:['(^,7'C"m,:EEH`hK4$XiMCB-sHl>*R>%6_]%@RoF%n*2gH"?O*l$lCX"cjkea+>Eh-aU%<G_n:p9P&e;Woe>51i$Es>de9X.(Yc5hAt:T'q-?2:IZ\0,h7@s5)g-_HpCgZ;[Xno,,&D(f%+p#q&*;mpu#CNM2muD\s@+EVef\D95>I0OK6c\!cS<#m:\le%f/u*1nGD7;_UHi#&%g2Kd7:ue`qs'e@">&41"udR'4"hEBn1Hh5%,_poem?O8r[,40=l[UuBXY`)mPB<o'BlVm'&`.<fgd^8GOWVFcbIObNQJ$cdi5m(JqE<.O5Nk]Z!cE4E<\_8eeH^g7>rSTR91Nc0%8fb93O("AHdKXDbh<7l0=*f-&#RDHS(aG%=+YaoZCgOuA?&&[kRGM;f%+J'kjZP4YG]fc6hkm7U<qB[i/u*j.-c21[Xn4=$Mr+%e%g=e-r^IQ-VNjaWa:W=.c`QijnFBODV'5W5bFSB%(42tqG,]U?A&A2>F-]M^Q!RH96`K-aepN%;L""F@fj^mYqdsT2qcM3kV1TFOL%Y)T^R9)=-mBi+k!^XhP7S?`$i9TUE:gN<:]7UUe_?_XGU6W.H__1ekNT""Cf(t(h+B`s;knPpQTC;fi3(0H9M4>fhEp;]U5WK6=.%R*uS+biX8\ajN!nW0&_]6hk100+5t1>KmBJbjt&m":DsB1`n2Qa=k+jbG&@c5Cu_lV\DDuPmHh1Qpsa':Q8Cpa(sFIg7RY">@&<Z%h6I6r?.6elHR'0*io'HfoG:/ebq6nM^"9PP@HR0pZ54d0\p2RYQ67f5O*0c_9B(0;i*>_++HPJ>SA;2XJ0DeW7CS-t_JY#H]7boN%Pmi.U2(HiFPttbp`HLM*G;CLAGjL;A,`P_Ia_u5_oJ`*(`DZ>f(YFmtZ'6*=S$9RAYVeO^'2-fqMX"B#]7q-$5ai\8+tUJ\O:#5*%p$nPrk5:5ba,EPbY+mHsO;_8[OK@W=[k+b$KKQ2qV?K'r2baLorkC"4/l8)OUY)S]52XE;/Y\G?oE_!&!pcFc6`H!=TnR4MD8cFP%2Vs8ZT"EI)&V;X(Q[l9]NJOeWeUj+n3(;`Hi(`u$4/RCY?$Q+mOc:8r;P^STQ$QmbKCHOK*<C9CVEY\DhTp[n2K3R"&HuIQ'Qe!a%PqI4?Lfs.V[tclT(jmTlp_8Rc#NP%NJRH:Q.(mgGa4H3?d7#E\XgY`KR1on8QZ"FCcfoLTL?@n@%4O+()i6teJ5dZ%"`0.#f(*rS%M]b[hn,H(-(QD\[GQ8mdHGQ3WTr?^XkdML2+j`VdQY:''ZEj^qK*1.BUm!#A26+8u=bcrgiE_?<f+4H*UYLd2KVpWZHt'2oV=q,>%&&h32rU^`l0.mFpQHSEc/^Yc[WKZK[HWH&[m5%MTLu^I]+n^Y=8"Q@-(rdlP[(4FgYGMi$"4cm:^RFE_pLq'd1P?+`QP#8/:f'IS%Z3(LJ.$qYq9VWb>0b^Ce'c#(<KOkR_Q!UG/SY31jKhop+m>2'bf:@*2%LpAQ]3p9:/r<XEKsM>-[TR2.dl;)XMR#[c4dAkHl1jq(%2=k&D9J+85I6k41,b"'i^%t?T!'[gB(mQVl+lcXZKS\\[,>iPL5lp6!X+LmMi=^2n^-B!bLJ"*I+5'R2nk3Dt10Pd/)0-Ct\bm-k%N`d77Ie%*2MoBQ/UKUsc\AV[Z:=(7lDQr+ccUoHL(T9VIp,[@+rr15><Bk%c1Hc?$[dU[TrZ$SE(7_PSSmmQ3TVu2@+qt)M7%#QR%Y>s!\eV-#B4B2kWS_'(pK0Qk`a,!Ug5/DK$CS4GC5ttO&rV6O].3[?h>\.78pM+/;rgMPm%MGUk6BpBRd6*244[kFZ[I5*hZM-Vk%Wg+agXc=G7(fD%n4Q%@nGa=Wq:ubXtV2_t6iW&$;qDjq@+@l!G4BA(J@)N*sVsjm71pVUM,\pf,@H5au[lN#X4Z1Xtl%ZobSCFC2%h0Z9C[2in]B_1am=??i#^CK`Miqj2?*"E!?]6\1AWEOo4R&@CY5KoPSjpPMjQ_g[26!H6.5Cr4dWU^0#YsN0tfLKKN&hm=fEBeFM%#_Y&V5NKf8C8+!8ie;&HI;@ddX4)klZ6@l<'mQK<Z"E(l;BV$D]0&PDnC5;#:p;h(2*PV+kfCrA&Te)i]FAAcH@,S>KB;::9C]&\%k[lMG`9hq<4/^^@%)fBlYYt&=o4/IaB&CY`>GN1%e,c8CAh1s"]r0a%-6"2/13Wo9X?<nLlHViISPm>nXp)=8D13+Ldl5OUD3LmK%LQrFbnTHpA=?46(&o%`5*#u,)]Zs3bK+'dU#c7'cGe/E255/8m'=BgfJC_nt<3&12@+IQ,@sbFfICauD`rZhOh.MljC+Y6dKd/@e%"2@NV7cq),Hcs(ho_=c`&'#YGgk!fM`gEp&NQ3]_S6VmXNcl8p/^UQN3VCl3L69Y]SY$qXUGOI\oLFl!gSRQiJ/O3PK)$docXtku%W.TPj%+jf^\":qTTi8S._@0K7+7-hNd-%(GAi4br$Q?%XB[rbqM$MdtZp9Vd[L;%bCot)7heo>D&'a;V@GC+-^jYRiiuf'(.onWC%K>'b>$27aXm:9KZ"Fk^0;Yt=^VB7RVPACuY%orP&5M.d@_nKtU:]`4/3<A:_TsA]Xp1(>E3X,faN^(CnbWg'@k#VG>7./d$-QGuY%?uA4XgKpT-SNDII/VkdM2L<E7j]hd1)-G%Zh&XhXWTq/c14GH^is0Yf\6Uf4EBq;U1mCSZYj#3KV\^%pjPCuO@AIB.P-6nF74Wt7%duuBW8jfkiAM[SOlrjM$'1m3%U9$@KGu#sN<``)'DMUJ5HhEDYWq9hG/3(CO5FF=NC+)6RFTWf%TTMD<g9YhX<3b4>/iu,3WnY*j%>FBh$IYap8G9k/$a_'/nh"@(B$>:ltRhN;@9DhYh^0Tq/:_o;T^;5Z:*CgLE6]Qg<5Gk<gLM-+I^!$$fTZ<cBKkX[0TqR9]b$KsH%1Go2o-C!.tGS@CPPJP?AR\+c@<\O<ha\?`Uh=3.X`#h*a10tu^.0h6VO*TU8T-L\VA<aDUGsHFtpc73U>!,`EHg8r>!><Cs!k@/W%1+kh@P:)og&(G<QUYF[CmN^@AksX.L*_@ANYA%'/h/OBVW>p6f.At;PPc)nW^OC-42N(oe=I<sgZ<eG_+efp5Rm%3=Pp>+PFkN'\%Y(EH?f,=D'mUSX'Me*l;&CGGf`$3@LDN)KN[-!;I^*JQFGT?%!N9;gc9:=/`DQHWRC4s'KScB.g3^;:RduV>#"<GXToEB*fA1qMa%7#R@FjH\3SeD_3T/6:nPcp37-'6FZ*9\a2HHIU,j^B[-JD&61?#k1?&!Ms!CICt^+R?)@`*8eLoo;@tq_>b<_#);f']8NW(_>&I;%@9tU?#Xoih`=N%jK#6gbV#k&]J"_0.$s!"T4%R<tA^#\UG4"^d8YfWPTag$phM3a-*?j?.l*FY,&c$t,q/'aM[jFB6P98Rc4<PD/%RFr:cBfI72hIJE0J`bu6#a5c3YFFm(Ipr2.+6gR/e;7Gj7pu@E=jHTeSO;UbY_Xs=0+"s4.g/LOs+<A^ZHtjHc*Z`@fkN.I)?Vsq%PA%BL"+B4NC_"?YPgui$*B"N07B22(+APe<"$j.Q>\2XjZ]i3u><oah_UF9L)J";;>!##23_a?#F:&nJ;?30FEIp=..G4'C,>=E-%+]uJX1t$-f>\`t_r0bbNgu:O,REK2$h2s\SY]pb@WC18KY'),%P.fk^QoUa+h$Aoh,PCL^dYEs1%=M"R68a=@=:q@W8d*^^#u%<&%)5!C39Tc4[pX;[78J0O#=)0FdhaZsre""h+WOki;a^Xb!-1b7J(O3>G!C"%PaXjqV*BT5XM(;B=M.7(ElBQ\:Q1t0*l0/0GhuEGc%O1@UO+7@`6B^`'OT]+C$gVC-AMg"81`10^rJQQg"%Msh:>U/R+-a7>@A.Yqc4V^RYeG]>aHne2K[[WQRp`\Z8TF=&k>O\VDKg2.1%?VH]]aB>B#lX/51%sp2@Di:ag75UM/[hEGr]oT?eU7cnYEn0nWOG?ntO1;ejOqi$k4+ZT3s7_I:OFa88a1eN?Jeo>Vl3F8I[rbc&%&V8"5NKbtb+pg'1@gf-\0F+f61k,DHP1_sTn$d@qO@Vs^4anE!h;Y)dBh'%t(ZXm^GXZ[S+h\ebLiS-uaP-j]i$]7,8-Gn6,/dc_%TsaLQ?R+feg`AN>6n"1Z]/DN!\X:*`*6)'6l20+.XnhAjs*o$1pBLnZZ(,FbY2=jJ();W?-GP\5Xq)o&j00^&AITQ(*pZergtF[Y%pcFI&0XZ@>c'J6N48M8j3_<-l%:[S?/X,`1pML'&>^q_X6gJ?%`^1JkFkjaPQG@G:Hk$/s#E'RM?]I.9MC?k0;EPZe%<A9kSdnDr%&sYW?:7.CQV(-hhRJ_j0I39%Q!;=4cd!P@'hEJJ8g,.u\+OQq3QD#&7OJ\;#P9Tm(E%6,=&^6_agr#-\.k7jF4n=$.O53YY.:@J!%('DM0Z@Be)bp",@B$ZmZIA1D$4/d1pPH$:h+$<g?)BMtR4lll'#0gf\A"ODO7E$q'GA%+sQ04tC_NXDL1>)oo>S[O>/RNhq]h<gr%fStV2K'^5'DZBSuB?&>&h`gt/38e*7K"@&pm\t1uXW*AI$5A$ScSLWA)1p'\;\iU:H.VZ\#C&V2ngIJ`-]fHD`\89&5kO">lZ9B8%#_FRZpPtf%??F$B=t`#`$,\T;":n\?:2LQ620jMTmrj<0\EeiJ']ShD"7f$#mV$M_FGfg6*2b[@D]i,51\]f;UN($H>Yh3L<dS`T%/527MIL$aQ>4u=Lb`&Wi2[o`iU3`-e;)M7!Or=f,]g^lW3o'--8q'u5?<YAkZ]K54:H12XrjCD?0<cIYqa/GlR92k?nC/;;%GNt"%PY&hLWhpobP6_Q<U7>ajXg,Kak")C4Ka(Y"-G/k7oomq*aHBVC3s$*bZU=7.[>cM>Q[ASShUSZCK]-5Y;6*NTCtLcAblr[!gU(.p%S##<0CIVBe*G5-,4+?M@9OY-6eXUQ1h&5/>;d/#aDMFBs1A-P.SB,F/Q61,MZ=Zq]X;j`&0WX/U#f^rr?<T7,/*;oAe/%E>eeSrq%0?LHN\o'qHUk^?nnLFs.=Nt6o@enZocTIh@e)3fuP..18bi!F552'hj5`%4sA>pFn/(E4Q#lt&Q,[_M%lr^b56%/R*g[HS@)A=DD%A@pA>>G#2JZT4]/;eJ`g.q.*;8AMqS]0tBo5KHS:"=p/p4N"=$I&"o49u#]Vgth@?MXLOnRW,>1!-%/4;)$$<4t2MJPBjZuXsTlU%L9J#(3DFV=_-rBaA7`@,V8*%L>>'JHgQSe!Ug,Su]ZP7;6G8;V-sUed>.@d^5]he;fUKYN\_e-?p6mnHH7b=lD@s7<PruV&QYjre%9?ccgeD8$;n&CJDTmqOk43TPi&cAA=V,iX_ljslqACFqC<(brX?@dX/rBVF`)YYQPq7q[W.;LOZSi)NJ]Z1eU0^Q<Ah$LS?5t(&>%h_?Z>]'X^r(#QjOAgXcabBsWHr0O>)BG%lnKVB0YE4UV;91?LRH#d__H9)GhB%S[Sm58BJTOufb7/jAP;f"rWnRfFug(FUkbFk7-%H<m$X,]#.AKXNub^os*\d.YF@?knIV4?``8pA)'\Xblo,@G&1,GZcS3#j]H5Mj\Q?.;:6kA+(@&Jp"sbS7cOL.;gZp8>HMOR:7md%M%uG,HfE=g8G%]E\4/nX)D;M2]f:84,tXO]frC[qpTGZt?"X6D'<nYMS?!cYp'9hu1N!<SNApHtn2<<+kI$oUMDQ"lGcV1fSo213%?5X"ooY-?NAm72#b`?$JCR\`(rP+QfN!1f^]u)j_IU7@VSO.YhOKmqB7MS,\4'J+K"&gD1enZY^C-?_gYj;o7'Xhh%K%0Bq^&?cG%SYK^P/qfnC!=JCiPJ"9oVQb'/GpfO;9k4'mEmmH]E(O.XPSI'X,hc<VY#TN&ET["s2;gFJ5`]h:jh<0V;G\D`R4\?:E5EEs2GZ9N%i`2/NR3]C>m'An,3YGmdc>FN06oSRX'I,h]GR_,,]gPsL^^'$D_TW:5TAGc0(WulE;X\l(?>*6^'A9SI2m8#3?hQ,$'ALD+r`d8s%Gt^VI?6Wrr@7RMM1['";3/Y!n%uW9"dpJ;;N/iE&/pT.6+i+b!/#<o^a07TNG3#Q0Yad,;5p6:"1N1n8:\kK2!p@M&GUHWH^ulYX%f1"Cd@X]"'*>b\J69L:2[Bm2$If:50hq@Nt-\dRRJn*jU(DCc"l#t(sLuLD"Eg$a_"']t_p;$AX*'.chTuQX0-.k9VZn7J^T(N[@%((+ZD]AL-1/;(DWmp"U"4BlW%[PUm].ZFs@CLpI,Sc^_-&@O;ab5Xh.Q"]i1hBG2nm\i57RLNF/(XH(]OJ7;KV-Q1Na_>[\^iD3^%O"dLpl-$b%Mh<FSRaPg@`4rWkVA2nZmBJ.a2q)j_diM8Z+p(M]71@o/)K;KOc5('O1eNeL8+n3JWC$e2jbtI=B$ZO$FgKQ])7uDL%oj9Oj4t;n?SSS>\gO2R/W\kaDENiG)hRmDiffqTedI#O4GCDKCY@N8_>-X@aVJL,%aIP4j\P_Gr#"]aCA_TG*nU3DN*pZ,3G@*&'%ZTsI[jJ6:5QCbp\;%qtca3t/*)#<NrK0]*g6s`T+YnZ8(*t\.k8:RsV2NPb$'q?PEe!EWC:I9XuW/iXdI%')47-r5'hf.1U>rbBF%&HB+QU@naN@A)lkMP*eC9cQpR,D&Zh`BeK?KB_XDO]%f@YM.;YcJ?itH's9l(uud)%+aZ<p8';dm*ID!\8hqTYiaA&D*?0^P14jd%4ZdPJW#2,kactdun^\?g=\;HRG#)gLNX[27B1G8:EYS`p]R$$l'dig;8$g[Sjks]FmWjh31+ApeK=;4aZs$#u?n27+3r<P](10p>%gS']4L[$X?B'sY;g,P7iAG+ALWHL:*rbdQ'('S]sm0Kf`;^>]X=P_9GfgE;f_$a*;Mai()7;tdM`QV,tqo58=?GYVOVJWcW6FkhW%^9;Xtr`=2*40U"4p`os#-ZC?VTC(Ebm^Fk$Yj*YD,kL!J:(qo8U^rH:oj#Lr&fEphMaJ,c9@C<^HDkFCEZfKUkt':jl/`jW(]R*2%!f@&%0B[1W+DG;F)\QHYBS_>$bFUHTAB$@fR:4MhQ`bXsWVbTe/1)cM9#o#:KrcD"(Dh+(FTH#q^oNfbC.qq0"s_B\7Nf4_C\)eH%g>0iegV5ig@f8%3$tIE]2C;^19;Vki$Fd)bGc=+4==)+uqc#CK,V>/RJ$k32f^/b0\Tf0/e^tbtg&`R]3KhZ&S0"k*1(&5N1-s0\%EYCEcbIAij98aSURiPkKO0E$j"ro]D0)$O9H3`AB]o`F(54gC#L6*X)ofj^mK,/8qgiM7$`;Z$0b`%F+e\2>AR/;.B5p^p^QaM!T%&Z@C@e$.(fo59:gN^$[r!qr%%:s)HJ0*#9@0iOC6oAJVp#lPV>EstV`YC#&laqZ,d\#ah-n:DZ,&I"Sd[h5c43,&&438*O'B"dRO%$n\mJP]r!:8Em3JIdZCFVGr#CrU$SPb\i$-YO7T*q/h\$`N8U?r027H2H'$h!nA[]M*T.moYJ@*N'oL4=(?&u!XaX4[j`T4b/,E<%B:Fnd&-Z.$ZT34_E@8fSTfP>4d?'=+W8ML!_s3rU+8+^8`q-b46j;#IH>L93\Jdo[X`AiBlA]X,UaeEAbIQVNH>G%\otn<i8Zp:F%e=A+RH36tr5+%"YoNhFK8HZp#k\6](>>BhI6.gL52?F(GUNo1N,(=q&mDaBEd&'FKUbF4;G`Yu3>3h35k[^Gb3[VN"4V?V+<.8@l%kGc/0-#6FTdlk6,MNbo(]]!fbdFON"Da(%*$C@.74c*"g8c+erG<KM;SlopVb1-Uo,aJ7n^O*^8Jl,PBVAU5LeEni1B,2=ccLg.p%S,d[N8U_!!92F;l4k&e,PdNL$oOM.F'!CSIc]&J9845`d^qn1*b3=nHq_<UbMJmQ8STh^UH;!MO7gnNB7^iL04NXA-X*m'l.fh'e%*i,7M=L+bPT(G@Db7i%,LTi'BW=2sRCUO@L@rcoYDaUe":`qNa'=$q9TTMXbP8kSIMs*JOo?O3-5+/ME5>Q,D/KeC.fCqiWV;3c8%!SXqf,'GHT^E;J583dg,;ARt8CSr)6:AtJ$CB\G^Yh1H@3-o^=+t1p;U0_,]9V9ok-&VW:&1/t%N(ibiFkuhto5"N&.)"X8Z%.+_%0Nm'CSZ\*>E75N^#/dpO-7B&]$&30pA+.Z']Kpe]P\KU9]]HeNMB!Q8!I6Q-["3J=9g_+bP[B7GUIj"o&:K(e):4Ie4rqN6SNSdb%nd90T%XjbR;L`7hm^BZ*HeMHGigJ3YKA9C>$HX=8'T66s/RsNED+9bR)CBOXXJX,Z31.74H,fW#eJ]UNY;\sG;#I0>Q-j%]fJ0C?%dQROg0DuF4b]%cb*[P'ffRH2.3:Lu6762;Q&!TX?1FO^)3ch`c[Zg./c5$"OX*]'I05?J'\&/1WSi\?sk(P2jdOFRL?QT$#+k1P%%O\18b*$EiRbMd0,:qj2YR3'u*[?b)8)PIYi2D>fP7K!n=@?3QX4(XpUg1FG\.\6=0o2AC>X-AtB;V[Ha$**>@?j#fc:f:LHD"@,W%=3Dh5"l,'t.\A.TEQga@ElB-eh=t';0d,*-ChX4rF\;\!AF,1)h4Y[i0+'EKU-s4n.4go=g5\G3AP+r+rktT>pMt9TY11W+m7DEe%E103aQ$'RRoL7ASh1467g!;0&:JpC/.TmC9qjkFDo[AtNZ#us.,b0$(lQXKPJo3<3lU&WtVSLtk["(\lc_C'sfJ<0&_g]3"fdP:G%[&oCQof`!Vr?f'j0nAmA72f%CR=QU9Ia%E/hT!Z/g:mI+!&9>mI$@HjT%P5N.)hGIq-pct/!]Ue[oZKsdMIV9+=;C``JD`53K8,U%Lg<gE!DU@0HiBnDKHKh+:=)hbqf3kb-mL8.4*tRc4(0cikI/c',HPU+W4bdfT-Skf80?0p#';DllcpQ-p`BSl]mgI++fp_*\DAmi%M0?]8>lCtL*9*!5'D0RQmVk&apLKAk!P%ukP%;]>i3Ik2AFD9jYtT-meIb!f3/j:T+@o(.a.E>@)%amB,f7-LM`]3N!FGl:;dQRC%128JCVG7sdOh((4Y;LrVZbXPEVP/Q1a7k*El+?WCm];'Bjf8RoaWrs'_nXE$Q5s)2]\2V<j`=k1eNoW%,V7ob&<Et^>htWDBbKgH%5M`EuSAtp-,h3]B4Eb37&Nf#b:YsB_>)Y14o&Q'8hM?>#=N6pZe6c[RHL_<)_L?i(XE=Mt@JDp"0K^B]W>)%qX+R4u=!rm+4/D"g%U&8U`m/R%_^[q\-Gs(h#/2!+[AK",F8B[Y)d/TO%iV.XjAfFP4G]&Z<@R%trG$%PO&_Ed;G0RkX4ft6O=5st>VLE,$]H(d]d8oBH%=7HQ`g8*`Uk0q3R&Wo:[o.)DTgfLL9Qsg&C:"'k"(K%T+bFp[C@P*g8X,hEOO2I2[_5s%m't^-C7+6/G!>c@<RlS""2G[$gqP4:>%!1f&V@W8aNH(,CGjlBb(STCN=ij/%PAC!s$S)Ub8o]43&p.:s+4F)NUMZNUEHnn:n$.BUuVM31eMb]*>;5h)U!biB<E(r:=P1<c]%r9e1,HJH'4X5fBn=9t"/gY#AOC;^8J1bu&lSbb!dpIc1l7GR7<hQJIf,Ph<=Y`*md@8O$9Jp4^UhKApZMin7S-o#K_Y8u$)T%(N-%GmYe43%IQa^.`T?L?ZB.*"%\>9Dk+HV[G^!V;D.9`\=R[.YD8BTA<d3lIq9J/J@/[6Xr)G(f+!\C^fb>[p*`?:,i#%,L*IhMDR#J%LiR+7EeJuc]U@fO]1Rge6$>K?S0hDr7%M_ho3O=0J7R]OEb%b2c.f9HiEa'nXsg5CZG@+jY42MEM=Q>aDKuDS/cZL;[IiEL)n55i%7QK54Tjao]$!L<kXADW=Z*OC@cV1eNC[Mn#qLV30A'phAI'fBmBok_h"K+snYi)H=q7X[!E5iZs[H&DMXpZl)@To77U:X,t@V!%Q%4mgn"nuYNj,4e_jJV,ht@=qQ]>[NrL(c0(755s[3Id"ItP9&HddHEO"ol20X&^F,'8Y4FOZP!7gXnR/_=,f61-*-VTk\Tbu'Jm@0%Z?B!&Up#G04^8V-T@@6_j^^gp`([LDK$-;`<L2agfJu+KGNSmPk2W[eA\@V9p;NsCY.E:UF0)YQ#-j"OFJL>HcO/e1_KaCRl*30G%$T8ug`JDof^Do=^Kqe+Rfr/34M7d2>Xks-T]\aPAGc#>-j>BgDhEHRAH+VrNLH.42P9<0?6HN/p%4W$*$I0>l@X<TnlHmtkY&@Wb%`Li<`73/(qQ)L4#(p(f95E/Z]oUDm*^&_7Gf+*qE'1*R.r%[2(@GrM+QI=W3<&4Q1$iJr.4O4-jh/#\DZ=aMM\[:Z>p?.O&H"NmU%1K6!ikJOYInA;tN+;c>k<!k[>:]FW@kN7rSq7gtu%I-`MGr*P0]0_e)CV,PO`QtKmL>tTZRF4Nk-)ml0pVXA3f%6.7-0%pl6/GAN%k]Fs\B6NE`qtI5JGD1lIJgV=n0@M=iF&J/mPiP$lahfhtM4P`bkt,"1'T"VV"LOH,E$eDH7ZVB?2TE>D,'n8cl[9Z\YesSbaK6>>%gBn=d.!I3M/6L]On9<GkG`H"([GG)UU:JL'_?FM#S&m44]$VeF8eJM3?9^rq9S"/3U]NgG-^5?41mq:$Xca#%&sY]tIB;*2lmE4*%I5Glii2:uI/7q]CiWj#j8\8DgZ(9=BD('80ZY-q12U`jp^^TA[(0f;tQA[a\gL!A/i-q27OLJ\aU#cK/P(6HQC]2Q%gjXHOq.+a3%42IRB13[r$hKNsCN]A'tN:J;sJLKi5":S^'^YSW>GhdMSX4m8Aj)htF^6<PB2S=V@V!0hd&XW0b)H)O!7H3T79n?oLM$J"OnS>_#%WID&!qQJR,pT&uf&5EAN_>T.n%=s*RCQ"?@3\R"XBfaKMVA7T>F5&4Tn%#<]WJ%YBil,VMQ*M@_:2GXD7JH$q(Wm]0'HL30rp1.i%XrNH/I1-J]Y"o3:L&*7dBcX,4r9[TaODCTDde;<1,Dnka76u26A_O^g][\\fJSu11d^q<0nI3jqj#f>9k60%j.mlV=#U;s8#4lo4%+AnXDRW+VXm'm8=:`J@bk0`c[1SMcn6*i.VP$VJ?;*79f<KVUs8W)`kLp!.>h0>./bsn(2W%7!d+jaCJ?e;^@PKtX;SXt;NK.X]r%VOp2V-gTo":2FUM[t8K<,7UbemKf(Q"M$mfalcH2F6DO8GFm*dZFAXi/d)<crqLSZeKJt-lH;0_o]\!X:B($R[%,&N;KH7[*nLgT%!UNr&'W^!mbI""'-H\HM$un?%nE-Z6f7e1\ertEOcm2S"j#GLD0O-lCkVFuHrj9$_o.dtDr*?Z[G?-Nk['B'6(SXsBH7``>.k:JE%DchLhbu8U%PAKi+3(L&*i@Gr@a\3"u*n.2AnMcBsHf02Spe@8HfC/J[8$48BVAP&c[r59)/Wo_9*HbcF%^Q69dTZQTn,Oik_(up_%fb?bC8&g1N+^Oc.!kPc2ESj&1/m]M2dsXhK)p!W5pW:]Y`:#MBl=^=gS=hK'U'NJUbHuT&SPDc[]+tt3TfOInPVQFCBI^4VnW?3s%h%/Jj8bO>#jJ>^7gD)7EfEtb!m.+&k7(c!EUbC!6'e,]:)L1H9*U?<X[kp[W\*TqVS5oO#f.Zg(FKu9Q.4n*Q%<=Ya7/4IAT+j+4%#'Um+-?TRh'5I[o?:D6CMkns1P:r*Z9?U\Q(NiKRdRj+M4>VIm*0$ss9p^bO6al"n2)?(OT$UX6kD#/+<uT;r_cj^(pPr1d79Q>`%\cu@rcLp%YXo^LF2sJe>/`+\ED5,*di?3en.m2:^F:1)WZ'LVA3nhB/0Jb!pP,'YA#8rGlj[5_ak?js8*PM.ced=tpm9?Fq5mD%S%b/gJfZLn?j3BjaJ4gf"boq>j33nciL2Lht*Y%o3m\#r1lpFRf3d]udcNadTEU2Y,*8i^h3;=C\\g+e^t]-aUP@#=H`2jWfbo.C2g%R7<<n@ZRe\#_3e-*7<$GT+l?bL7md8Q"!rgd/[]%PiR8epa,-;G^R)MT$_h[K8UG2`C9ntAEY6UI*17JPOZ`[3["Lmo;VbT]fu,^%'T.l.+mD_h=U43G6\@dN*:E8oHffXk/.>uSPiq07i#DrrEg$Pa2hZk7Rqf`AYs\oJMUV[I>rfo!q)A!Rg>tg%^Kmc+KUV2*Osr@K%;O"TfPZ.GV@*beQ/sK#,Y1,@B?SF`J1kJ2]AH8Dm'UOf+/3#s&?qF.6p.4dr\sk&g+mFDc,ZEU=a[kknH7[GTYD.s+1F[2][*0o#%+EIF[lepH8&*57Pe('Hd(hSr4j?%]1VE*X_EkI'>ma/*mI[mX@gI&cA&p@Ai`MnKn*4UlD3C.'BiPD8N,s^#ED?mnO(n,U%fg`)k%_ORRf,_S_%f=7c<3pT@X@/843J2GT<Muc=0M=UJlhtan+7"?]o7tZZHq*]Npg:lJu1?_0L[p<&1:.R3#'.\:'?[T+9iAs1O5KCC(%>K3H"98G2.NY+5k7AFJ,ZC&#`V^Pm[L$D)PI+Wo]S)BI.OTEOhPFbZ[E[SpteSD/ub6rC9N`@BoV`AN"5o?aKPL+I<+e$6G\",aB%U3p0[FLL!gSj>8!pbUOFbEh4Oo/KnMZ5Nko#t7:O!:gt6KAMp#iIcQAb;"hnY\9s<qLHV_b1V6dQL2!uL@^:mf7QK]35d#K>H-(`%).1'=4c>C8V'e4a>%q%Qp&%*dd<hec)O94cJ!Xrs6>i%J1A@LdQ]>V6FBblN;9]I+7Cdl=W!8KM>?5_/aTQ_=Trq:O64"\ES>>eg%=uHeA<^mZZF3#NiLWG3k1\PK=LEZ0:aeZ'3WGh_%@cNl+^Y[/d/NhCP`,d*s\FP02Ul#d@@g@mLht9=]oc`7[+1M)seV+nU#jl67%5(7ajQ(!N>)7KSH5m)S9qC-/)(^]]a&nOLeP(pFK_7OOc"E744`Iep6Voaqj07/2K/SLZZ/.UHU$[h!aLj!^S:VCOm7SDKbL7OOM%qf5dF`]gA>,'1g];iMQsY:(i4$]VIUA,e:)m;r2ieb_.c3-$:J9aWOeNA7K!<tdTCg"?:f5BB!I^/VMAffl%^23SX`M6:N!mr5Wg%c:0^jK(DKq-M=%9jmE2mYFpi3RngDha-uJknN;`!jA\!?c?+f>R`Jg_]\oeWcpW`PTXj3c6ilRE=?gp\RJ@`,#$$\3$UqI,ie:9O%-;"u#6??<"</.+p%PL])G#*s=8,kof#I=6Z`B%)*jbLe:5P_or)qmV6W4>,t:OhiaU0UuD;\:1iO[RkWXX1$P2>+$XmV97Dl"Nj3%1VI!.Erm#BK$@kHiksd";VG)=3N5tCfD"j=8T-Mqm=MtTagb$n,r#=0cV-Rn7VZ;^j%oV5RY[O%7@s.r`DI5u]o>\9q/^V>WVgo-%3Km@#O,uo@[U9!nnomnMis\Y*/KXstnP>\6e]!.aYk.1k(glUV3IkAgJDu&?d@rdmr\s7_m?tC]a_<bN(=oDr?,6.Q;,6d_B_8Hh%('l^H^>EX[#u=QE;_uIj(IV-.$/<@rWtc=eMRX6UY,;u^Nub@!*Q@bXf.CR6B'Zr$gUgPCf3Hq]G*\bHFZ9'eS\JApakKQ]nl'm-%-liiKDcNHM;d/g\b:%N::0i-u;\<_KP@RIW(A7=,'Y5KHcG!_?<!Y"`@$K!<*QJ@2T5mRpl$h_iqlrK\XQLL_I,==QV62o:#0KK9%WUKc$[3Q<2b0$HdJ:Aboc6NK[Ma@JnP5Q2FSO>7^WjggQs.qBBO#U.@4EoNf^.cERY>W.oAR@5=`IYEHFCsL&.K*j4Kna7k)Q>m^%FOjJi#ci`4Muj0d)<97&6h?FVD,LMP4K?1sDF^\`71$,\iAab"LO0'jnEVHGI]Fi)?BT6nB+W/p"Ta34i7?"_l%WXn:``B7l5ZRf%_To`d(mA'h,epW-<u%53L$TMJ9OI%aAmZeN\X(u4&M`O@A3oC>`0G_]ct[*o"FuU1cnZ]"gja;+8r-)*Pf&KNFC3Be_a*p#(2l5[%R1TJ,cf;&;_qDBbjGf=(F9aeIod!7ti^=+W=ItaIEshgd_ZbmrG\X&qQ3qq)lD4njAoNY@b2D7RV'huu[CDMOc@Z%J5BAuN]3Y+d%'hnLVju<@/l6["*OjFtK?h"(D#m=G$9QRjkZ3VJ'@p5_)V_7l,B7/3B[#of,8d:/2A()\$Xi)+7_!6d27?j4fE8%@`2U:NS_;gan%0%-SA'<:t_]3Fk^r(ZK5p7cO.6_co1$<VoP<RdL3RX!QOn2&]R?&`msa7dKM%Tf8JZjgfQE0R$NO:;NP,omUTD#^7*9BWa]*ClcA%G2.p+7>TdF1)YXol((5;N_hj0kBHoQ4Zp83PW35k=(HYqm)G5V9:5f@h3Cfor6+E'!`OL.n0K@c(BlmceZ$Ja792i[%nT-@lO#/#%dNM%(gs8^O;B-K"MQpORM,:O\&H9`AS-IA+j/O7;)qW5RQ'5!`^jl0l73_+uTEn7`29^^;K).Kro+%9c'U#RrOqQ#CWA[fI*E@_^%<t&iY)4(WiY;^K-I1s7]rXGM.9S"M,;q%IoO2;g>&eqc7j.2?V7Tkj^,YqPSXU1<k_;;9ol7r@oJ[FB]h;WiG@LttG/;-R`h9>t=%jF/RoA.HR90t"N3ffR'u))L9B!@ggpVLFGYg7tL79M]E(k,$<je5?R\gV3mb,,IP%gF-B1rR=>BHe4I.qSo+P0(sl9j.C(Z,t::r%!O,I?ggd%>J5Jl\nFTCp&%PML\Maa1[@nh@<<<2_L6SMHdmgfMl=Nn#HB*68k>cD;[mP0d$/M0Nk3IeW4>_C7g8_%he]@OlI^"$a%N[n8QnqUrMnO!tk<KoIRDp:V.pcN_T-MJi_p!cU@)/bdCQXgECSKJ7DQ^sZ9DO:"r38>J1(#%3%"h#e=%ZU5$c2UA)FtOFSEe.iZ%+2<U"r8!"L'ge-^8:/ejR8`9>Kg%Ld-M#(>Z1R5k3PuPoU3IFhMaaZL4mFNQIL6lP#7J.KnXoA/\6Tsu:Q^)s8)ap\B+>.ona*=6%m,?<iH6M#4Umr>Gl&gF8k:91+4RmES:&W7`Q'eKjeu:ZgfY\"+0ZN&G)3VhunA_s\F=t!3Ar?PXn7P4s-92LhE@Zo;5XQ;`?<Nr6%l6cRhjp=WM[4,s`]KAmgS"i%0__(rl%"9mCQ?S9^)!8?2PU[57oI,a2V*a"^6go/*E4UI^UO6gQl7!_MUDUlUjf*]d>Yk!OC,qI3%g?n$_*RNnc7BuSRC%8"DXCO0`beWW8p+fG;+?c8-Mdl@(hq5P'%qHTlUetopY+qHJO")"IV,!EkYKYr<2<&*!15A7RNTj6%XqbTn%](JChPWdgNo`qM#-Po#0$OsT6U_I:TP\)8(!eI(+Hc%miOikF@Vr9=oG5B=PR@Z.;ak]1NR@_^=K,N[i2[Bu.qPd8@6)R9!5&P#,%OArle)9X0+3=AZ]Oh^k%#LOnpp*GPB>#%e_n8#O!ZmbN5\L/0cq:lJCX">"&:Q]&h#fkCVoC)T__;"ZP*HEH2.s]jW<+IAHZEKO2%9)K>Imp66())\a>HmjbOnLQ6%F"l0AOKM$Op.W5VOL7rno7H22=fHV,4WIcc1UqB!(4jmr5H3`52XXdPp]l:Ma`;]a9qJU.--PV4%FBYULMGn2;b!m(B>,71a/RsV!WkgL,(hK(a6EsE?$LX;i'Mgf.#&"uJdD1RJkOr"R+=J1-A;ub;[l'?/T5)_X/MiRd&,sdq8HK>?%(i5u"Y/`,(`DYDL7CS>Cr3ippf!*9CKm2+6BBaR#\n=T@ZqBCj@3I>CrYWp1IGf4=g8^Q/=Y[ltDOiim`g!?ZD*4"ShoL*_`FsHh%M]B*o.?cFd9(^DO_)oOoGI:WkT;H"Ja%oiZ<UVDr.EX2c#0Yb"[#mE)0eKS5\R'FqaYH*U1Y:?@=CmQ4RM]rmpQUm'fh.2Tou)rp%)X(.g)TQ#MN%#"D`JGE7*+di'$rY.>SS^IU%[:J[<.%'r:$gV&Ef-%.E$J2uEK%hW]?q\KD"Brj0HoTGJ%7A]2p\<_Sr9>:aHd+r%X+Y+#(FjTHP$5msL$_;kL+>sD)u?]hicb>@jnj"g7#Qs+X6&o@DanYRgLL[AQ*XIEZ9/q-lFa/dZ('mAO#B_AY'e2Jh6H*#q\]'%%W4Vr.\"1j<jqHL_a4:Q?iia5A)l_XGC7oBP/(R&R*`tXrBE"I:bI%f/3k:,bYSt=s8AJ1UK.VmH:6OVn/Dod+RH$+#;n_CCn'66E%0Hp'UH&l`ZT4as*%HLrYl_U_G^!mO9\%K(bH]sFu&)aNdcF*2h[,rr6Vg4GLjp-Cf#!3iiZj]k/JnC@1$ll7fpr$!<"+_lQ`]f6D%+G"m)/H]qKa!BD;,Y8[h_V2X;.RbT=T;P:$g,<]p;d@jrfeV?sm<lZ&.4ID9<A6Q&o'7ZAk#g2sfW(+^&6_kCRuMmgM9[UpUgk_%%23*[YP<+l)Sn6Lp3IO>i@L]&aYn7f)Z>ME/OiS,i`8SVsEPWeZRVq6P!"-/UVKJ>9#%UKXF8C\bI2$ntSND)I0f1Uf2&F('Jk"0X%d99;Ph6nD7%c^g`,,PrH6-l&6P&8*nSJ*<<aN4Jp>4E/+`!!;([-J.NBfT)JO:6H*f,[t%F8W]*26W^cf@:@2?*%E=pq`J'?<:re%_;[+=:2MPF<JVAm5qtQNDL%HAU;WK(F.[dEU:kW(>L6LKmYmf`MXAmY+8pMeV#47THl57-@ceXTa.au/>,/_/-YUc?;Hqg3*ii]p%("EigbVM,Pm;KPPMJ.AlH"G!9Y6KsPRhf+0+R`fa<tG9.T68-7Vi4Rr6kR!X,.!ZocI'eWF??M=5Z8pm]NR_hZ&OQ+^)n=tmC#C*%`LjN4S&Poh*V&cc5BEsfe\tRF<#ZW*OpHhpg*U_see0[l,JGgI,JtSmdHmU:ke#7QkoIS]?\HSOm:u]-4mcL2>u,UWh<2A4N8346%2)@'qUbTh^Xue/NOOY"k)\Z?9q40`i/O(Fu(01R0/R4^gYEoU0e>CC_"h'GDEij$N=NhmfX7Y&.kdX`i-h8"EBb5_B7O)Or8+fCa%JM@$,9I,2X^?D@)SVfo.A?UPb&:r&-,8lSmn-#L!oT2"`7/mnA-3P?4MYGpS.pD,@_Q/>ekJit4&,TRjE4LLZP+8G1EH04^Z:HXb%G_0X+0l>5&VBGl/a1=2-b*N6>j`]R\'*TK(I.A"I_!\cP1s6s\M+s\on\*76A%qpe`=@pC'U9<2+.J])MFUL[*RICkl6#HQ'*o<u%+bn9r)U@C[,e6\h-$bLn$GK<EJ_UAN7&M/Id.ubmg32Wr[LUBKfh=l@).=ksb7C1PF9G\lUr\^`-2@<HOHoamar5$9ag=,5Y^;Gs%e;*+q1$iqk$<<dE(="Gi\&r\?j=>R=J4GTTn<:L9\Q?<@&XA<J+u17\mYo3edXL&5_,?ii56E.jk^dY'_<+H^9D1JI2@[[O&gDG.%,O=MUcuer>Th`*qa2ma&<XV1B#ue+uMpQP`BquILBcLqu*LfsQLF$U]YZ>M:/(t7r]TB(PMGb[>OX^Ikj2-fLjn0m#rkT8,?7:R+%M\#KpKu(B=60'r?le;%+W;t:J!S+Sg)uBNj8X:_dNXD4S,62%%BhG?E(#NK+\7tH$W.%EcJFnkWFqr:;-PbI#9N07s>iI`2TEm,H%s6+PhGRC5#2UBFk5VQq3aGU!_3I7ZiJ7efgG%Y0?>e*GCc8J.a[!@Pe(WmI]@,3KIY<?'CAb_q=AQo/3b5$5+c2(:c'N7bR)3c%8%NZ*J8&E6[j/!L?FDY-I_ATlVQh;r0j#5g(6Eq11(U\Qk]g5jk$]/ak[9;,T9cW6]H*@<eGpkcgRrY(,eRNL*k64#I,)D;LOY<Pa9%*D#2<YgdYk:n7+^M=6Llj@AuLKIidrp[SunhP8I@lAkA_:'jZGm'qBL0e_EE6I^6DnPR19(LPOP)'MHbQg,RAra+j%5]JPAF@<a5%WHU=3(r6o_Fus:I`sWLd&5u.l[*3U?P*.A'T12Z]2$jsf2f;7[6-SMPIjm7k&;q)b734S-l.CmnK0OF*Ac8'.2.+]=GpDX*nkc8]%C/(f>7islC]g>o<7%`ZlXJ2HJkSFE=XDT7Yk^+YE@?$%;1r(')i@7q(%`)d8TMSRUq^2?;gDMtKP>N8kIkpWklR-oG>a,+[[c`rs%UFQ4n'J::0.4%*$6E/nT-m>nP%ZBOhg;O];o*K.eoSW3i?dj6U+e(F7nWjpK.7`4<CT?-g7Rj)62ZLudm:NLodE\k_;WA:(qfn^i%q1J"-pm,:hE9M_<"r^hi"'hQhp<2:P0@61)`Hd&qL%jL)3F-`??"k$F.W,(3EUcOS;4gL$i>Q@,/uI;A.8%/MVc$7Z<g/$M$%PE*%1Hl33SnU;[3gr&eL*->]lXDOe(0]<+'$Z$!YW'EqMW-I0$ca6?G88ci>ah4HHAK6\d#\mp5[h>5IRMV#8XGeeO0^D9c4%8b:ZV4j%jT+A2A?[6;^W!86rM=\5_"(q#5i6TF\=+]JV]X]>:[;jL/*(+8^7\U?CFqU@dhCrn=q7*9h"#aHq;cu<-"go)de%"M;Pd'-lq4h'%KnI.$k?4lO`)Wq\KtEuipaKD0oN\kk@CnOa=1mIc\98_V#W,OI-Hn["%9]>l;qedp$WW_^D$LW9Vm+!nJq-TlSAR9jRi)dR`)Ah*%8fm0WN.0!@>i\-E]Bd]lJ5gE!B"`HnoFq*E.mQ1#l/am5=TQFd,aSa3JV`P<gQWH"h(D.R90>hh/f2FJB79O8)"dYGBh*[^$bUbV%$&E,?Dg,cJjC`mVih2`hY\0i&l?V&"Jd_Sdg2,Mu'rq(d@PFcj4aH^pi-6NtNhNK7@dM-hCJ['@p6]$ToX*(b4)$)&fdY].i\E#,%>j?$d$bsYB6+.U4)U$A3Y;m-rUio_C]]j0[nokVo;H(H;`?J7W`TH()muiQ([^,M(Dqp$R/I$`uVck>q-fA"]rj"(@!IA<>glUUW%Y[p8D+Ft#)qt7IZCDQ2/e>a]aS^qY$)oCBj-rh(14K]%Li,dSa_5.(gcWj,3!^DtRm^bN7C1I]$''Vtn0OB#V0j[a7O0/34"UB(M%RAAV"KlW@_*`"&C+/AW5QNS?p"Yjk$coqJhR+\IkH@lHN#\_Hfi]nX(Djo?-X>DPiR(6'ris$//H(,q>(3C,\fm:h?^qh;ea.S3Y%":BL>]J_rL7Ct5]GH.7EpBc35VL3%&9_S\&(<Y3JWiH2(&%^F0l.V\t;Nu^bZiDa+\nC_"RhGcWTh7K&TVN>-'R\1-/ft1!W=B`7%oOrWXiReP47*a9oUb>PV$Tf.T/hjUeYL76"36/9$@*_Nm+N)oTU8T`ofE\-jTrNK>M)PL*,8BI$o5gjg2FC,ZoZWV>M*co:JgD_8%PhXkO^f//<$pCGbjmbn<`H^-a>4(eeMUiuu=[:Q^fCmG'o4P4)8O]',DFBH?+_E^qDs)MKj,_@NF9Y_3RP?jF?Nq-56-sf64e#Al%c\#rk8[sRAdliNF(,qRHa\a0[4N!Y8`C/7:_h!<_e$Iq]@N;Z$I$*7$+i0N=J,fDANPTl5,W+mqb.i@MKTf$"Y?$0qp;NuP:Xapf%+@/?#Ugn0P8U-:FGS5K^1C"1Jc'_$cV:e8Ae,@=3bbEol:ULi=H8V>'@RJW/98+iI&QNF.BPY)uN$uSF]kA6Z<RKb9CctcF#02SW%+b+f9J]mHIkbg>W(k2S7Bd^<b?1<Ke9/FaMc]&H5ZZRY@@Jka@1L9ELCK>MjTK/d+*'%7a9e5eGD009GJ>Z+NUdMOX\h9s>r(N4.%/UEI+/V>(qYU"/,MYN$a?)[[A4M:$fe9\9ccR5\[8JkaFdY+(V9SlB]5C'j\4$7`1^?2@?9nFrBZb6oKKjnUL%KMIU/S.+_g,CX@%TWP^VSDloj$q&=[9CM3T%[rVX]/U:UT[=_-F!DN*s2=k8o4,D%4Ptu('9?rX`DVh7L76^cI:C[u&,sdqZPc>$",T[breo)U,0>ea%Dmn;HN/_Nnla!Z(VZ<^*^dkkJ)g<JM^?dn\_M@I(EU2'=C_jg3(u#PJq=\FOoL-jtemds0D'ta:E$ki*Cb)r?C4Z,Bn*)3HB"B<i%8!*!'O<V@l_GiG($iC@(K;WGf&?@?!Qq,6,A<fSG3\G7s$^B51*Vh2dpo4IKn0(p,[f9HF[Ytr&^=;uPJTd(nddlih4o9[[S)(nK%?dKc,-Q:nDrQ!#ajI[[(U,sQ\10?097m!MBQ)I#oU8Hc:Ih%QF;38Y[f>R@IGT?JcV6+A/#ZsBRqdAYSa(P\=\`4P1gl`53aZ.;<%-`6nKJ*)(PI0l#a"5jt@iWYUiL,u"[TYY\X`ROZ3,eJp)];7!G.#7OR*-lR&eF->68;(\"W^p#77I!#*l6eQOW/L]WKB%$2IC`!]%DTaPM3'a(J46tK/Ia$l3f;'e!b83!:!>E_#l"<>ePpXAHMrKZ/g:.$M<is;#@!J<>'5O#fX,0e39d,:ogH"i!8)#?<"k0p63W%.I%84GlZqn(V-Kr@"^67-U5R,S[f+5E:II@Y4-$iC1M>A5_A=b9Q2W:C_:2=7>7;f&UO2hjgZY2Fa"ZE0uPD$P>2MOg3[J4sFH\Q77?%4]Y(b4.hYmV^O]po"JG?";X9P_;jXkrJ/"Ga[?B07';-R"`&qNEncF$&j^l:?n0<]`%!2@a.QnP8aflG3;;L%nL4"SZ2P)=L6)fI%Z?aNsh3)Xl_hbDll57a#1B04UCYA7bQ;D!p]H;9s,TGh(Bf<,Aj2c%/''_R_mc+Zf+Z(Z_"MFJ#OeB.h8=jZLM@rHS*u`J69jK"q%5ADH\7e7e-9n[cu^5XE.OAKVS.$Md>as38dOMI*+69HMC9N<j4GbW0X8gE_4.PU8`lN^)75QCjS0DS^Y;hA'kMhoa0\/[D6Ob,X/%jh5K0YWrSm)Pe]bm'.\uPXW/8'*-iccHsE&A_I3eB/UNhl$rk6<_HXsGs<1b8>7,Gdr[K:%;jQ_?r!.AdDPu>FB(.kA1B)WdDQqA%+<Q`I>m?VGjhpOFG-e&6La];ndPq'`bj6P3VNo"3*=LV/Q]o?0jqdFQpVa07W2Z!@5$3"I-SQ*u(2b>TBgaUR+IHcQWsAL@d?XG$%+\ALjmQiV\F94'mXJ/36::<0$.3bF$"-Pm3CeKfp$/_0fN&u:q).]3a@fCBqh+?ZN*V[Hu(P1'>m09g?itmbe6Nd"(9qed1D=mZ)%I'jCT2b1*O(KG@h:ID1#]g0,a.E]YCIA\X*r(`qR'N!oJX,`A'AKIFWBD@lt?,bGYkS'eMnSgK\<86],aqhqgWL&B`9Ss+n"dH4U%,a-Ac'OmZu=E]#8=%_]fT$6D@UD9gO?]^d#7OAB[A"WOW8rI3$$d484S,es8kTLg"8tIfJ"G;I0e`qK,^`1JkDbm('Ni/nAM=<6j%pe$fds',Y%41CUi!)0Cqh02/,-GF:/pr8k-mK#9:64>^fN@X\M$72=%T5o<h^W&iBQICNbh3YIDW595QI&]cLR/q:API+":)CW4h%AIkVjdbTnr/3T]&Bk:0%0ac9[4Y+uV5Mqn+Y^B^&p?@oP5b&P2bq'sg`O6Q7;rAPW9"i+a(Y?*LJ/VNr:fac!3_Q@A'<n#H=Vr-f%k,<;ali9=nM28B6-FZ&#VFV'l;%['YZQ:i)Zc+9i%mst"Uu9<VcIjb1g^P*l6*<T.H&D&HSsur:ou)?lRBuR`nduR?D@T/EUJZ;%%iVLG]F?(FJmcajifl),@3]@u=34.,o[knIrlJ0UV-a=btZ@Di6m;e`2VSP+JGg))q)9gl_8)PF^,-'o`6FhAOa/t(glL!jQjciC>%).41Y:[?#u\k4MlY6I&KQpXtN+\RS=;CEsDXIA8>rW+5P>=M#Jl%^eTcP&@SS8Jod9ar9R-M?XX-%8`ur-0T<;^2moPn4CJ^l2Pm%20VV4d:_fqU=bqlK.O.resdDVj*IjaP(tGbb,+HEG>A]EYN#_M<F:,Y!j*o.1#k)<crrB+k(Lm.8MTD`9X9kNlpNNp;D8h.7`GCo%]ur3>XLUI>0>@^bYS>\5cY]9a`td[[GM7/aMRbt9``/g0)SDeSI"qYDr%jF)T1L9&ka2Q\#+BTj$>r!)$4M0J.H(KMV@6lZg:ja#%2tXc9K]mh%iFbN9??o8WTV+\GMSJPc4eaLfolecDW@f21HL=R0&9.tL>I,M_:$pNN,naAVK0OFJ$u-,.*a*-,3\/&X@r;hB9*AZ(%73GE^#\`PE4aD4ZbAts!p4jZ<,6WF@#du"Y(8$g.Od^kr.?s"EEOVt=RtNA9)E2.:b*u4CmQ[O+HcuI"msd>QRlf:[W4M2S$Hf08%>[:a*.HkrI3o''`#s`U!1l%i`L<i+d'%SVA_\I8hH2$.n%#EKlR7!Blhpaae8W#R7^3AomlJ':ETOF<%NC0"T\[uWqDYK^:He]fo%.<m*BI8rm<8q)mngO*e9.FfU(Tt[)Y<l$":-c,>5<[`o+eO&r6=)_$LbfSsEA]7`NT_@/6!dCW8&UouI;J4o]SmXXf#6[;93G,Z#%1n0nqGdX"/b^@1qF;^oJR7j$u;J:rhd8W.<?_B)`B#Or2'?7]F\-f":lH2*Pn!GV+JG[kP*NdEN1pi[V?D'"CGguSp;bD]a2Dq.X%p#imGOASSX;l&:7\a=<Ih&dWm<P1p\S]<3!>TL_=X9E;t-hgH:Eh/?QQ5:>C.B:L7/i#e+SRJe?0u>>Oa6e8nihu*D@RqF'R@G.`%H;Eu>PkoTmNX3.6]9YPb?b+'a_)Gaf;fsXL+p*WN"t[sd;#@s'd8TRCTG*<S#t;RYm:KHq0VoS`4V8.PMqe:<`i:f7>#;Pn#uDq'%Y*Y^IU(JX*ard%q!eR:p4T9Qmb]@b0.0\Ep3(?9/lrq9k3C651N0&'58\.i?Vr9<^&hUeh9d0$Sq)<d7rZ9-XZIOCHakh'"J,SP<%`JttSh?\hD%P.G]Z`X$"&E8]J>1&L4#2Q!!EZ6#KA1YlB$-T>q?:n"d/>R3,,9sULM3TGV;SM`Wr%l$9.W\S"8)DN]!W_T"+U4;f%iF<rfTG['YKgfR`VDNu=Cr[5b9bZ1/i@Lek-;tbD"o,3rlsh*Npd@uD-Pn;>r"hfM[EZP+M<_PWVP!%'Sn1I0P&\a_&!7:u,^5?_%HI@>n8+$Jirh`2".22_rrfrnU3n<CiIer%,V8%S6iT5,=bUk4sH2<cm<X6cENToH6ah6Kfs2dQL/jN40,DEV1j78rb&B^EQUI%GF%JMdBN60S1ViW&(RC.LDX^HEgnk;NJ;k>bg?icDB-A3Zj)hg=pCIS\]Jmr'K[;*]ah$Z$H6#Sa%pY6aRa,aHCMQ(@irTA76i:8-AN%[aN_IMm?Tt$$`"N;'=!N/fZ*u7$F)->Vn5hf+6j7J''gOUh(V\FpAbROdV$4lHB!Y7!S&lPSZ_:Z/oZ!cKJSY$J^hJR07-jmi!YR%s846X$e\LgUE0@&InD(W*l/NI>ZI5WmeY@!?7p3.dq($"?K>I95Lgl3VQ`Z*I(jBlOm^3!2XM$m&)aq/qto@+MZ6%p,^P^_lstmD%kM!V<!@1EU[:/8i;P)WpkP]hDnbq9bLm!u%m,0's3CJU%epa`88[k_o$Ln""N!`l9k\,4-TqoAO:DT=A)0H`<;BWO`V+Cq(TLG!$%L[#A6<ZBj4,\(aFYIZB,&kmCEY*kWL@'F4\cF4JPk-(-IQ.hZ.NX=n=AWjLE9GF</.ca"q0:"-EeQ'A&b"*q9-:VoM:[J#ojRj!k%aWdRc@OnEh\eaXK\#@,"&l*H#e^e4[J8*g';b3]qb"39+8-C;e1=^=0>du%08%[)4Ct3G;,*ER#?t65T:^.sP%RjNihh=eA*90/,%juk'CM&r['<$W)uY^^TQ"=5kH^2V+o]Q"nFpkj-%dI/J,GUc7*DM3=.IN\A8aFTPT\]Nb,>TS0[8pVX$c:mfOac%tSC.CUM+GiZN%76(<[C`P5J#1VM@fp\jPpT?khZK&j[<.RP&6V[kYgj'=k%M_9:PsGk7KB-ajFSjqdR\ha>IonFTO$,6Li+60hA)@T$a$q[Sp<q9M%hdknEVMC(PD,?aZ>>56I<%`oP=`+93Q*.sOY6J$ec@J2P5:Q?.T*QV%@>BhP_m!A;jf-u1W&?+RWsfXfSU=q%0L]]pAEF^'Sikrl%@acL'+uQ[dL`iBr":C7Jr,!Wc25GiJ=ZrSK7f26a50]Zo:C"`4%qTB/3-r;:[o&I^R1<*E'--X?[[\;Ek%C!c'[cHpI%)('k6XV7%@*s,JD<$7GUA75%qnN\`XTAlX08Mb3\QZfcEp2ko,8+<c251XlF$:"QJZ/"-OM&hTjOW$3iFL@S4>Sb4E$ZmZIV5<F`l":LKZPXB%Pk6AJ[dU9r_%CKuf4i5sC@'`_+rsV7a@aDu,Z=k7p>/l.2:d=V<B)Ab[Db[U836FcbXQ0hm;*@;)QTI0^hJQ@C./Q;#3_t+;UAMj%@E@3V$-Zu1gIV#3aNFEe;]9<[5=5A6*up-^Q&9mk9^QAe?P8jRB$/ZFn:g>/6J-<CM=A;JFU^=RE2U7=UI1pt,4Q!\Y&1=mjCj+K%d:V"40IW+2hlBoDrq*gEFjpsDm(n!;p%rLp>Ne#"kVZR9Zp-O%c"&#[+>anH;[nMr\gl8Z=,/9MYsq.nVJ<N'k&+`&XrdP,57/Yu%&eGtr3McI6pmmT9Wu3Sn8^=!Z;U,tQeMI[#:!"`ARrXXQ]UCYfhdB;9>6E!M\B)d*6@X<q_*$0dp!`_3"N%s:1A1Qi%=0sb7kKR'%"Ae%q!#&F-U7MOmV"Mo>cS'eEN<+gMBV]m8,`[JnXEH'3>H#1S9(o)fSbonO^_^GQqK*rsfEc,s\d;mPL[_ecRL16G8b*7:,O2(8%EXM"-_%9iY3]o"LDlURZS$?>kR^B@YP)*T?s%+*,erP=$pAmg`Rm]G0WXqU3TY^\**KnSlepp63)qPK;!IL'A!*`@1_oh@d>_g<g%e'N-dZ^Mkb1g2KU"$IBY=Q2Qq8e%6[fNfdSV(0\N)7BJ</b!AN#+Ntf;DP]1C*jF_qFi^9rCD'-ON?7g#ng+0qFj0%'I0m]qJ^C(%NItX<s,P"LbI-%Ea^:)6V`$ZJ9m"%"N)"+$@S\hMQ:@B\$uV[Z$T?mRA:Y42#F[BYgoRu$@9^hq..c;r0M&lbX#_K@Y9/tWN+G8P%:qAJ2_ldQ8%iUeW1g&(ZS``Q0o2_f'+,h!:qpQV\;r/68@ljT%orF'H<j#l$/6S6OoO,4Hfj[qMSAEW'X.+hj+^%GMinp?`nq7U<%6o_"G$p&(oSL+%FOJ6^p+WPkqU%l#d9$B2kX^*,Y;&2G@M"QflMakUD&FlS2ao5JIM+rZDD3PWu-Ea<&P$D#?dDsBh$NF$?!,JjY%@1+o,gcm"Ig7'nk5Cp:=HMPQWR!a]dO?Qg`O3'+'aiT5PoQI)X(=sOj,DQo%H(lLL0P,egO4>PaRH0g%^%O.Lp;ijVn%o-9JkrQE%)3e@jE_qPifEF$/kS\uQrlK#F</:'N`O+SD<kSZj])COm2M^/r-fuQ&D^H\7,]-0oU=j_2-0gqoNaigkJf/Sg5E9V_,E@<mkfb<9%8(%rcr/r8s$kB^e`d:3#q*[c/=3@0,RRU80f0HX[;p[(V!7Ce^&q!;U50bL8Wqur+[(5``lI[BEW[=X<g^GcKgfE@M^X]4RFMlc^%("Waa#8[JWEm6ShLnZdRj&!7T\lmhl^jd9D.6rZKMr@-3'p(?"[$-H0b"2>\+h4UaB0nF/-q2h(7M`a_VCqk2N@=UU)=O,%L-@._%rZ(AV&=I:?YRFsWd5flQ9L\dVeRthL+Pg]\.b`^94c$]%,p7MDJlTh$ZM'o=LT>'6>f)?tjX31)3dPcu5)7BWWkCXuY<PVVm76Z&%bQr_CUfa"/@&`CY@WtY@R"GI>(JB1dd3MInP^4di^r`_PR"/Wi!ZC5T_#oh*BKNAMGH"T=q(LUlGCErj8ToVUnOi>M%?OsYR@866%;(_(9'O?8"^Ir1VEA<&$_WlMRlPe-]0J\i%CE%*Y\=JHu^a'9M87WZ7DKg28s#W#K>H[jAI5Y/`UM;im6$I1*!ud\hV)itK;$\&/%$r_E&AZ_8'8'"P'm0q7baFR;1q#):i<6[4N1$_9qlOOd6(Gi"P0uB'f/Z8]5XABV5RW+KXlN]f:EnHFbV1;*U.ap;Z="p6ReEaXM%g&8g?NV'74S.oK.U13T4?U#7@f%l'c"ojV#fY`R4d.3^gP=/P2Ugg*m#FE^bPQE;UXS.bciO;qA>1+`t#"L2Qp,FHJ^.(.,2`H_4%6'1rA,D:N8Psr5K2)*VDRc#FES<\PSoSoB-ek4gMm0?.cfjn0d1?N[`F#%dYO&4#J>Km`s,-7b&$oX:+e&;U5<@;MP.UmF,W>p6c%jB240nY-d3d]*W3nmb:qoZA\c,r)#9*%(6u,H[rPi^WA\TolG0Q$D]@n%ZDa5ttp:4]H=RTjj20B.;b\3Ro\@4>(J-$988L=WPh`%2D&QdXl`.t5HH;J:]CpBd,Y;I@"SpSlTa0r`AT)#/9qbK&W0C2N64liK^diOX9NM_<T$P7&NMXML5PWT>K*ALq43mh\P<sl,hZi@%it)Db-b=pkQ.>=_?9sXSDTkO8^$8%\4gW-&pCBW#Z=!ER#=8/3&pOhjgqW$'+;)`T7c>_f%aA_da[5i.9lL7%iZnOa_8f<j\G'M+%MhBpK-H59r'fsG[2gNEKi5Rl_+TTt:P<ObQ^]?75kfMNWB/5OO0[7=L5=**gAp8;V'*X'tCHKT8%S,D`6J`+i;8F!'GCD=U*)^kW%?="(rFK-bJ6!krIk<0Kq"/JsR>"EK9bN[:!Zl8/M5gF)Cq6]Bm!4[.4?s.A&4lOgmL2lKrOgr&kMOu%KMTP,urEom`ARCc@UA?#K%B6tW#,(WW:(Y3q\.5kE@$`1DN>Z,hBg=e\O=sV=uG_\@ta:0=0Oj47F-qsKGH&rXqbThat][1MA>iPL,bUjLbWJMN&4!HG[WcEM"%p@1+I=t.%WFgB#9M`W<.SuJDQOkH\Op^'OF<@jQ9Ego2RbrW.J?;bt6M!>=DVG_T=,c=HD8C-XKL$B"(CMe9R)s(F%_B%=Y"ijIs%l^'$e6ms3KLtqfQ]9X6E3sL2)JG:`$c$*;=!UJPrO#]PqpcWV%4(Q\'ZmH?#g74ko2q>#]]DkV8P=,%,\asY)OtU4rHV%WfAc:&4%(BO">H,6?s-09$fKe-,g]W>G^FsBn,.Tg5W(Xe9@f%A.e:+Ci3i^[Ok@3bl:7<n_1:/\QpjF)$Y*mGe6d`EO#0101=IIZ#M.5(Sl%+&OE\a,:s]MDsPTJdd-bD@%SrI-b.mJ'7du.qt-J72Y88`sKK<m7%cDL=Xh;,4$-(h@k6g)3p?XLJ>u_b[q9-4PU>;L48UpUIhJ\%gbo46_l**'.8<S3GPHrt/-(8[C&'A6d-6>t.TK3pq-(^OJ2e%4F+%_0)'$`-I2i9!r./6-%.hfp10jsH0W?9aCFiFu/EVT$NL75!%4d,#+StJ*[$A0"dL-a5G=PsLio)T"Sejj9"2J>JZ4)!b#@1YL+NqB>I/6G[Gs-Ijd]9_Ku&Uo=XLY=Rm0?0)%;'_JL?jmkh^g>Zt%]eTpPL%YLFh*uO^NIH5Hmu,\pqm3k1?AT;;-o.2.),^-n3&9(g:ih;NN;NB[hdDAOrGb$RC*.'7_jp@%$XKRs*XaA#+fFnAMe*0g%]SOn(C#ebW$@2$<elcS:Jg227%^"X.i:p<cD`WB'PPGR_'be5A$OgIXZk-W+EhC0T0gbt4>D`B_2g2H;D*,11cC1G%l68YTVc2G^%TtH"mLD+WJIM5mq]_8FORolkZhdH/gWnoee73fd&kj>LaQ`&Bp/XsYa2K-P+Y:N7ZUBTV<H/4nl/tq!NWH>nTd[MnS2<SY`EC$mu%994B7#oqGZD\ZJ]=gq_OKR,@i\/pZps0snp6\@2X=n7.]Y.?JEDi_f&L.)5>)o42\7)<HQ&%Y0[EG,`.g:FPRmcq9Bn'+`gR\RBa%r;UY%1m8s_nI?V2m)clRfKh3T,=NDQLpV.rfHS7eF&ZLKOM-\m<lZ[;SB:6X=KOVQ-5AY9[]5^I[?FY;g',+84>*Y(K,6OKcc!+S%4Dd)0!0ijZYAigcP5qJ.Zs!IsC?o/Tm,[9[QiLso8%^#WPt`rdE?j7r7W%qu`*cY#=>0DgG>P"KqN2"QLipm$18rtlTon0uW/KdY%lkS%R#lCW=&'T0*Y\3Z-f"lUUZ&LNDX?I&R/SZ>N7pbt-O31U#ZiXQ2>1Qgl/>1QQ\LTQA.q7Ft1Zbq]XfaADiJsS/&_!2#M?QXY%cR&co0/9Q9+kTJI=Y0=Bf^R9?U7r-2`-:)!\YGVWO>W9s1.i;8dRRUjoA_=o8D]9jjXNie>[ob@B?<VQG9j=h4FHl5HncjKW3E*=%H?>oi\eN?5r7j=ggNm`]F@HBKSnDo+&eYppaCi.0&LBV\O$Vik[BnJbMrHg7L"YK60cn*S+F`32h7`>un\%E1&AQ4a@OB63dSeR<%>67Os\-D1e08,0de=Kss:@PUAG#;!D.`O4(N$HNR)teF`_B;Uk/#N*l+3"tU-%!9YHmYj-26.PVA=^O:^TUm@meBVcGFYFLSLd+T%kCS%h$R>*CV9r[^:0ZsS4W+N@=.,RLjNVCmC'=Ip-GjD0@K5to*E848IUrE`L.Y<i-.!/sIU4?l$s0bhd]Y@FP)S\$=R[k4HL0WG%,Se[EO#YOpo%:-/nZ=l#p\7#`g0ENrIGO=u?CVT6;3#?`@G$kZ7#MmpaEH*9o8sPL\KXE<1E4S?"/mDDc^]g_Q*I@R:CtJN_EW>)%=5eu'$34E0l0_7qqV%E1W(mUIiRTTml!E.Z)Y+o%"hoEB'bY/bIb8:YI..$5\q2TC=&;TO<OS42i0<c<,]%X.H/55&)T=MckIm`)%R$%5\-:lm0%GcGi618##$QS&"]G9dO7dumJ0;60;9S)"$i*93@$"9W+C!K\e(p0fr#d\XSgUZ_&l8IVmkKug,dB&NeL).\mmb#S9%:%gUMEVbPY/mpB8/Nj5p6HLKdD@Y>EXF=4QE<5*;<=*'j'0E$!POqDLE.TsB!iWAC1FtrR;5ZM(ABWa@Y4[6Z#X9t%P?6[ek9qI^%f3PmRWQ(^k>2=n_@Iia8Zo]I3d=T!V7LrE'H]a[C`4>Rc"^Hn'p>Q]!EU;&a=U"NrRY846B?Z<]`iIn!8%sma\!d!K1^phe9RX9V%:hd+"bBLY1K;k_$g6"^BUT"kh8ZIX1fiq2*Y]I*.oYLTBOBl*KL/sUd%?JbEXqBgZpJf2&qcHU]FWX&_HrEr:,q:CK29/""E#/iS%NYG4Y@-h08!BRf9]rAB8C":n,6;1Q$N/)5+!d;qp(BOal6gq&#E'YJWn1hA4.^bE\4gHt$UD'`l(<dgUatA__^q9YM,NMQ/p4S"@%'D,#%.T;N3.Tt.TL]pf^ke+)c3R=_BHIE6`"qkGW+,M0,YF%AB)(+Yi#j1Km)a`\D9'\"/*.)X^4GnN&1U/R8BR@8q0_KB(8(KR3%Y43DDe<j!sZsoKPMdXVFgrn$rp\R.nT#.8tA9p!p.KiB4\l4$aFq+q'"FGD+8$Q]W\KU\pR=U%4+?N\lY)Msh[hAV=dN/ZW=gBY;%`'8tafbI\Rdi@TXW%NR(=BLIu,cQ?qJ0N3o7hUMW8Hh1olD,\oell2-3kq_[)Pr(Pq8`i(BoC"[TfC/r%M122R5I^X(aZdZ->:0R%j%@]`o:0-c&[I0BN:+i1Zak\=23ejWi>!sMZ;7fO)N<FFr1Y9P)tZ)K7R,50_ruiA7NfH0r[h$u=7XqigJ2dr>M<k!HoEL!RO*Ue%ESp5d\$8p_bRh[($leho.hnp;,=et=/'8;%%.TAa5bh5!'cLg?8\V[oVT)N<A+0m`WPuB63+W?qcJ<hYrF9Wi1Fg:20%%I@+*X`_%Pd_Kira,I%d<ZdrKAWHf:np6X!;7(-I50FAo[NcTVmbm9UG)gu10ZBreejK<]F@2MhKGmf.&ZhH/(o4Z*^p2@!t&sAq2HoDDQZ!#%=V*)lA\MMkMBt7$ZHXG@Op7rA7AI5S)b-?O;[<hXB<[1n07U*B_'RKDT=Jr;.-g)sXi*P'Jr5RgZY1BEg[8#_7CBH.*qHBEQ.jD:%".uk?_&@"PoWEdCRujd[dWekfepGleFf+`^TXEa^8tT1uV'H)D:+<u<o@@'_;KO>Oo5Tt3E/s/`+(k+6#rC7c5]C%PW:3`t;2_Q>%$0%lB.:VR.pBV,D+Rb-5UL&[4l\T3Afin),G+3@5_k8eS1sS^dLV`b<YGN>Zk:]sC+=pk/(QG3ZC$l[>:t#G[aWnp@6.QUtC\9Be%288BSos5u!ZReD!)>dU"(V3r"aJ;q+kr*UHV<PgC*A]%)l.e<cnEnn[mPr'+dM:![=e$sS/fD>@]f\-lQt^WuGWW4C4rM'84Z<-g%=]DVH0=kW]7\Hf2UGH":,TJ96+o"K[c6J(:i+=m.]Dc]^PF4UE&\U#anAVX'"_$&!WnL>W(G3up#@O'"6+pGF@'(3DF&h&LMm?<a%*[i6LNG;RuX`n&#kU)G30qq,cE76MFQLp<]&G9Vs&KV`jmMI)j.KF)TN6J?1N?!e0J?20$D9SL':25JG(7h7h0kpf[=A4j@gbSOE%&i:T"5m1O[kJK(mV/,\"&(RdIrjECRebjf\o4VT\Nqa9L^'Pc"-#/Ja1F&\/(3>KMF5$MV;p<:-T9VmKPQG.U=fe?TS%au7J@@qj%XugXiNSCsM8X\)V\nZ0H_cA"c4&gN=q/WN"<k1$"@S:BCc^bd_UQj<OMNL40K2c\<iNe>NXc*XV[7l\o'M+rY.^-!`YDX[8ftrS%%7ga8GA!($$cKC49eHHNmj[mNhg1XJ*.E;%h2cWsi#]:C-``FZl/A"n!09Rk-4-j:NA@bkfBHA[07`cGqGf(8l4c*e1^3PJYa5K9K%Aou;'fVHfs9g5$.R,=7ji0LXdi"jQ&02$oeDVfQQdYk.c^\8?>L9D\`VO[1)gcLQI7<CRXPe:9:9scV%>2C`0ZC$c!'5\S![8_/?%)E/9Kn!5ArP,[>U;;oJ3O6pbkJL6=ZS'Tj!:E2=AI34luD</d%OU?KfSZ8F+md_d^?cu)/`Zj'-!kKb'>7]1AaZJ*)Yl7R='lj-I%c926&is($;RkQsJlN"FY"JaNZ>\R91m;YN*bsq3!8C!cKUDD;8E?eSrpTW/d0UPX/-LkB&mU@?QjYd1`W%&\l_agF=j-KL@]]Lqa%&g0#T$IqKN,3VHMrfLZb=hW3`,"Ils(r;?Oa1XGYr;m1,$*B5fK961r\hU8!\%(ZciEW1_Na`Wc+l%[:/Is3Qs':\c=NLFD^:V&L%ejK\SZ581SgIjK<QOl<7=cob-jk";P!QKeS%>J^FgbjW_)i;k3b`]])T[-^c<9O%TE0nY&ECVsunW9IHPEclM>gLn+X:?A.po[,1%ZRVYGF:!/kf?K]<nu,A3c"E*uXma)>Hr$p2F5GJJ-@]tUH-2b^M`(3#N$AA0h1bQO]3%TC%rod,i_#nn6M4QtFmqB0r:SY$;:2I\%r`0'0\,E9<Mn;2QqcW1C@hfoY^It>&D/FhCESnI_Dcn^+D.b#5N99g!H;HgNV#Z?k^+nQT)0BM3/@<AtroW_C"8Rm=DT8bGn^e<B%%PYN_`Db.D'3S#MA$XRig@-qc3=9ni"hu+PiB>4J'0&2@GduKI"n`Ppjp>"VK9iQpZK:MJI#?jes!Ik.g]s`tOhL#6%bRb*S(7Sg%UCrG.21W;uCfB3*"[&Q!"gEE6'Yph`*O>^ZmWZbC`%b'MEN0(A!6^lB5'R4c0^dr^<M&!;*Lmq]W6,QT9kp@C`I@@BnZ*YZqu@.H%I"k[S>'km5V&IiHbI%t/!iX^^EgXh*Yluc'DblKY(JltM[Ko"ela@5Ag6CF/6RAZh90-!S]d<M1)dk=;Bi`h9XB4R.p5C,^EI#VU%5LHNL<7eoDH)ZL;%_MYo!u>MkbWj+@B*rc@$l[)GfG4hr<BbS$FE>Af<!25PMo':j+F3fDDY:N?"sRjE/<E`ZdB8l\]^cW9>!P+2%9df?qAO"G-<F104CWB*p#-)mk=#5(Q%f)i3S0iZT$aoS':AV'9lR45k*3d?H2<P#r@"W!'fDdUn1a"EZ=;g"1XEY@tVEh7nRJ$Na%?Hnf*2)jOhSHTXN$sPt1.=7?`j\!6*MKa<VT+f8T,s%D3LhgGh_s>FJWYKo,KoRS%naNa_n'J@%q;;83D8RW:WJZ.G+5bE51MXY9%ZU)Wuig>N'a$_eLs#mCMG7c!giPVn`EKe+KA^/V,iUFK]$\L>KLHpd@="3#90rBC_bD+-epK$^AEVEJpE7X_>h,G[-RB]3a0g56L%)JFDf0p;U6"^'_QU&.lE8";lREkca+<[`&k;/^O"mUV<Tca?/VXHF]I'$F4SW"&t>q5cGGo5dq:OVRqFb$2-O_Rf5%CCXY%*V<s`%+aD56QtYbI;XB!3n'Y:pf]tgkIp?!*n!gcfN>)%GaKmjs=$\UtH0B!*RW8pj+u`Z$<L)>1aJZ>dT7R<H)0a*K1HdXZ8[RDZZ@t_^%h(0B./u;`U-nJt)HE05>YWkd$V3t'SN5MN$hk-4LZ2\8prk.75oZ1snLf>\,q0>QQlAO:upVSk719[Lrq=6nh+KBh5Rr`=F7NW"k%j"uSt1J0:qmG-`L'Ja\%^Sd$O4LeBi1\!\iJ[)Fn#-Kk^[(J*GA3e@8-V6PEr5o<;B^ObF1n^Mi]Gs:`@i3Lc3R"mW<jP2AY'K?r%EPgjuh;-1PcGjKqX8DS-X81KK6/N=21X"-!i$<q/S5Mut5Stf^Z1dZIN2Q<(j,8s3>R*=?1\6BaF![cSa)5K0I$VF+U2#B/LtE<[%9&Lc:(=(9l9@LhWEe^c;<T]BpDM=QeGN%]9f6L74@,1\V$r,gcH?B/AK0[p>&IX>nft@]ZNG`ij8=O.f>@E[#g6k[SOI2X/<3Ebu%pOF[qpQt4JZuLDVHW2]JJ,:IN+:;uD=J"R&nZF\4iDn(D&M9QW1#Z9ZUZe'k,j?4PR_8H]KV?eLgqFHa+D7X3dADY`3CDI#WTk>B%+dQF\(9.L2/$ANk#Qsf5k_R'9oZ6T%(RYar_OL"BnndJl0BQ8i*1^.t/u,;)Y?D2a./b"iCn1srfcr'/EoG703IEGP%QU4E;9*>+%Sj<ui$pD^"q;Phq!T0#@VT/<""ClSugUIVAKPrbe\N)^K]H7\o4e+rA28ANFFj'PE/&.3MSrofm#%q=efn\Mt"2#VWk5T':2b8Ga%niOk$IO<q8Yi5jC5u4QAlk\?T;98pO20*Lk9W/r&"ZNq[\`GFdAtoS(8BgXNG3`]UDDb<*pIs8h/1MuJ>%4N>phiNamaAaWE)V3]%\tQ3(hAh^o#[<J4cJ7Q*cZkm<IDns<l7(Trk9rR&SWPP2h7X4AbJ@4Y7$q$/g!2B411<T^7NUttO7"[I+[cO!5knEg;\pQJo!,O0%ZZ@L`H/:U&4g='T145_-k[NQ:2k@NK=-j-aB/Bn"3)fL6ccD@gIYOZR08"+VDq69g@^2P^CulR@HQ[/sZ!YV:o!jP(^?O)%cd$jj%$gF#r`n_.PaY1,cCi-A39(Mjf@_0j3%Q+ClfM%Dr-f3<^d9Fm]O&*%,-Temj8Va0Vd9p>ehhuF9h89sFUceb$pmC%sSh^QX?ai5)%jb<!H?fg8:Q7N]+,9WFWF=KL*[I'uO9hZH@\O;nJb==+.@o(#*;Wn=^qXUHLXP;!pDHE-hS:%Jdg@cqVn"InD@QC>%#edXim(ufM%eEr";5F+__.?-(alL06&@+@iOMV<Y3hp`<k_o#.C/VIO0V@Aopbl)kr=LXDfCuU&,]%K)rf.+L.TS`%er27uASX4A\YeU'4DK-N1%_@>+jDcrilO7>ES)0m+=@"88kg!3\f`F(.ERc"\6C/#g\XX56j3(k<I=-gm.Fg&JilQp5O>t*+rAQJM98#?U9<_UK4ll:;rLk@bV%+b(KpSLL*Y7(WmS@frXRX-9.2$c)nJT\g4GQ:*:=PfH?,;;`PU\.b/l/?!s/cefsT%jucMd5=S'=sE><?4oraDecj%MerNa'gLTn%j5*3#NaPF0)MT"Eonh"8Wu='7<cX46L5qJ@qHeKk&Y=:'m>U%*L5'dZ%9]O#B6J?iD-/Vl,(qTS_(A5kS`')O,5'JAVF"7\";]X4%?id<=c:gY]bZ>amoH:IcpC!G!*R="gD3:=d?+iru9[/r!C"Qe@HhHAjrp<'$?DoDOI_":b*"2lldA9&$qRPu&fj%a.d2TE%mJ5>.%Q([nurA*luc?eaNrVRi$9K'P4j[TDHDA-KN(Loa+kl)DP>K,Yn<IEAYZfht)%k=%=$Qc:haahL:]KX&ZoT0bo0#oXBdmjtWhqs-o%fQ"TL?WTN>T5XD/%j=%7pNJ8]J:[CQ(NLjnj2K?seL+PXJ*TU[5V$a>H8-VFLZ]sH8'TdY^JtE<N^&%2*CX[LJ@NWn?8L!X6EM*-%`c!NU&pW+TUo#E^o+'*t?[bdGZ2?rGc^L8P?F4fYme_^j4gsfTp%I)=9.&gPHi9D2h&VSoVC4U63?Is_fii%.^B/9(8#g\tK`NT4%iD%GZ5oDUr;,RUG?X_1VPP]5qZ&A\3FnhSmro8F3W<4!/V*TZZTKDbUH<_QL5<HX-^OK?-s6f>?ro\cYq"#Rlr:#dIh#I7I5Q0]i%T76h2m14^AnA>e:qWZ$Rs7Yj/?iTi]gP6l#q=NF.O.Umtl/uD<rVGW*+9203j0p\Vr;-#o0->]>T:c,obN"c_oH/PWe%bh0L]7T;OAeg~>%AI9_PrivateDataEnd